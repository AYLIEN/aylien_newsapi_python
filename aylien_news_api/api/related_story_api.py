# coding: utf-8

"""
    AYLIEN News API

    The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client.   # noqa: E501

    The version of the OpenAPI document: 3.0
    Contact: support@aylien.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from aylien_news_api.api_client import ApiClient
from aylien_news_api.exceptions import (
    ApiTypeError,
    ApiValueError
)


class RelatedStoryApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def list_related_stories_get(self, **kwargs):  # noqa: E501
        """list_related_stories_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_related_stories_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[int] id: This parameter is used for finding stories by story id. 
        :param list[int] id2: This parameter is used for excluding stories by story id. 
        :param str title: This parameter is used for finding stories whose title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). 
        :param str body: This parameter is used for finding stories whose body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). 
        :param str text: This parameter is used for finding stories whose title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). 
        :param str translations_en_title: This parameter is used for finding stories whose translation title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). 
        :param str translations_en_body: This parameter is used for finding stories whose translation body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). 
        :param str translations_en_text: This parameter is used for finding stories whose translation title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). 
        :param list[str] links_permalink: This parameter is used to find stories based on their url. 
        :param list[str] links_permalink2: This parameter is used to exclude stories based on their url. 
        :param list[str] language: This parameter is used for finding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes. 
        :param list[str] language2: This parameter is used for excluding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes. 
        :param str published_at_start: This parameter is used for finding stories whose published at time is greater than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). 
        :param str published_at_end: This parameter is used for finding stories whose published at time is less than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). 
        :param str categories_taxonomy: This parameter is used for defining the type of the taxonomy for the rest of the categories queries. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
        :param bool categories_confident: This parameter is used for finding stories whose categories are confident. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
        :param list[str] categories_id: This parameter is used for finding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
        :param list[str] categories_id2: This parameter is used for excluding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
        :param list[str] categories_label: This parameter is used for finding stories by categories label. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
        :param list[str] categories_label2: This parameter is used for excluding stories by categories label. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
        :param list[int] categories_level: This parameter is used for finding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
        :param list[int] categories_level2: This parameter is used for excluding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
        :param list[str] entities_title_text: This parameter is used to find stories based on the specified entities `text` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_title_text2: This parameter is used to exclude stories based on the specified entities `text` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_title_type: This parameter is used to find stories based on the specified entities `type` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_title_type2: This parameter is used to exclude stories based on the specified entities `type` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_title_links_dbpedia: This parameter is used to find stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_title_links_dbpedia2: This parameter is used to exclude stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_body_text: This parameter is used to find stories based on the specified entities `text` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_body_text2: This parameter is used to exclude stories based on the specified entities `text` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_body_type: This parameter is used to find stories based on the specified entities `type` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_body_type2: This parameter is used to exclude stories based on the specified entities `type` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_body_links_dbpedia: This parameter is used to find stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_body_links_dbpedia2: This parameter is used to exclude stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param str sentiment_title_polarity: This parameter is used for finding stories whose title sentiment is the specified value. 
        :param str sentiment_title_polarity2: This parameter is used for excluding stories whose title sentiment is the specified value. 
        :param str sentiment_body_polarity: This parameter is used for finding stories whose body sentiment is the specified value. 
        :param str sentiment_body_polarity2: This parameter is used for excluding stories whose body sentiment is the specified value. 
        :param int media_images_count_min: This parameter is used for finding stories whose number of images is greater than or equal to the specified value. 
        :param int media_images_count_max: This parameter is used for finding stories whose number of images is less than or equal to the specified value. 
        :param int media_images_width_min: This parameter is used for finding stories whose width of images are greater than or equal to the specified value. 
        :param int media_images_width_max: This parameter is used for finding stories whose width of images are less than or equal to the specified value. 
        :param int media_images_height_min: This parameter is used for finding stories whose height of images are greater than or equal to the specified value. 
        :param int media_images_height_max: This parameter is used for finding stories whose height of images are less than or equal to the specified value. 
        :param int media_images_content_length_min: This parameter is used for finding stories whose images content length are greater than or equal to the specified value. 
        :param int media_images_content_length_max: This parameter is used for finding stories whose images content length are less than or equal to the specified value. 
        :param list[str] media_images_format: This parameter is used for finding stories whose images format are the specified value. 
        :param list[str] media_images_format2: This parameter is used for excluding stories whose images format are the specified value. 
        :param int media_videos_count_min: This parameter is used for finding stories whose number of videos is greater than or equal to the specified value. 
        :param int media_videos_count_max: This parameter is used for finding stories whose number of videos is less than or equal to the specified value. 
        :param list[int] author_id: This parameter is used for finding stories whose author id is the specified value. 
        :param list[int] author_id2: This parameter is used for excluding stories whose author id is the specified value. 
        :param str author_name: This parameter is used for finding stories whose author full name contains the specified value. 
        :param str author_name2: This parameter is used for excluding stories whose author full name contains the specified value. 
        :param list[int] source_id: This parameter is used for finding stories whose source id is the specified value. 
        :param list[int] source_id2: This parameter is used for excluding stories whose source id is the specified value. 
        :param list[str] source_name: This parameter is used for finding stories whose source name contains the specified value. 
        :param list[str] source_name2: This parameter is used for excluding stories whose source name contains the specified value. 
        :param list[str] source_domain: This parameter is used for finding stories whose source domain is the specified value. 
        :param list[str] source_domain2: This parameter is used for excluding stories whose source domain is the specified value. 
        :param list[str] source_locations_country: This parameter is used for finding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_locations_country2: This parameter is used for excluding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_locations_state: This parameter is used for finding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_locations_state2: This parameter is used for excluding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_locations_city: This parameter is used for finding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_locations_city2: This parameter is used for excluding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_scopes_country: This parameter is used for finding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_scopes_country2: This parameter is used for excluding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_scopes_state: This parameter is used for finding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_scopes_state2: This parameter is used for excluding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_scopes_city: This parameter is used for finding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_scopes_city2: This parameter is used for excluding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_scopes_level: This parameter is used for finding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_scopes_level2: This parameter is used for excluding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param int source_links_in_count_min: This parameter is used for finding stories from sources whose Links in count is greater than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count). 
        :param int source_links_in_count_max: This parameter is used for finding stories from sources whose Links in count is less than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count). 
        :param int source_rankings_alexa_rank_min: This parameter is used for finding stories from sources whose Alexa rank is greater than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks). 
        :param int source_rankings_alexa_rank_max: This parameter is used for finding stories from sources whose Alexa rank is less than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks). 
        :param list[str] source_rankings_alexa_country: This parameter is used for finding stories from sources whose Alexa rank is in the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks). 
        :param int social_shares_count_facebook_min: This parameter is used for finding stories whose Facebook social shares count is greater than or equal to the specified value. 
        :param int social_shares_count_facebook_max: This parameter is used for finding stories whose Facebook social shares count is less than or equal to the specified value. 
        :param int social_shares_count_google_plus_min: This parameter is used for finding stories whose Google+ social shares count is greater than or equal to the specified value. 
        :param int social_shares_count_google_plus_max: This parameter is used for finding stories whose Google+ social shares count is less than or equal to the specified value. 
        :param int social_shares_count_linkedin_min: This parameter is used for finding stories whose LinkedIn social shares count is greater than or equal to the specified value. 
        :param int social_shares_count_linkedin_max: This parameter is used for finding stories whose LinkedIn social shares count is less than or equal to the specified value. 
        :param int social_shares_count_reddit_min: This parameter is used for finding stories whose Reddit social shares count is greater than or equal to the specified value. 
        :param int social_shares_count_reddit_max: This parameter is used for finding stories whose Reddit social shares count is less than or equal to the specified value. 
        :param list[str] clusters: This parameter is used for finding stories with belonging to one of clusters in a specific set of clusters You can read more about working with clustering [here](https://newsapi.aylien.com/docs/working-with-clustering). 
        :param list[str] _return: This parameter is used for specifying return fields.
        :param int story_id: A story id
        :param str story_url: An article or webpage
        :param str story_title: Title of the article
        :param str story_body: Body of the article
        :param str boost_by: This parameter is used for boosting the result by the specified value. 
        :param str story_language: This parameter is used for setting the language of the story. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes. 
        :param int per_page: This parameter is used for specifying number of items in each page. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: RelatedStories
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.list_related_stories_get_with_http_info(**kwargs)  # noqa: E501

    def list_related_stories_get_with_http_info(self, **kwargs):  # noqa: E501
        """list_related_stories_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_related_stories_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[int] id: This parameter is used for finding stories by story id. 
        :param list[int] id2: This parameter is used for excluding stories by story id. 
        :param str title: This parameter is used for finding stories whose title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). 
        :param str body: This parameter is used for finding stories whose body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). 
        :param str text: This parameter is used for finding stories whose title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). 
        :param str translations_en_title: This parameter is used for finding stories whose translation title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). 
        :param str translations_en_body: This parameter is used for finding stories whose translation body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). 
        :param str translations_en_text: This parameter is used for finding stories whose translation title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). 
        :param list[str] links_permalink: This parameter is used to find stories based on their url. 
        :param list[str] links_permalink2: This parameter is used to exclude stories based on their url. 
        :param list[str] language: This parameter is used for finding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes. 
        :param list[str] language2: This parameter is used for excluding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes. 
        :param str published_at_start: This parameter is used for finding stories whose published at time is greater than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). 
        :param str published_at_end: This parameter is used for finding stories whose published at time is less than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). 
        :param str categories_taxonomy: This parameter is used for defining the type of the taxonomy for the rest of the categories queries. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
        :param bool categories_confident: This parameter is used for finding stories whose categories are confident. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
        :param list[str] categories_id: This parameter is used for finding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
        :param list[str] categories_id2: This parameter is used for excluding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
        :param list[str] categories_label: This parameter is used for finding stories by categories label. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
        :param list[str] categories_label2: This parameter is used for excluding stories by categories label. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
        :param list[int] categories_level: This parameter is used for finding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
        :param list[int] categories_level2: This parameter is used for excluding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
        :param list[str] entities_title_text: This parameter is used to find stories based on the specified entities `text` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_title_text2: This parameter is used to exclude stories based on the specified entities `text` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_title_type: This parameter is used to find stories based on the specified entities `type` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_title_type2: This parameter is used to exclude stories based on the specified entities `type` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_title_links_dbpedia: This parameter is used to find stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_title_links_dbpedia2: This parameter is used to exclude stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_body_text: This parameter is used to find stories based on the specified entities `text` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_body_text2: This parameter is used to exclude stories based on the specified entities `text` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_body_type: This parameter is used to find stories based on the specified entities `type` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_body_type2: This parameter is used to exclude stories based on the specified entities `type` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_body_links_dbpedia: This parameter is used to find stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_body_links_dbpedia2: This parameter is used to exclude stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param str sentiment_title_polarity: This parameter is used for finding stories whose title sentiment is the specified value. 
        :param str sentiment_title_polarity2: This parameter is used for excluding stories whose title sentiment is the specified value. 
        :param str sentiment_body_polarity: This parameter is used for finding stories whose body sentiment is the specified value. 
        :param str sentiment_body_polarity2: This parameter is used for excluding stories whose body sentiment is the specified value. 
        :param int media_images_count_min: This parameter is used for finding stories whose number of images is greater than or equal to the specified value. 
        :param int media_images_count_max: This parameter is used for finding stories whose number of images is less than or equal to the specified value. 
        :param int media_images_width_min: This parameter is used for finding stories whose width of images are greater than or equal to the specified value. 
        :param int media_images_width_max: This parameter is used for finding stories whose width of images are less than or equal to the specified value. 
        :param int media_images_height_min: This parameter is used for finding stories whose height of images are greater than or equal to the specified value. 
        :param int media_images_height_max: This parameter is used for finding stories whose height of images are less than or equal to the specified value. 
        :param int media_images_content_length_min: This parameter is used for finding stories whose images content length are greater than or equal to the specified value. 
        :param int media_images_content_length_max: This parameter is used for finding stories whose images content length are less than or equal to the specified value. 
        :param list[str] media_images_format: This parameter is used for finding stories whose images format are the specified value. 
        :param list[str] media_images_format2: This parameter is used for excluding stories whose images format are the specified value. 
        :param int media_videos_count_min: This parameter is used for finding stories whose number of videos is greater than or equal to the specified value. 
        :param int media_videos_count_max: This parameter is used for finding stories whose number of videos is less than or equal to the specified value. 
        :param list[int] author_id: This parameter is used for finding stories whose author id is the specified value. 
        :param list[int] author_id2: This parameter is used for excluding stories whose author id is the specified value. 
        :param str author_name: This parameter is used for finding stories whose author full name contains the specified value. 
        :param str author_name2: This parameter is used for excluding stories whose author full name contains the specified value. 
        :param list[int] source_id: This parameter is used for finding stories whose source id is the specified value. 
        :param list[int] source_id2: This parameter is used for excluding stories whose source id is the specified value. 
        :param list[str] source_name: This parameter is used for finding stories whose source name contains the specified value. 
        :param list[str] source_name2: This parameter is used for excluding stories whose source name contains the specified value. 
        :param list[str] source_domain: This parameter is used for finding stories whose source domain is the specified value. 
        :param list[str] source_domain2: This parameter is used for excluding stories whose source domain is the specified value. 
        :param list[str] source_locations_country: This parameter is used for finding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_locations_country2: This parameter is used for excluding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_locations_state: This parameter is used for finding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_locations_state2: This parameter is used for excluding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_locations_city: This parameter is used for finding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_locations_city2: This parameter is used for excluding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_scopes_country: This parameter is used for finding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_scopes_country2: This parameter is used for excluding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_scopes_state: This parameter is used for finding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_scopes_state2: This parameter is used for excluding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_scopes_city: This parameter is used for finding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_scopes_city2: This parameter is used for excluding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_scopes_level: This parameter is used for finding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_scopes_level2: This parameter is used for excluding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param int source_links_in_count_min: This parameter is used for finding stories from sources whose Links in count is greater than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count). 
        :param int source_links_in_count_max: This parameter is used for finding stories from sources whose Links in count is less than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count). 
        :param int source_rankings_alexa_rank_min: This parameter is used for finding stories from sources whose Alexa rank is greater than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks). 
        :param int source_rankings_alexa_rank_max: This parameter is used for finding stories from sources whose Alexa rank is less than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks). 
        :param list[str] source_rankings_alexa_country: This parameter is used for finding stories from sources whose Alexa rank is in the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks). 
        :param int social_shares_count_facebook_min: This parameter is used for finding stories whose Facebook social shares count is greater than or equal to the specified value. 
        :param int social_shares_count_facebook_max: This parameter is used for finding stories whose Facebook social shares count is less than or equal to the specified value. 
        :param int social_shares_count_google_plus_min: This parameter is used for finding stories whose Google+ social shares count is greater than or equal to the specified value. 
        :param int social_shares_count_google_plus_max: This parameter is used for finding stories whose Google+ social shares count is less than or equal to the specified value. 
        :param int social_shares_count_linkedin_min: This parameter is used for finding stories whose LinkedIn social shares count is greater than or equal to the specified value. 
        :param int social_shares_count_linkedin_max: This parameter is used for finding stories whose LinkedIn social shares count is less than or equal to the specified value. 
        :param int social_shares_count_reddit_min: This parameter is used for finding stories whose Reddit social shares count is greater than or equal to the specified value. 
        :param int social_shares_count_reddit_max: This parameter is used for finding stories whose Reddit social shares count is less than or equal to the specified value. 
        :param list[str] clusters: This parameter is used for finding stories with belonging to one of clusters in a specific set of clusters You can read more about working with clustering [here](https://newsapi.aylien.com/docs/working-with-clustering). 
        :param list[str] _return: This parameter is used for specifying return fields.
        :param int story_id: A story id
        :param str story_url: An article or webpage
        :param str story_title: Title of the article
        :param str story_body: Body of the article
        :param str boost_by: This parameter is used for boosting the result by the specified value. 
        :param str story_language: This parameter is used for setting the language of the story. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes. 
        :param int per_page: This parameter is used for specifying number of items in each page. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(RelatedStories, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'id2', 'title', 'body', 'text', 'translations_en_title', 'translations_en_body', 'translations_en_text', 'links_permalink', 'links_permalink2', 'language', 'language2', 'published_at_start', 'published_at_end', 'categories_taxonomy', 'categories_confident', 'categories_id', 'categories_id2', 'categories_label', 'categories_label2', 'categories_level', 'categories_level2', 'entities_title_text', 'entities_title_text2', 'entities_title_type', 'entities_title_type2', 'entities_title_links_dbpedia', 'entities_title_links_dbpedia2', 'entities_body_text', 'entities_body_text2', 'entities_body_type', 'entities_body_type2', 'entities_body_links_dbpedia', 'entities_body_links_dbpedia2', 'sentiment_title_polarity', 'sentiment_title_polarity2', 'sentiment_body_polarity', 'sentiment_body_polarity2', 'media_images_count_min', 'media_images_count_max', 'media_images_width_min', 'media_images_width_max', 'media_images_height_min', 'media_images_height_max', 'media_images_content_length_min', 'media_images_content_length_max', 'media_images_format', 'media_images_format2', 'media_videos_count_min', 'media_videos_count_max', 'author_id', 'author_id2', 'author_name', 'author_name2', 'source_id', 'source_id2', 'source_name', 'source_name2', 'source_domain', 'source_domain2', 'source_locations_country', 'source_locations_country2', 'source_locations_state', 'source_locations_state2', 'source_locations_city', 'source_locations_city2', 'source_scopes_country', 'source_scopes_country2', 'source_scopes_state', 'source_scopes_state2', 'source_scopes_city', 'source_scopes_city2', 'source_scopes_level', 'source_scopes_level2', 'source_links_in_count_min', 'source_links_in_count_max', 'source_rankings_alexa_rank_min', 'source_rankings_alexa_rank_max', 'source_rankings_alexa_country', 'social_shares_count_facebook_min', 'social_shares_count_facebook_max', 'social_shares_count_google_plus_min', 'social_shares_count_google_plus_max', 'social_shares_count_linkedin_min', 'social_shares_count_linkedin_max', 'social_shares_count_reddit_min', 'social_shares_count_reddit_max', 'clusters', '_return', 'story_id', 'story_url', 'story_title', 'story_body', 'boost_by', 'story_language', 'per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_related_stories_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if 'media_images_count_min' in local_var_params and local_var_params['media_images_count_min'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `media_images_count_min` when calling `list_related_stories_get`, must be a value greater than `0`")  # noqa: E501
        if 'media_images_count_max' in local_var_params and local_var_params['media_images_count_max'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `media_images_count_max` when calling `list_related_stories_get`, must be a value greater than `0`")  # noqa: E501
        if 'media_images_width_min' in local_var_params and local_var_params['media_images_width_min'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `media_images_width_min` when calling `list_related_stories_get`, must be a value greater than `0`")  # noqa: E501
        if 'media_images_width_max' in local_var_params and local_var_params['media_images_width_max'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `media_images_width_max` when calling `list_related_stories_get`, must be a value greater than `0`")  # noqa: E501
        if 'media_images_height_min' in local_var_params and local_var_params['media_images_height_min'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `media_images_height_min` when calling `list_related_stories_get`, must be a value greater than `0`")  # noqa: E501
        if 'media_images_height_max' in local_var_params and local_var_params['media_images_height_max'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `media_images_height_max` when calling `list_related_stories_get`, must be a value greater than `0`")  # noqa: E501
        if 'media_images_content_length_min' in local_var_params and local_var_params['media_images_content_length_min'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `media_images_content_length_min` when calling `list_related_stories_get`, must be a value greater than `0`")  # noqa: E501
        if 'media_images_content_length_max' in local_var_params and local_var_params['media_images_content_length_max'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `media_images_content_length_max` when calling `list_related_stories_get`, must be a value greater than `0`")  # noqa: E501
        if 'media_videos_count_min' in local_var_params and local_var_params['media_videos_count_min'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `media_videos_count_min` when calling `list_related_stories_get`, must be a value greater than `0`")  # noqa: E501
        if 'media_videos_count_max' in local_var_params and local_var_params['media_videos_count_max'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `media_videos_count_max` when calling `list_related_stories_get`, must be a value greater than `0`")  # noqa: E501
        if 'source_links_in_count_min' in local_var_params and local_var_params['source_links_in_count_min'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `source_links_in_count_min` when calling `list_related_stories_get`, must be a value greater than `0`")  # noqa: E501
        if 'source_links_in_count_max' in local_var_params and local_var_params['source_links_in_count_max'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `source_links_in_count_max` when calling `list_related_stories_get`, must be a value greater than `0`")  # noqa: E501
        if 'source_rankings_alexa_rank_min' in local_var_params and local_var_params['source_rankings_alexa_rank_min'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `source_rankings_alexa_rank_min` when calling `list_related_stories_get`, must be a value greater than `0`")  # noqa: E501
        if 'source_rankings_alexa_rank_max' in local_var_params and local_var_params['source_rankings_alexa_rank_max'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `source_rankings_alexa_rank_max` when calling `list_related_stories_get`, must be a value greater than `0`")  # noqa: E501
        if 'social_shares_count_facebook_min' in local_var_params and local_var_params['social_shares_count_facebook_min'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `social_shares_count_facebook_min` when calling `list_related_stories_get`, must be a value greater than `0`")  # noqa: E501
        if 'social_shares_count_facebook_max' in local_var_params and local_var_params['social_shares_count_facebook_max'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `social_shares_count_facebook_max` when calling `list_related_stories_get`, must be a value greater than `0`")  # noqa: E501
        if 'social_shares_count_google_plus_min' in local_var_params and local_var_params['social_shares_count_google_plus_min'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `social_shares_count_google_plus_min` when calling `list_related_stories_get`, must be a value greater than `0`")  # noqa: E501
        if 'social_shares_count_google_plus_max' in local_var_params and local_var_params['social_shares_count_google_plus_max'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `social_shares_count_google_plus_max` when calling `list_related_stories_get`, must be a value greater than `0`")  # noqa: E501
        if 'social_shares_count_linkedin_min' in local_var_params and local_var_params['social_shares_count_linkedin_min'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `social_shares_count_linkedin_min` when calling `list_related_stories_get`, must be a value greater than `0`")  # noqa: E501
        if 'social_shares_count_linkedin_max' in local_var_params and local_var_params['social_shares_count_linkedin_max'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `social_shares_count_linkedin_max` when calling `list_related_stories_get`, must be a value greater than `0`")  # noqa: E501
        if 'social_shares_count_reddit_min' in local_var_params and local_var_params['social_shares_count_reddit_min'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `social_shares_count_reddit_min` when calling `list_related_stories_get`, must be a value greater than `0`")  # noqa: E501
        if 'social_shares_count_reddit_max' in local_var_params and local_var_params['social_shares_count_reddit_max'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `social_shares_count_reddit_max` when calling `list_related_stories_get`, must be a value greater than `0`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] > 100:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `per_page` when calling `list_related_stories_get`, must be a value less than or equal to `100`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `per_page` when calling `list_related_stories_get`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in local_var_params:
            query_params.append(('id[]', local_var_params['id']))  # noqa: E501
            collection_formats['id[]'] = 'multi'  # noqa: E501
        if 'id2' in local_var_params:
            query_params.append(('!id[]', local_var_params['id2']))  # noqa: E501
            collection_formats['!id[]'] = 'multi'  # noqa: E501
        if 'title' in local_var_params:
            query_params.append(('title', local_var_params['title']))  # noqa: E501
        if 'body' in local_var_params:
            query_params.append(('body', local_var_params['body']))  # noqa: E501
        if 'text' in local_var_params:
            query_params.append(('text', local_var_params['text']))  # noqa: E501
        if 'translations_en_title' in local_var_params:
            query_params.append(('translations.en.title', local_var_params['translations_en_title']))  # noqa: E501
        if 'translations_en_body' in local_var_params:
            query_params.append(('translations.en.body', local_var_params['translations_en_body']))  # noqa: E501
        if 'translations_en_text' in local_var_params:
            query_params.append(('translations.en.text', local_var_params['translations_en_text']))  # noqa: E501
        if 'links_permalink' in local_var_params:
            query_params.append(('links.permalink[]', local_var_params['links_permalink']))  # noqa: E501
            collection_formats['links.permalink[]'] = 'multi'  # noqa: E501
        if 'links_permalink2' in local_var_params:
            query_params.append(('!links.permalink[]', local_var_params['links_permalink2']))  # noqa: E501
            collection_formats['!links.permalink[]'] = 'multi'  # noqa: E501
        if 'language' in local_var_params:
            query_params.append(('language[]', local_var_params['language']))  # noqa: E501
            collection_formats['language[]'] = 'multi'  # noqa: E501
        if 'language2' in local_var_params:
            query_params.append(('!language[]', local_var_params['language2']))  # noqa: E501
            collection_formats['!language[]'] = 'multi'  # noqa: E501
        if 'published_at_start' in local_var_params:
            query_params.append(('published_at.start', local_var_params['published_at_start']))  # noqa: E501
        if 'published_at_end' in local_var_params:
            query_params.append(('published_at.end', local_var_params['published_at_end']))  # noqa: E501
        if 'categories_taxonomy' in local_var_params:
            query_params.append(('categories.taxonomy', local_var_params['categories_taxonomy']))  # noqa: E501
        if 'categories_confident' in local_var_params:
            query_params.append(('categories.confident', local_var_params['categories_confident']))  # noqa: E501
        if 'categories_id' in local_var_params:
            query_params.append(('categories.id[]', local_var_params['categories_id']))  # noqa: E501
            collection_formats['categories.id[]'] = 'multi'  # noqa: E501
        if 'categories_id2' in local_var_params:
            query_params.append(('!categories.id[]', local_var_params['categories_id2']))  # noqa: E501
            collection_formats['!categories.id[]'] = 'multi'  # noqa: E501
        if 'categories_label' in local_var_params:
            query_params.append(('categories.label[]', local_var_params['categories_label']))  # noqa: E501
            collection_formats['categories.label[]'] = 'multi'  # noqa: E501
        if 'categories_label2' in local_var_params:
            query_params.append(('!categories.label[]', local_var_params['categories_label2']))  # noqa: E501
            collection_formats['!categories.label[]'] = 'multi'  # noqa: E501
        if 'categories_level' in local_var_params:
            query_params.append(('categories.level[]', local_var_params['categories_level']))  # noqa: E501
            collection_formats['categories.level[]'] = 'multi'  # noqa: E501
        if 'categories_level2' in local_var_params:
            query_params.append(('!categories.level[]', local_var_params['categories_level2']))  # noqa: E501
            collection_formats['!categories.level[]'] = 'multi'  # noqa: E501
        if 'entities_title_text' in local_var_params:
            query_params.append(('entities.title.text[]', local_var_params['entities_title_text']))  # noqa: E501
            collection_formats['entities.title.text[]'] = 'multi'  # noqa: E501
        if 'entities_title_text2' in local_var_params:
            query_params.append(('!entities.title.text[]', local_var_params['entities_title_text2']))  # noqa: E501
            collection_formats['!entities.title.text[]'] = 'multi'  # noqa: E501
        if 'entities_title_type' in local_var_params:
            query_params.append(('entities.title.type[]', local_var_params['entities_title_type']))  # noqa: E501
            collection_formats['entities.title.type[]'] = 'multi'  # noqa: E501
        if 'entities_title_type2' in local_var_params:
            query_params.append(('!entities.title.type[]', local_var_params['entities_title_type2']))  # noqa: E501
            collection_formats['!entities.title.type[]'] = 'multi'  # noqa: E501
        if 'entities_title_links_dbpedia' in local_var_params:
            query_params.append(('entities.title.links.dbpedia[]', local_var_params['entities_title_links_dbpedia']))  # noqa: E501
            collection_formats['entities.title.links.dbpedia[]'] = 'multi'  # noqa: E501
        if 'entities_title_links_dbpedia2' in local_var_params:
            query_params.append(('!entities.title.links.dbpedia[]', local_var_params['entities_title_links_dbpedia2']))  # noqa: E501
            collection_formats['!entities.title.links.dbpedia[]'] = 'multi'  # noqa: E501
        if 'entities_body_text' in local_var_params:
            query_params.append(('entities.body.text[]', local_var_params['entities_body_text']))  # noqa: E501
            collection_formats['entities.body.text[]'] = 'multi'  # noqa: E501
        if 'entities_body_text2' in local_var_params:
            query_params.append(('!entities.body.text[]', local_var_params['entities_body_text2']))  # noqa: E501
            collection_formats['!entities.body.text[]'] = 'multi'  # noqa: E501
        if 'entities_body_type' in local_var_params:
            query_params.append(('entities.body.type[]', local_var_params['entities_body_type']))  # noqa: E501
            collection_formats['entities.body.type[]'] = 'multi'  # noqa: E501
        if 'entities_body_type2' in local_var_params:
            query_params.append(('!entities.body.type[]', local_var_params['entities_body_type2']))  # noqa: E501
            collection_formats['!entities.body.type[]'] = 'multi'  # noqa: E501
        if 'entities_body_links_dbpedia' in local_var_params:
            query_params.append(('entities.body.links.dbpedia[]', local_var_params['entities_body_links_dbpedia']))  # noqa: E501
            collection_formats['entities.body.links.dbpedia[]'] = 'multi'  # noqa: E501
        if 'entities_body_links_dbpedia2' in local_var_params:
            query_params.append(('!entities.body.links.dbpedia[]', local_var_params['entities_body_links_dbpedia2']))  # noqa: E501
            collection_formats['!entities.body.links.dbpedia[]'] = 'multi'  # noqa: E501
        if 'sentiment_title_polarity' in local_var_params:
            query_params.append(('sentiment.title.polarity', local_var_params['sentiment_title_polarity']))  # noqa: E501
        if 'sentiment_title_polarity2' in local_var_params:
            query_params.append(('!sentiment.title.polarity', local_var_params['sentiment_title_polarity2']))  # noqa: E501
        if 'sentiment_body_polarity' in local_var_params:
            query_params.append(('sentiment.body.polarity', local_var_params['sentiment_body_polarity']))  # noqa: E501
        if 'sentiment_body_polarity2' in local_var_params:
            query_params.append(('!sentiment.body.polarity', local_var_params['sentiment_body_polarity2']))  # noqa: E501
        if 'media_images_count_min' in local_var_params:
            query_params.append(('media.images.count.min', local_var_params['media_images_count_min']))  # noqa: E501
        if 'media_images_count_max' in local_var_params:
            query_params.append(('media.images.count.max', local_var_params['media_images_count_max']))  # noqa: E501
        if 'media_images_width_min' in local_var_params:
            query_params.append(('media.images.width.min', local_var_params['media_images_width_min']))  # noqa: E501
        if 'media_images_width_max' in local_var_params:
            query_params.append(('media.images.width.max', local_var_params['media_images_width_max']))  # noqa: E501
        if 'media_images_height_min' in local_var_params:
            query_params.append(('media.images.height.min', local_var_params['media_images_height_min']))  # noqa: E501
        if 'media_images_height_max' in local_var_params:
            query_params.append(('media.images.height.max', local_var_params['media_images_height_max']))  # noqa: E501
        if 'media_images_content_length_min' in local_var_params:
            query_params.append(('media.images.content_length.min', local_var_params['media_images_content_length_min']))  # noqa: E501
        if 'media_images_content_length_max' in local_var_params:
            query_params.append(('media.images.content_length.max', local_var_params['media_images_content_length_max']))  # noqa: E501
        if 'media_images_format' in local_var_params:
            query_params.append(('media.images.format[]', local_var_params['media_images_format']))  # noqa: E501
            collection_formats['media.images.format[]'] = 'multi'  # noqa: E501
        if 'media_images_format2' in local_var_params:
            query_params.append(('!media.images.format[]', local_var_params['media_images_format2']))  # noqa: E501
            collection_formats['!media.images.format[]'] = 'multi'  # noqa: E501
        if 'media_videos_count_min' in local_var_params:
            query_params.append(('media.videos.count.min', local_var_params['media_videos_count_min']))  # noqa: E501
        if 'media_videos_count_max' in local_var_params:
            query_params.append(('media.videos.count.max', local_var_params['media_videos_count_max']))  # noqa: E501
        if 'author_id' in local_var_params:
            query_params.append(('author.id[]', local_var_params['author_id']))  # noqa: E501
            collection_formats['author.id[]'] = 'multi'  # noqa: E501
        if 'author_id2' in local_var_params:
            query_params.append(('!author.id[]', local_var_params['author_id2']))  # noqa: E501
            collection_formats['!author.id[]'] = 'multi'  # noqa: E501
        if 'author_name' in local_var_params:
            query_params.append(('author.name', local_var_params['author_name']))  # noqa: E501
        if 'author_name2' in local_var_params:
            query_params.append(('!author.name', local_var_params['author_name2']))  # noqa: E501
        if 'source_id' in local_var_params:
            query_params.append(('source.id[]', local_var_params['source_id']))  # noqa: E501
            collection_formats['source.id[]'] = 'multi'  # noqa: E501
        if 'source_id2' in local_var_params:
            query_params.append(('!source.id[]', local_var_params['source_id2']))  # noqa: E501
            collection_formats['!source.id[]'] = 'multi'  # noqa: E501
        if 'source_name' in local_var_params:
            query_params.append(('source.name[]', local_var_params['source_name']))  # noqa: E501
            collection_formats['source.name[]'] = 'multi'  # noqa: E501
        if 'source_name2' in local_var_params:
            query_params.append(('!source.name[]', local_var_params['source_name2']))  # noqa: E501
            collection_formats['!source.name[]'] = 'multi'  # noqa: E501
        if 'source_domain' in local_var_params:
            query_params.append(('source.domain[]', local_var_params['source_domain']))  # noqa: E501
            collection_formats['source.domain[]'] = 'multi'  # noqa: E501
        if 'source_domain2' in local_var_params:
            query_params.append(('!source.domain[]', local_var_params['source_domain2']))  # noqa: E501
            collection_formats['!source.domain[]'] = 'multi'  # noqa: E501
        if 'source_locations_country' in local_var_params:
            query_params.append(('source.locations.country[]', local_var_params['source_locations_country']))  # noqa: E501
            collection_formats['source.locations.country[]'] = 'multi'  # noqa: E501
        if 'source_locations_country2' in local_var_params:
            query_params.append(('!source.locations.country[]', local_var_params['source_locations_country2']))  # noqa: E501
            collection_formats['!source.locations.country[]'] = 'multi'  # noqa: E501
        if 'source_locations_state' in local_var_params:
            query_params.append(('source.locations.state[]', local_var_params['source_locations_state']))  # noqa: E501
            collection_formats['source.locations.state[]'] = 'multi'  # noqa: E501
        if 'source_locations_state2' in local_var_params:
            query_params.append(('!source.locations.state[]', local_var_params['source_locations_state2']))  # noqa: E501
            collection_formats['!source.locations.state[]'] = 'multi'  # noqa: E501
        if 'source_locations_city' in local_var_params:
            query_params.append(('source.locations.city[]', local_var_params['source_locations_city']))  # noqa: E501
            collection_formats['source.locations.city[]'] = 'multi'  # noqa: E501
        if 'source_locations_city2' in local_var_params:
            query_params.append(('!source.locations.city[]', local_var_params['source_locations_city2']))  # noqa: E501
            collection_formats['!source.locations.city[]'] = 'multi'  # noqa: E501
        if 'source_scopes_country' in local_var_params:
            query_params.append(('source.scopes.country[]', local_var_params['source_scopes_country']))  # noqa: E501
            collection_formats['source.scopes.country[]'] = 'multi'  # noqa: E501
        if 'source_scopes_country2' in local_var_params:
            query_params.append(('!source.scopes.country[]', local_var_params['source_scopes_country2']))  # noqa: E501
            collection_formats['!source.scopes.country[]'] = 'multi'  # noqa: E501
        if 'source_scopes_state' in local_var_params:
            query_params.append(('source.scopes.state[]', local_var_params['source_scopes_state']))  # noqa: E501
            collection_formats['source.scopes.state[]'] = 'multi'  # noqa: E501
        if 'source_scopes_state2' in local_var_params:
            query_params.append(('!source.scopes.state[]', local_var_params['source_scopes_state2']))  # noqa: E501
            collection_formats['!source.scopes.state[]'] = 'multi'  # noqa: E501
        if 'source_scopes_city' in local_var_params:
            query_params.append(('source.scopes.city[]', local_var_params['source_scopes_city']))  # noqa: E501
            collection_formats['source.scopes.city[]'] = 'multi'  # noqa: E501
        if 'source_scopes_city2' in local_var_params:
            query_params.append(('!source.scopes.city[]', local_var_params['source_scopes_city2']))  # noqa: E501
            collection_formats['!source.scopes.city[]'] = 'multi'  # noqa: E501
        if 'source_scopes_level' in local_var_params:
            query_params.append(('source.scopes.level[]', local_var_params['source_scopes_level']))  # noqa: E501
            collection_formats['source.scopes.level[]'] = 'multi'  # noqa: E501
        if 'source_scopes_level2' in local_var_params:
            query_params.append(('!source.scopes.level[]', local_var_params['source_scopes_level2']))  # noqa: E501
            collection_formats['!source.scopes.level[]'] = 'multi'  # noqa: E501
        if 'source_links_in_count_min' in local_var_params:
            query_params.append(('source.links_in_count.min', local_var_params['source_links_in_count_min']))  # noqa: E501
        if 'source_links_in_count_max' in local_var_params:
            query_params.append(('source.links_in_count.max', local_var_params['source_links_in_count_max']))  # noqa: E501
        if 'source_rankings_alexa_rank_min' in local_var_params:
            query_params.append(('source.rankings.alexa.rank.min', local_var_params['source_rankings_alexa_rank_min']))  # noqa: E501
        if 'source_rankings_alexa_rank_max' in local_var_params:
            query_params.append(('source.rankings.alexa.rank.max', local_var_params['source_rankings_alexa_rank_max']))  # noqa: E501
        if 'source_rankings_alexa_country' in local_var_params:
            query_params.append(('source.rankings.alexa.country[]', local_var_params['source_rankings_alexa_country']))  # noqa: E501
            collection_formats['source.rankings.alexa.country[]'] = 'multi'  # noqa: E501
        if 'social_shares_count_facebook_min' in local_var_params:
            query_params.append(('social_shares_count.facebook.min', local_var_params['social_shares_count_facebook_min']))  # noqa: E501
        if 'social_shares_count_facebook_max' in local_var_params:
            query_params.append(('social_shares_count.facebook.max', local_var_params['social_shares_count_facebook_max']))  # noqa: E501
        if 'social_shares_count_google_plus_min' in local_var_params:
            query_params.append(('social_shares_count.google_plus.min', local_var_params['social_shares_count_google_plus_min']))  # noqa: E501
        if 'social_shares_count_google_plus_max' in local_var_params:
            query_params.append(('social_shares_count.google_plus.max', local_var_params['social_shares_count_google_plus_max']))  # noqa: E501
        if 'social_shares_count_linkedin_min' in local_var_params:
            query_params.append(('social_shares_count.linkedin.min', local_var_params['social_shares_count_linkedin_min']))  # noqa: E501
        if 'social_shares_count_linkedin_max' in local_var_params:
            query_params.append(('social_shares_count.linkedin.max', local_var_params['social_shares_count_linkedin_max']))  # noqa: E501
        if 'social_shares_count_reddit_min' in local_var_params:
            query_params.append(('social_shares_count.reddit.min', local_var_params['social_shares_count_reddit_min']))  # noqa: E501
        if 'social_shares_count_reddit_max' in local_var_params:
            query_params.append(('social_shares_count.reddit.max', local_var_params['social_shares_count_reddit_max']))  # noqa: E501
        if 'clusters' in local_var_params:
            query_params.append(('clusters[]', local_var_params['clusters']))  # noqa: E501
            collection_formats['clusters[]'] = 'multi'  # noqa: E501
        if '_return' in local_var_params:
            query_params.append(('return[]', local_var_params['_return']))  # noqa: E501
            collection_formats['return[]'] = 'multi'  # noqa: E501
        if 'story_id' in local_var_params:
            query_params.append(('story_id', local_var_params['story_id']))  # noqa: E501
        if 'story_url' in local_var_params:
            query_params.append(('story_url', local_var_params['story_url']))  # noqa: E501
        if 'story_title' in local_var_params:
            query_params.append(('story_title', local_var_params['story_title']))  # noqa: E501
        if 'story_body' in local_var_params:
            query_params.append(('story_body', local_var_params['story_body']))  # noqa: E501
        if 'boost_by' in local_var_params:
            query_params.append(('boost_by', local_var_params['boost_by']))  # noqa: E501
        if 'story_language' in local_var_params:
            query_params.append(('story_language', local_var_params['story_language']))  # noqa: E501
        if 'per_page' in local_var_params:
            query_params.append(('per_page', local_var_params['per_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['app_id', 'app_key']  # noqa: E501

        return self.api_client.call_api(
            '/related_stories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RelatedStories',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_related_stories_post(self, **kwargs):  # noqa: E501
        """list_related_stories_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_related_stories_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[int] id: This parameter is used for finding stories by story id. 
        :param list[int] id2: This parameter is used for excluding stories by story id. 
        :param str title: This parameter is used for finding stories whose title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). 
        :param str body: This parameter is used for finding stories whose body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). 
        :param str text: This parameter is used for finding stories whose title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). 
        :param str translations_en_title: This parameter is used for finding stories whose translation title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). 
        :param str translations_en_body: This parameter is used for finding stories whose translation body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). 
        :param str translations_en_text: This parameter is used for finding stories whose translation title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). 
        :param list[str] links_permalink: This parameter is used to find stories based on their url. 
        :param list[str] links_permalink2: This parameter is used to exclude stories based on their url. 
        :param list[str] language: This parameter is used for finding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes. 
        :param list[str] language2: This parameter is used for excluding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes. 
        :param str published_at_start: This parameter is used for finding stories whose published at time is greater than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). 
        :param str published_at_end: This parameter is used for finding stories whose published at time is less than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). 
        :param str categories_taxonomy: This parameter is used for defining the type of the taxonomy for the rest of the categories queries. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
        :param bool categories_confident: This parameter is used for finding stories whose categories are confident. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
        :param list[str] categories_id: This parameter is used for finding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
        :param list[str] categories_id2: This parameter is used for excluding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
        :param list[str] categories_label: This parameter is used for finding stories by categories label. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
        :param list[str] categories_label2: This parameter is used for excluding stories by categories label. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
        :param list[int] categories_level: This parameter is used for finding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
        :param list[int] categories_level2: This parameter is used for excluding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
        :param list[str] entities_title_text: This parameter is used to find stories based on the specified entities `text` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_title_text2: This parameter is used to exclude stories based on the specified entities `text` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_title_type: This parameter is used to find stories based on the specified entities `type` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_title_type2: This parameter is used to exclude stories based on the specified entities `type` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_title_links_dbpedia: This parameter is used to find stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_title_links_dbpedia2: This parameter is used to exclude stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_body_text: This parameter is used to find stories based on the specified entities `text` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_body_text2: This parameter is used to exclude stories based on the specified entities `text` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_body_type: This parameter is used to find stories based on the specified entities `type` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_body_type2: This parameter is used to exclude stories based on the specified entities `type` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_body_links_dbpedia: This parameter is used to find stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_body_links_dbpedia2: This parameter is used to exclude stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param str sentiment_title_polarity: This parameter is used for finding stories whose title sentiment is the specified value. 
        :param str sentiment_title_polarity2: This parameter is used for excluding stories whose title sentiment is the specified value. 
        :param str sentiment_body_polarity: This parameter is used for finding stories whose body sentiment is the specified value. 
        :param str sentiment_body_polarity2: This parameter is used for excluding stories whose body sentiment is the specified value. 
        :param int media_images_count_min: This parameter is used for finding stories whose number of images is greater than or equal to the specified value. 
        :param int media_images_count_max: This parameter is used for finding stories whose number of images is less than or equal to the specified value. 
        :param int media_images_width_min: This parameter is used for finding stories whose width of images are greater than or equal to the specified value. 
        :param int media_images_width_max: This parameter is used for finding stories whose width of images are less than or equal to the specified value. 
        :param int media_images_height_min: This parameter is used for finding stories whose height of images are greater than or equal to the specified value. 
        :param int media_images_height_max: This parameter is used for finding stories whose height of images are less than or equal to the specified value. 
        :param int media_images_content_length_min: This parameter is used for finding stories whose images content length are greater than or equal to the specified value. 
        :param int media_images_content_length_max: This parameter is used for finding stories whose images content length are less than or equal to the specified value. 
        :param list[str] media_images_format: This parameter is used for finding stories whose images format are the specified value. 
        :param list[str] media_images_format2: This parameter is used for excluding stories whose images format are the specified value. 
        :param int media_videos_count_min: This parameter is used for finding stories whose number of videos is greater than or equal to the specified value. 
        :param int media_videos_count_max: This parameter is used for finding stories whose number of videos is less than or equal to the specified value. 
        :param list[int] author_id: This parameter is used for finding stories whose author id is the specified value. 
        :param list[int] author_id2: This parameter is used for excluding stories whose author id is the specified value. 
        :param str author_name: This parameter is used for finding stories whose author full name contains the specified value. 
        :param str author_name2: This parameter is used for excluding stories whose author full name contains the specified value. 
        :param list[int] source_id: This parameter is used for finding stories whose source id is the specified value. 
        :param list[int] source_id2: This parameter is used for excluding stories whose source id is the specified value. 
        :param list[str] source_name: This parameter is used for finding stories whose source name contains the specified value. 
        :param list[str] source_name2: This parameter is used for excluding stories whose source name contains the specified value. 
        :param list[str] source_domain: This parameter is used for finding stories whose source domain is the specified value. 
        :param list[str] source_domain2: This parameter is used for excluding stories whose source domain is the specified value. 
        :param list[str] source_locations_country: This parameter is used for finding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_locations_country2: This parameter is used for excluding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_locations_state: This parameter is used for finding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_locations_state2: This parameter is used for excluding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_locations_city: This parameter is used for finding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_locations_city2: This parameter is used for excluding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_scopes_country: This parameter is used for finding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_scopes_country2: This parameter is used for excluding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_scopes_state: This parameter is used for finding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_scopes_state2: This parameter is used for excluding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_scopes_city: This parameter is used for finding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_scopes_city2: This parameter is used for excluding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_scopes_level: This parameter is used for finding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_scopes_level2: This parameter is used for excluding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param int source_links_in_count_min: This parameter is used for finding stories from sources whose Links in count is greater than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count). 
        :param int source_links_in_count_max: This parameter is used for finding stories from sources whose Links in count is less than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count). 
        :param int source_rankings_alexa_rank_min: This parameter is used for finding stories from sources whose Alexa rank is greater than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks). 
        :param int source_rankings_alexa_rank_max: This parameter is used for finding stories from sources whose Alexa rank is less than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks). 
        :param list[str] source_rankings_alexa_country: This parameter is used for finding stories from sources whose Alexa rank is in the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks). 
        :param int social_shares_count_facebook_min: This parameter is used for finding stories whose Facebook social shares count is greater than or equal to the specified value. 
        :param int social_shares_count_facebook_max: This parameter is used for finding stories whose Facebook social shares count is less than or equal to the specified value. 
        :param int social_shares_count_google_plus_min: This parameter is used for finding stories whose Google+ social shares count is greater than or equal to the specified value. 
        :param int social_shares_count_google_plus_max: This parameter is used for finding stories whose Google+ social shares count is less than or equal to the specified value. 
        :param int social_shares_count_linkedin_min: This parameter is used for finding stories whose LinkedIn social shares count is greater than or equal to the specified value. 
        :param int social_shares_count_linkedin_max: This parameter is used for finding stories whose LinkedIn social shares count is less than or equal to the specified value. 
        :param int social_shares_count_reddit_min: This parameter is used for finding stories whose Reddit social shares count is greater than or equal to the specified value. 
        :param int social_shares_count_reddit_max: This parameter is used for finding stories whose Reddit social shares count is less than or equal to the specified value. 
        :param list[str] clusters: This parameter is used for finding stories with belonging to one of clusters in a specific set of clusters You can read more about working with clustering [here](https://newsapi.aylien.com/docs/working-with-clustering). 
        :param list[str] _return: This parameter is used for specifying return fields.
        :param int story_id: A story id
        :param str story_url: An article or webpage
        :param str story_title: Title of the article
        :param str story_body: Body of the article
        :param str boost_by: This parameter is used for boosting the result by the specified value. 
        :param str story_language: This parameter is used for setting the language of the story. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes. 
        :param int per_page: This parameter is used for specifying number of items in each page. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: RelatedStories
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.list_related_stories_post_with_http_info(**kwargs)  # noqa: E501

    def list_related_stories_post_with_http_info(self, **kwargs):  # noqa: E501
        """list_related_stories_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_related_stories_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[int] id: This parameter is used for finding stories by story id. 
        :param list[int] id2: This parameter is used for excluding stories by story id. 
        :param str title: This parameter is used for finding stories whose title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). 
        :param str body: This parameter is used for finding stories whose body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). 
        :param str text: This parameter is used for finding stories whose title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). 
        :param str translations_en_title: This parameter is used for finding stories whose translation title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). 
        :param str translations_en_body: This parameter is used for finding stories whose translation body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). 
        :param str translations_en_text: This parameter is used for finding stories whose translation title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). 
        :param list[str] links_permalink: This parameter is used to find stories based on their url. 
        :param list[str] links_permalink2: This parameter is used to exclude stories based on their url. 
        :param list[str] language: This parameter is used for finding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes. 
        :param list[str] language2: This parameter is used for excluding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes. 
        :param str published_at_start: This parameter is used for finding stories whose published at time is greater than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). 
        :param str published_at_end: This parameter is used for finding stories whose published at time is less than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). 
        :param str categories_taxonomy: This parameter is used for defining the type of the taxonomy for the rest of the categories queries. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
        :param bool categories_confident: This parameter is used for finding stories whose categories are confident. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
        :param list[str] categories_id: This parameter is used for finding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
        :param list[str] categories_id2: This parameter is used for excluding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
        :param list[str] categories_label: This parameter is used for finding stories by categories label. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
        :param list[str] categories_label2: This parameter is used for excluding stories by categories label. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
        :param list[int] categories_level: This parameter is used for finding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
        :param list[int] categories_level2: This parameter is used for excluding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
        :param list[str] entities_title_text: This parameter is used to find stories based on the specified entities `text` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_title_text2: This parameter is used to exclude stories based on the specified entities `text` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_title_type: This parameter is used to find stories based on the specified entities `type` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_title_type2: This parameter is used to exclude stories based on the specified entities `type` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_title_links_dbpedia: This parameter is used to find stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_title_links_dbpedia2: This parameter is used to exclude stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_body_text: This parameter is used to find stories based on the specified entities `text` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_body_text2: This parameter is used to exclude stories based on the specified entities `text` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_body_type: This parameter is used to find stories based on the specified entities `type` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_body_type2: This parameter is used to exclude stories based on the specified entities `type` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_body_links_dbpedia: This parameter is used to find stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param list[str] entities_body_links_dbpedia2: This parameter is used to exclude stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
        :param str sentiment_title_polarity: This parameter is used for finding stories whose title sentiment is the specified value. 
        :param str sentiment_title_polarity2: This parameter is used for excluding stories whose title sentiment is the specified value. 
        :param str sentiment_body_polarity: This parameter is used for finding stories whose body sentiment is the specified value. 
        :param str sentiment_body_polarity2: This parameter is used for excluding stories whose body sentiment is the specified value. 
        :param int media_images_count_min: This parameter is used for finding stories whose number of images is greater than or equal to the specified value. 
        :param int media_images_count_max: This parameter is used for finding stories whose number of images is less than or equal to the specified value. 
        :param int media_images_width_min: This parameter is used for finding stories whose width of images are greater than or equal to the specified value. 
        :param int media_images_width_max: This parameter is used for finding stories whose width of images are less than or equal to the specified value. 
        :param int media_images_height_min: This parameter is used for finding stories whose height of images are greater than or equal to the specified value. 
        :param int media_images_height_max: This parameter is used for finding stories whose height of images are less than or equal to the specified value. 
        :param int media_images_content_length_min: This parameter is used for finding stories whose images content length are greater than or equal to the specified value. 
        :param int media_images_content_length_max: This parameter is used for finding stories whose images content length are less than or equal to the specified value. 
        :param list[str] media_images_format: This parameter is used for finding stories whose images format are the specified value. 
        :param list[str] media_images_format2: This parameter is used for excluding stories whose images format are the specified value. 
        :param int media_videos_count_min: This parameter is used for finding stories whose number of videos is greater than or equal to the specified value. 
        :param int media_videos_count_max: This parameter is used for finding stories whose number of videos is less than or equal to the specified value. 
        :param list[int] author_id: This parameter is used for finding stories whose author id is the specified value. 
        :param list[int] author_id2: This parameter is used for excluding stories whose author id is the specified value. 
        :param str author_name: This parameter is used for finding stories whose author full name contains the specified value. 
        :param str author_name2: This parameter is used for excluding stories whose author full name contains the specified value. 
        :param list[int] source_id: This parameter is used for finding stories whose source id is the specified value. 
        :param list[int] source_id2: This parameter is used for excluding stories whose source id is the specified value. 
        :param list[str] source_name: This parameter is used for finding stories whose source name contains the specified value. 
        :param list[str] source_name2: This parameter is used for excluding stories whose source name contains the specified value. 
        :param list[str] source_domain: This parameter is used for finding stories whose source domain is the specified value. 
        :param list[str] source_domain2: This parameter is used for excluding stories whose source domain is the specified value. 
        :param list[str] source_locations_country: This parameter is used for finding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_locations_country2: This parameter is used for excluding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_locations_state: This parameter is used for finding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_locations_state2: This parameter is used for excluding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_locations_city: This parameter is used for finding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_locations_city2: This parameter is used for excluding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_scopes_country: This parameter is used for finding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_scopes_country2: This parameter is used for excluding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_scopes_state: This parameter is used for finding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_scopes_state2: This parameter is used for excluding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_scopes_city: This parameter is used for finding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_scopes_city2: This parameter is used for excluding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_scopes_level: This parameter is used for finding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] source_scopes_level2: This parameter is used for excluding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param int source_links_in_count_min: This parameter is used for finding stories from sources whose Links in count is greater than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count). 
        :param int source_links_in_count_max: This parameter is used for finding stories from sources whose Links in count is less than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count). 
        :param int source_rankings_alexa_rank_min: This parameter is used for finding stories from sources whose Alexa rank is greater than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks). 
        :param int source_rankings_alexa_rank_max: This parameter is used for finding stories from sources whose Alexa rank is less than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks). 
        :param list[str] source_rankings_alexa_country: This parameter is used for finding stories from sources whose Alexa rank is in the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks). 
        :param int social_shares_count_facebook_min: This parameter is used for finding stories whose Facebook social shares count is greater than or equal to the specified value. 
        :param int social_shares_count_facebook_max: This parameter is used for finding stories whose Facebook social shares count is less than or equal to the specified value. 
        :param int social_shares_count_google_plus_min: This parameter is used for finding stories whose Google+ social shares count is greater than or equal to the specified value. 
        :param int social_shares_count_google_plus_max: This parameter is used for finding stories whose Google+ social shares count is less than or equal to the specified value. 
        :param int social_shares_count_linkedin_min: This parameter is used for finding stories whose LinkedIn social shares count is greater than or equal to the specified value. 
        :param int social_shares_count_linkedin_max: This parameter is used for finding stories whose LinkedIn social shares count is less than or equal to the specified value. 
        :param int social_shares_count_reddit_min: This parameter is used for finding stories whose Reddit social shares count is greater than or equal to the specified value. 
        :param int social_shares_count_reddit_max: This parameter is used for finding stories whose Reddit social shares count is less than or equal to the specified value. 
        :param list[str] clusters: This parameter is used for finding stories with belonging to one of clusters in a specific set of clusters You can read more about working with clustering [here](https://newsapi.aylien.com/docs/working-with-clustering). 
        :param list[str] _return: This parameter is used for specifying return fields.
        :param int story_id: A story id
        :param str story_url: An article or webpage
        :param str story_title: Title of the article
        :param str story_body: Body of the article
        :param str boost_by: This parameter is used for boosting the result by the specified value. 
        :param str story_language: This parameter is used for setting the language of the story. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes. 
        :param int per_page: This parameter is used for specifying number of items in each page. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(RelatedStories, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'id2', 'title', 'body', 'text', 'translations_en_title', 'translations_en_body', 'translations_en_text', 'links_permalink', 'links_permalink2', 'language', 'language2', 'published_at_start', 'published_at_end', 'categories_taxonomy', 'categories_confident', 'categories_id', 'categories_id2', 'categories_label', 'categories_label2', 'categories_level', 'categories_level2', 'entities_title_text', 'entities_title_text2', 'entities_title_type', 'entities_title_type2', 'entities_title_links_dbpedia', 'entities_title_links_dbpedia2', 'entities_body_text', 'entities_body_text2', 'entities_body_type', 'entities_body_type2', 'entities_body_links_dbpedia', 'entities_body_links_dbpedia2', 'sentiment_title_polarity', 'sentiment_title_polarity2', 'sentiment_body_polarity', 'sentiment_body_polarity2', 'media_images_count_min', 'media_images_count_max', 'media_images_width_min', 'media_images_width_max', 'media_images_height_min', 'media_images_height_max', 'media_images_content_length_min', 'media_images_content_length_max', 'media_images_format', 'media_images_format2', 'media_videos_count_min', 'media_videos_count_max', 'author_id', 'author_id2', 'author_name', 'author_name2', 'source_id', 'source_id2', 'source_name', 'source_name2', 'source_domain', 'source_domain2', 'source_locations_country', 'source_locations_country2', 'source_locations_state', 'source_locations_state2', 'source_locations_city', 'source_locations_city2', 'source_scopes_country', 'source_scopes_country2', 'source_scopes_state', 'source_scopes_state2', 'source_scopes_city', 'source_scopes_city2', 'source_scopes_level', 'source_scopes_level2', 'source_links_in_count_min', 'source_links_in_count_max', 'source_rankings_alexa_rank_min', 'source_rankings_alexa_rank_max', 'source_rankings_alexa_country', 'social_shares_count_facebook_min', 'social_shares_count_facebook_max', 'social_shares_count_google_plus_min', 'social_shares_count_google_plus_max', 'social_shares_count_linkedin_min', 'social_shares_count_linkedin_max', 'social_shares_count_reddit_min', 'social_shares_count_reddit_max', 'clusters', '_return', 'story_id', 'story_url', 'story_title', 'story_body', 'boost_by', 'story_language', 'per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_related_stories_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if 'media_images_count_min' in local_var_params and local_var_params['media_images_count_min'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `media_images_count_min` when calling `list_related_stories_post`, must be a value greater than `0`")  # noqa: E501
        if 'media_images_count_max' in local_var_params and local_var_params['media_images_count_max'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `media_images_count_max` when calling `list_related_stories_post`, must be a value greater than `0`")  # noqa: E501
        if 'media_images_width_min' in local_var_params and local_var_params['media_images_width_min'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `media_images_width_min` when calling `list_related_stories_post`, must be a value greater than `0`")  # noqa: E501
        if 'media_images_width_max' in local_var_params and local_var_params['media_images_width_max'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `media_images_width_max` when calling `list_related_stories_post`, must be a value greater than `0`")  # noqa: E501
        if 'media_images_height_min' in local_var_params and local_var_params['media_images_height_min'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `media_images_height_min` when calling `list_related_stories_post`, must be a value greater than `0`")  # noqa: E501
        if 'media_images_height_max' in local_var_params and local_var_params['media_images_height_max'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `media_images_height_max` when calling `list_related_stories_post`, must be a value greater than `0`")  # noqa: E501
        if 'media_images_content_length_min' in local_var_params and local_var_params['media_images_content_length_min'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `media_images_content_length_min` when calling `list_related_stories_post`, must be a value greater than `0`")  # noqa: E501
        if 'media_images_content_length_max' in local_var_params and local_var_params['media_images_content_length_max'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `media_images_content_length_max` when calling `list_related_stories_post`, must be a value greater than `0`")  # noqa: E501
        if 'media_videos_count_min' in local_var_params and local_var_params['media_videos_count_min'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `media_videos_count_min` when calling `list_related_stories_post`, must be a value greater than `0`")  # noqa: E501
        if 'media_videos_count_max' in local_var_params and local_var_params['media_videos_count_max'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `media_videos_count_max` when calling `list_related_stories_post`, must be a value greater than `0`")  # noqa: E501
        if 'source_links_in_count_min' in local_var_params and local_var_params['source_links_in_count_min'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `source_links_in_count_min` when calling `list_related_stories_post`, must be a value greater than `0`")  # noqa: E501
        if 'source_links_in_count_max' in local_var_params and local_var_params['source_links_in_count_max'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `source_links_in_count_max` when calling `list_related_stories_post`, must be a value greater than `0`")  # noqa: E501
        if 'source_rankings_alexa_rank_min' in local_var_params and local_var_params['source_rankings_alexa_rank_min'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `source_rankings_alexa_rank_min` when calling `list_related_stories_post`, must be a value greater than `0`")  # noqa: E501
        if 'source_rankings_alexa_rank_max' in local_var_params and local_var_params['source_rankings_alexa_rank_max'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `source_rankings_alexa_rank_max` when calling `list_related_stories_post`, must be a value greater than `0`")  # noqa: E501
        if 'social_shares_count_facebook_min' in local_var_params and local_var_params['social_shares_count_facebook_min'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `social_shares_count_facebook_min` when calling `list_related_stories_post`, must be a value greater than `0`")  # noqa: E501
        if 'social_shares_count_facebook_max' in local_var_params and local_var_params['social_shares_count_facebook_max'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `social_shares_count_facebook_max` when calling `list_related_stories_post`, must be a value greater than `0`")  # noqa: E501
        if 'social_shares_count_google_plus_min' in local_var_params and local_var_params['social_shares_count_google_plus_min'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `social_shares_count_google_plus_min` when calling `list_related_stories_post`, must be a value greater than `0`")  # noqa: E501
        if 'social_shares_count_google_plus_max' in local_var_params and local_var_params['social_shares_count_google_plus_max'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `social_shares_count_google_plus_max` when calling `list_related_stories_post`, must be a value greater than `0`")  # noqa: E501
        if 'social_shares_count_linkedin_min' in local_var_params and local_var_params['social_shares_count_linkedin_min'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `social_shares_count_linkedin_min` when calling `list_related_stories_post`, must be a value greater than `0`")  # noqa: E501
        if 'social_shares_count_linkedin_max' in local_var_params and local_var_params['social_shares_count_linkedin_max'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `social_shares_count_linkedin_max` when calling `list_related_stories_post`, must be a value greater than `0`")  # noqa: E501
        if 'social_shares_count_reddit_min' in local_var_params and local_var_params['social_shares_count_reddit_min'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `social_shares_count_reddit_min` when calling `list_related_stories_post`, must be a value greater than `0`")  # noqa: E501
        if 'social_shares_count_reddit_max' in local_var_params and local_var_params['social_shares_count_reddit_max'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `social_shares_count_reddit_max` when calling `list_related_stories_post`, must be a value greater than `0`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] > 100:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `per_page` when calling `list_related_stories_post`, must be a value less than or equal to `100`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `per_page` when calling `list_related_stories_post`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in local_var_params:
            query_params.append(('id[]', local_var_params['id']))  # noqa: E501
            collection_formats['id[]'] = 'multi'  # noqa: E501
        if 'id2' in local_var_params:
            query_params.append(('!id[]', local_var_params['id2']))  # noqa: E501
            collection_formats['!id[]'] = 'multi'  # noqa: E501
        if 'title' in local_var_params:
            query_params.append(('title', local_var_params['title']))  # noqa: E501
        if 'body' in local_var_params:
            query_params.append(('body', local_var_params['body']))  # noqa: E501
        if 'text' in local_var_params:
            query_params.append(('text', local_var_params['text']))  # noqa: E501
        if 'translations_en_title' in local_var_params:
            query_params.append(('translations.en.title', local_var_params['translations_en_title']))  # noqa: E501
        if 'translations_en_body' in local_var_params:
            query_params.append(('translations.en.body', local_var_params['translations_en_body']))  # noqa: E501
        if 'translations_en_text' in local_var_params:
            query_params.append(('translations.en.text', local_var_params['translations_en_text']))  # noqa: E501
        if 'links_permalink' in local_var_params:
            query_params.append(('links.permalink[]', local_var_params['links_permalink']))  # noqa: E501
            collection_formats['links.permalink[]'] = 'multi'  # noqa: E501
        if 'links_permalink2' in local_var_params:
            query_params.append(('!links.permalink[]', local_var_params['links_permalink2']))  # noqa: E501
            collection_formats['!links.permalink[]'] = 'multi'  # noqa: E501
        if 'language' in local_var_params:
            query_params.append(('language[]', local_var_params['language']))  # noqa: E501
            collection_formats['language[]'] = 'multi'  # noqa: E501
        if 'language2' in local_var_params:
            query_params.append(('!language[]', local_var_params['language2']))  # noqa: E501
            collection_formats['!language[]'] = 'multi'  # noqa: E501
        if 'published_at_start' in local_var_params:
            query_params.append(('published_at.start', local_var_params['published_at_start']))  # noqa: E501
        if 'published_at_end' in local_var_params:
            query_params.append(('published_at.end', local_var_params['published_at_end']))  # noqa: E501
        if 'categories_taxonomy' in local_var_params:
            query_params.append(('categories.taxonomy', local_var_params['categories_taxonomy']))  # noqa: E501
        if 'categories_confident' in local_var_params:
            query_params.append(('categories.confident', local_var_params['categories_confident']))  # noqa: E501
        if 'categories_id' in local_var_params:
            query_params.append(('categories.id[]', local_var_params['categories_id']))  # noqa: E501
            collection_formats['categories.id[]'] = 'multi'  # noqa: E501
        if 'categories_id2' in local_var_params:
            query_params.append(('!categories.id[]', local_var_params['categories_id2']))  # noqa: E501
            collection_formats['!categories.id[]'] = 'multi'  # noqa: E501
        if 'categories_label' in local_var_params:
            query_params.append(('categories.label[]', local_var_params['categories_label']))  # noqa: E501
            collection_formats['categories.label[]'] = 'multi'  # noqa: E501
        if 'categories_label2' in local_var_params:
            query_params.append(('!categories.label[]', local_var_params['categories_label2']))  # noqa: E501
            collection_formats['!categories.label[]'] = 'multi'  # noqa: E501
        if 'categories_level' in local_var_params:
            query_params.append(('categories.level[]', local_var_params['categories_level']))  # noqa: E501
            collection_formats['categories.level[]'] = 'multi'  # noqa: E501
        if 'categories_level2' in local_var_params:
            query_params.append(('!categories.level[]', local_var_params['categories_level2']))  # noqa: E501
            collection_formats['!categories.level[]'] = 'multi'  # noqa: E501
        if 'entities_title_text' in local_var_params:
            query_params.append(('entities.title.text[]', local_var_params['entities_title_text']))  # noqa: E501
            collection_formats['entities.title.text[]'] = 'multi'  # noqa: E501
        if 'entities_title_text2' in local_var_params:
            query_params.append(('!entities.title.text[]', local_var_params['entities_title_text2']))  # noqa: E501
            collection_formats['!entities.title.text[]'] = 'multi'  # noqa: E501
        if 'entities_title_type' in local_var_params:
            query_params.append(('entities.title.type[]', local_var_params['entities_title_type']))  # noqa: E501
            collection_formats['entities.title.type[]'] = 'multi'  # noqa: E501
        if 'entities_title_type2' in local_var_params:
            query_params.append(('!entities.title.type[]', local_var_params['entities_title_type2']))  # noqa: E501
            collection_formats['!entities.title.type[]'] = 'multi'  # noqa: E501
        if 'entities_title_links_dbpedia' in local_var_params:
            query_params.append(('entities.title.links.dbpedia[]', local_var_params['entities_title_links_dbpedia']))  # noqa: E501
            collection_formats['entities.title.links.dbpedia[]'] = 'multi'  # noqa: E501
        if 'entities_title_links_dbpedia2' in local_var_params:
            query_params.append(('!entities.title.links.dbpedia[]', local_var_params['entities_title_links_dbpedia2']))  # noqa: E501
            collection_formats['!entities.title.links.dbpedia[]'] = 'multi'  # noqa: E501
        if 'entities_body_text' in local_var_params:
            query_params.append(('entities.body.text[]', local_var_params['entities_body_text']))  # noqa: E501
            collection_formats['entities.body.text[]'] = 'multi'  # noqa: E501
        if 'entities_body_text2' in local_var_params:
            query_params.append(('!entities.body.text[]', local_var_params['entities_body_text2']))  # noqa: E501
            collection_formats['!entities.body.text[]'] = 'multi'  # noqa: E501
        if 'entities_body_type' in local_var_params:
            query_params.append(('entities.body.type[]', local_var_params['entities_body_type']))  # noqa: E501
            collection_formats['entities.body.type[]'] = 'multi'  # noqa: E501
        if 'entities_body_type2' in local_var_params:
            query_params.append(('!entities.body.type[]', local_var_params['entities_body_type2']))  # noqa: E501
            collection_formats['!entities.body.type[]'] = 'multi'  # noqa: E501
        if 'entities_body_links_dbpedia' in local_var_params:
            query_params.append(('entities.body.links.dbpedia[]', local_var_params['entities_body_links_dbpedia']))  # noqa: E501
            collection_formats['entities.body.links.dbpedia[]'] = 'multi'  # noqa: E501
        if 'entities_body_links_dbpedia2' in local_var_params:
            query_params.append(('!entities.body.links.dbpedia[]', local_var_params['entities_body_links_dbpedia2']))  # noqa: E501
            collection_formats['!entities.body.links.dbpedia[]'] = 'multi'  # noqa: E501
        if 'sentiment_title_polarity' in local_var_params:
            query_params.append(('sentiment.title.polarity', local_var_params['sentiment_title_polarity']))  # noqa: E501
        if 'sentiment_title_polarity2' in local_var_params:
            query_params.append(('!sentiment.title.polarity', local_var_params['sentiment_title_polarity2']))  # noqa: E501
        if 'sentiment_body_polarity' in local_var_params:
            query_params.append(('sentiment.body.polarity', local_var_params['sentiment_body_polarity']))  # noqa: E501
        if 'sentiment_body_polarity2' in local_var_params:
            query_params.append(('!sentiment.body.polarity', local_var_params['sentiment_body_polarity2']))  # noqa: E501
        if 'media_images_count_min' in local_var_params:
            query_params.append(('media.images.count.min', local_var_params['media_images_count_min']))  # noqa: E501
        if 'media_images_count_max' in local_var_params:
            query_params.append(('media.images.count.max', local_var_params['media_images_count_max']))  # noqa: E501
        if 'media_images_width_min' in local_var_params:
            query_params.append(('media.images.width.min', local_var_params['media_images_width_min']))  # noqa: E501
        if 'media_images_width_max' in local_var_params:
            query_params.append(('media.images.width.max', local_var_params['media_images_width_max']))  # noqa: E501
        if 'media_images_height_min' in local_var_params:
            query_params.append(('media.images.height.min', local_var_params['media_images_height_min']))  # noqa: E501
        if 'media_images_height_max' in local_var_params:
            query_params.append(('media.images.height.max', local_var_params['media_images_height_max']))  # noqa: E501
        if 'media_images_content_length_min' in local_var_params:
            query_params.append(('media.images.content_length.min', local_var_params['media_images_content_length_min']))  # noqa: E501
        if 'media_images_content_length_max' in local_var_params:
            query_params.append(('media.images.content_length.max', local_var_params['media_images_content_length_max']))  # noqa: E501
        if 'media_images_format' in local_var_params:
            query_params.append(('media.images.format[]', local_var_params['media_images_format']))  # noqa: E501
            collection_formats['media.images.format[]'] = 'multi'  # noqa: E501
        if 'media_images_format2' in local_var_params:
            query_params.append(('!media.images.format[]', local_var_params['media_images_format2']))  # noqa: E501
            collection_formats['!media.images.format[]'] = 'multi'  # noqa: E501
        if 'media_videos_count_min' in local_var_params:
            query_params.append(('media.videos.count.min', local_var_params['media_videos_count_min']))  # noqa: E501
        if 'media_videos_count_max' in local_var_params:
            query_params.append(('media.videos.count.max', local_var_params['media_videos_count_max']))  # noqa: E501
        if 'author_id' in local_var_params:
            query_params.append(('author.id[]', local_var_params['author_id']))  # noqa: E501
            collection_formats['author.id[]'] = 'multi'  # noqa: E501
        if 'author_id2' in local_var_params:
            query_params.append(('!author.id[]', local_var_params['author_id2']))  # noqa: E501
            collection_formats['!author.id[]'] = 'multi'  # noqa: E501
        if 'author_name' in local_var_params:
            query_params.append(('author.name', local_var_params['author_name']))  # noqa: E501
        if 'author_name2' in local_var_params:
            query_params.append(('!author.name', local_var_params['author_name2']))  # noqa: E501
        if 'source_id' in local_var_params:
            query_params.append(('source.id[]', local_var_params['source_id']))  # noqa: E501
            collection_formats['source.id[]'] = 'multi'  # noqa: E501
        if 'source_id2' in local_var_params:
            query_params.append(('!source.id[]', local_var_params['source_id2']))  # noqa: E501
            collection_formats['!source.id[]'] = 'multi'  # noqa: E501
        if 'source_name' in local_var_params:
            query_params.append(('source.name[]', local_var_params['source_name']))  # noqa: E501
            collection_formats['source.name[]'] = 'multi'  # noqa: E501
        if 'source_name2' in local_var_params:
            query_params.append(('!source.name[]', local_var_params['source_name2']))  # noqa: E501
            collection_formats['!source.name[]'] = 'multi'  # noqa: E501
        if 'source_domain' in local_var_params:
            query_params.append(('source.domain[]', local_var_params['source_domain']))  # noqa: E501
            collection_formats['source.domain[]'] = 'multi'  # noqa: E501
        if 'source_domain2' in local_var_params:
            query_params.append(('!source.domain[]', local_var_params['source_domain2']))  # noqa: E501
            collection_formats['!source.domain[]'] = 'multi'  # noqa: E501
        if 'source_locations_country' in local_var_params:
            query_params.append(('source.locations.country[]', local_var_params['source_locations_country']))  # noqa: E501
            collection_formats['source.locations.country[]'] = 'multi'  # noqa: E501
        if 'source_locations_country2' in local_var_params:
            query_params.append(('!source.locations.country[]', local_var_params['source_locations_country2']))  # noqa: E501
            collection_formats['!source.locations.country[]'] = 'multi'  # noqa: E501
        if 'source_locations_state' in local_var_params:
            query_params.append(('source.locations.state[]', local_var_params['source_locations_state']))  # noqa: E501
            collection_formats['source.locations.state[]'] = 'multi'  # noqa: E501
        if 'source_locations_state2' in local_var_params:
            query_params.append(('!source.locations.state[]', local_var_params['source_locations_state2']))  # noqa: E501
            collection_formats['!source.locations.state[]'] = 'multi'  # noqa: E501
        if 'source_locations_city' in local_var_params:
            query_params.append(('source.locations.city[]', local_var_params['source_locations_city']))  # noqa: E501
            collection_formats['source.locations.city[]'] = 'multi'  # noqa: E501
        if 'source_locations_city2' in local_var_params:
            query_params.append(('!source.locations.city[]', local_var_params['source_locations_city2']))  # noqa: E501
            collection_formats['!source.locations.city[]'] = 'multi'  # noqa: E501
        if 'source_scopes_country' in local_var_params:
            query_params.append(('source.scopes.country[]', local_var_params['source_scopes_country']))  # noqa: E501
            collection_formats['source.scopes.country[]'] = 'multi'  # noqa: E501
        if 'source_scopes_country2' in local_var_params:
            query_params.append(('!source.scopes.country[]', local_var_params['source_scopes_country2']))  # noqa: E501
            collection_formats['!source.scopes.country[]'] = 'multi'  # noqa: E501
        if 'source_scopes_state' in local_var_params:
            query_params.append(('source.scopes.state[]', local_var_params['source_scopes_state']))  # noqa: E501
            collection_formats['source.scopes.state[]'] = 'multi'  # noqa: E501
        if 'source_scopes_state2' in local_var_params:
            query_params.append(('!source.scopes.state[]', local_var_params['source_scopes_state2']))  # noqa: E501
            collection_formats['!source.scopes.state[]'] = 'multi'  # noqa: E501
        if 'source_scopes_city' in local_var_params:
            query_params.append(('source.scopes.city[]', local_var_params['source_scopes_city']))  # noqa: E501
            collection_formats['source.scopes.city[]'] = 'multi'  # noqa: E501
        if 'source_scopes_city2' in local_var_params:
            query_params.append(('!source.scopes.city[]', local_var_params['source_scopes_city2']))  # noqa: E501
            collection_formats['!source.scopes.city[]'] = 'multi'  # noqa: E501
        if 'source_scopes_level' in local_var_params:
            query_params.append(('source.scopes.level[]', local_var_params['source_scopes_level']))  # noqa: E501
            collection_formats['source.scopes.level[]'] = 'multi'  # noqa: E501
        if 'source_scopes_level2' in local_var_params:
            query_params.append(('!source.scopes.level[]', local_var_params['source_scopes_level2']))  # noqa: E501
            collection_formats['!source.scopes.level[]'] = 'multi'  # noqa: E501
        if 'source_links_in_count_min' in local_var_params:
            query_params.append(('source.links_in_count.min', local_var_params['source_links_in_count_min']))  # noqa: E501
        if 'source_links_in_count_max' in local_var_params:
            query_params.append(('source.links_in_count.max', local_var_params['source_links_in_count_max']))  # noqa: E501
        if 'source_rankings_alexa_rank_min' in local_var_params:
            query_params.append(('source.rankings.alexa.rank.min', local_var_params['source_rankings_alexa_rank_min']))  # noqa: E501
        if 'source_rankings_alexa_rank_max' in local_var_params:
            query_params.append(('source.rankings.alexa.rank.max', local_var_params['source_rankings_alexa_rank_max']))  # noqa: E501
        if 'source_rankings_alexa_country' in local_var_params:
            query_params.append(('source.rankings.alexa.country[]', local_var_params['source_rankings_alexa_country']))  # noqa: E501
            collection_formats['source.rankings.alexa.country[]'] = 'multi'  # noqa: E501
        if 'social_shares_count_facebook_min' in local_var_params:
            query_params.append(('social_shares_count.facebook.min', local_var_params['social_shares_count_facebook_min']))  # noqa: E501
        if 'social_shares_count_facebook_max' in local_var_params:
            query_params.append(('social_shares_count.facebook.max', local_var_params['social_shares_count_facebook_max']))  # noqa: E501
        if 'social_shares_count_google_plus_min' in local_var_params:
            query_params.append(('social_shares_count.google_plus.min', local_var_params['social_shares_count_google_plus_min']))  # noqa: E501
        if 'social_shares_count_google_plus_max' in local_var_params:
            query_params.append(('social_shares_count.google_plus.max', local_var_params['social_shares_count_google_plus_max']))  # noqa: E501
        if 'social_shares_count_linkedin_min' in local_var_params:
            query_params.append(('social_shares_count.linkedin.min', local_var_params['social_shares_count_linkedin_min']))  # noqa: E501
        if 'social_shares_count_linkedin_max' in local_var_params:
            query_params.append(('social_shares_count.linkedin.max', local_var_params['social_shares_count_linkedin_max']))  # noqa: E501
        if 'social_shares_count_reddit_min' in local_var_params:
            query_params.append(('social_shares_count.reddit.min', local_var_params['social_shares_count_reddit_min']))  # noqa: E501
        if 'social_shares_count_reddit_max' in local_var_params:
            query_params.append(('social_shares_count.reddit.max', local_var_params['social_shares_count_reddit_max']))  # noqa: E501
        if 'clusters' in local_var_params:
            query_params.append(('clusters[]', local_var_params['clusters']))  # noqa: E501
            collection_formats['clusters[]'] = 'multi'  # noqa: E501
        if '_return' in local_var_params:
            query_params.append(('return[]', local_var_params['_return']))  # noqa: E501
            collection_formats['return[]'] = 'multi'  # noqa: E501
        if 'story_id' in local_var_params:
            query_params.append(('story_id', local_var_params['story_id']))  # noqa: E501
        if 'story_url' in local_var_params:
            query_params.append(('story_url', local_var_params['story_url']))  # noqa: E501
        if 'story_title' in local_var_params:
            query_params.append(('story_title', local_var_params['story_title']))  # noqa: E501
        if 'story_body' in local_var_params:
            query_params.append(('story_body', local_var_params['story_body']))  # noqa: E501
        if 'boost_by' in local_var_params:
            query_params.append(('boost_by', local_var_params['boost_by']))  # noqa: E501
        if 'story_language' in local_var_params:
            query_params.append(('story_language', local_var_params['story_language']))  # noqa: E501
        if 'per_page' in local_var_params:
            query_params.append(('per_page', local_var_params['per_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['app_id', 'app_key']  # noqa: E501

        return self.api_client.call_api(
            '/related_stories', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RelatedStories',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
