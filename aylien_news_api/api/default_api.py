"""
    AYLIEN News API

    The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client.   # noqa: E501

    The version of the OpenAPI document: 3.0
    Contact: support@aylien.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from aylien_news_api.api_client import ApiClient, Endpoint as _Endpoint
from aylien_news_api.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from aylien_news_api.model.autocompletes import Autocompletes
from aylien_news_api.model.clusters import Clusters
from aylien_news_api.model.errors import Errors
from aylien_news_api.model.histograms import Histograms
from aylien_news_api.model.time_series_list import TimeSeriesList
from aylien_news_api.model.trends import Trends
from aylien_news_api.model.unknownbasetype import UNKNOWNBASETYPE


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __advanced_list_stories(
            self,
            unknown_base_type,
            **kwargs
        ):
            """List Stories  # noqa: E501

            The stories endpoint is used to return stories based on the json query you set in your request body. The News API crawler gathers articles in near real-time and stores information about them, or metadata. Below you can see all of the query parameters, and JSON schema for the body, which you can use to narrow down your query.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.advanced_list_stories(unknown_base_type, async_req=True)
            >>> result = thread.get()

            Args:
                unknown_base_type (UNKNOWN_BASE_TYPE): /stories body schema to perform an advanced search with logical operators and nested objects. 

            Keyword Args:
                published_at_start (str, none_type): This parameter is used for finding stories whose published at time is greater than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). . [optional]
                published_at_end (str, none_type): This parameter is used for finding stories whose published at time is less than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). . [optional]
                _return ([str], none_type): This parameter is used for specifying return fields.. [optional]
                sort_by (str, none_type): This parameter is used for changing the order column of the results. You can read about sorting results [here](https://newsapi.aylien.com/docs/sorting-results). . [optional] if omitted the server will use the default value of "published_at"
                sort_direction (str, none_type): This parameter is used for changing the order direction of the result. You can read about sorting results [here](https://newsapi.aylien.com/docs/sorting-results). . [optional] if omitted the server will use the default value of "desc"
                cursor (str, none_type): This parameter is used for finding a specific page. You can read more about pagination of results [here](https://newsapi.aylien.com/docs/pagination-of-results). . [optional] if omitted the server will use the default value of "*"
                per_page (int, none_type): This parameter is used for specifying number of items in each page You can read more about pagination of results [here](https://newsapi.aylien.com/docs/pagination-of-results) . [optional] if omitted the server will use the default value of 10
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                dict
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['unknown_base_type'] = \
                unknown_base_type
            return self.call_with_http_info(**kwargs)

        self.advanced_list_stories = _Endpoint(
            settings={
                'response_type': (dict,),
                'auth': [
                    'app_id',
                    'app_key'
                ],
                'endpoint_path': '/stories',
                'operation_id': 'advanced_list_stories',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'unknown_base_type',
                    'published_at_start',
                    'published_at_end',
                    '_return',
                    'sort_by',
                    'sort_direction',
                    'cursor',
                    'per_page',
                ],
                'required': [
                    'unknown_base_type',
                ],
                'nullable': [
                    'published_at_start',
                    'published_at_end',
                    '_return',
                    'sort_by',
                    'sort_direction',
                    'cursor',
                    'per_page',
                ],
                'enum': [
                    '_return',
                    'sort_by',
                    'sort_direction',
                ],
                'validation': [
                    'per_page',
                ]
            },
            root_map={
                'validations': {
                    ('per_page',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('_return',): {
                        'None': None,
                        "ID": "id",
                        "TITLE": "title",
                        "BODY": "body",
                        "SUMMARY": "summary",
                        "SOURCE": "source",
                        "AUTHOR": "author",
                        "ENTITIES": "entities",
                        "KEYWORDS": "keywords",
                        "HASHTAGS": "hashtags",
                        "CHARACTERS_COUNT": "characters_count",
                        "WORDS_COUNT": "words_count",
                        "SENTENCES_COUNT": "sentences_count",
                        "PARAGRAPHS_COUNT": "paragraphs_count",
                        "CATEGORIES": "categories",
                        "SOCIAL_SHARES_COUNT": "social_shares_count",
                        "MEDIA": "media",
                        "SENTIMENT": "sentiment",
                        "LANGUAGE": "language",
                        "PUBLISHED_AT": "published_at",
                        "LINKS": "links"
                    },
                    ('sort_by',): {
                        'None': None,
                        "RELEVANCE": "relevance",
                        "RECENCY": "recency",
                        "HOTNESS": "hotness",
                        "PUBLISHED_AT": "published_at",
                        "SOCIAL_SHARES_COUNT": "social_shares_count",
                        "SOCIAL_SHARES_COUNT.FACEBOOK": "social_shares_count.facebook",
                        "SOCIAL_SHARES_COUNT.LINKEDIN": "social_shares_count.linkedin",
                        "SOCIAL_SHARES_COUNT.GOOGLE_PLUS": "social_shares_count.google_plus",
                        "SOCIAL_SHARES_COUNT.REDDIT": "social_shares_count.reddit",
                        "MEDIA.IMAGES.COUNT": "media.images.count",
                        "MEDIA.VIDEOS.COUNT": "media.videos.count",
                        "SOURCE.LINKS_IN_COUNT": "source.links_in_count",
                        "SOURCE.RANKINGS.ALEXA.RANK": "source.rankings.alexa.rank",
                        "SOURCE.RANKINGS.ALEXA.RANK.AF": "source.rankings.alexa.rank.AF",
                        "SOURCE.RANKINGS.ALEXA.RANK.AX": "source.rankings.alexa.rank.AX",
                        "SOURCE.RANKINGS.ALEXA.RANK.AL": "source.rankings.alexa.rank.AL",
                        "SOURCE.RANKINGS.ALEXA.RANK.DZ": "source.rankings.alexa.rank.DZ",
                        "SOURCE.RANKINGS.ALEXA.RANK.AS": "source.rankings.alexa.rank.AS",
                        "SOURCE.RANKINGS.ALEXA.RANK.AD": "source.rankings.alexa.rank.AD",
                        "SOURCE.RANKINGS.ALEXA.RANK.AO": "source.rankings.alexa.rank.AO",
                        "SOURCE.RANKINGS.ALEXA.RANK.AI": "source.rankings.alexa.rank.AI",
                        "SOURCE.RANKINGS.ALEXA.RANK.AQ": "source.rankings.alexa.rank.AQ",
                        "SOURCE.RANKINGS.ALEXA.RANK.AG": "source.rankings.alexa.rank.AG",
                        "SOURCE.RANKINGS.ALEXA.RANK.AR": "source.rankings.alexa.rank.AR",
                        "SOURCE.RANKINGS.ALEXA.RANK.AM": "source.rankings.alexa.rank.AM",
                        "SOURCE.RANKINGS.ALEXA.RANK.AW": "source.rankings.alexa.rank.AW",
                        "SOURCE.RANKINGS.ALEXA.RANK.AU": "source.rankings.alexa.rank.AU",
                        "SOURCE.RANKINGS.ALEXA.RANK.AT": "source.rankings.alexa.rank.AT",
                        "SOURCE.RANKINGS.ALEXA.RANK.AZ": "source.rankings.alexa.rank.AZ",
                        "SOURCE.RANKINGS.ALEXA.RANK.BS": "source.rankings.alexa.rank.BS",
                        "SOURCE.RANKINGS.ALEXA.RANK.BH": "source.rankings.alexa.rank.BH",
                        "SOURCE.RANKINGS.ALEXA.RANK.BD": "source.rankings.alexa.rank.BD",
                        "SOURCE.RANKINGS.ALEXA.RANK.BB": "source.rankings.alexa.rank.BB",
                        "SOURCE.RANKINGS.ALEXA.RANK.BY": "source.rankings.alexa.rank.BY",
                        "SOURCE.RANKINGS.ALEXA.RANK.BE": "source.rankings.alexa.rank.BE",
                        "SOURCE.RANKINGS.ALEXA.RANK.BZ": "source.rankings.alexa.rank.BZ",
                        "SOURCE.RANKINGS.ALEXA.RANK.BJ": "source.rankings.alexa.rank.BJ",
                        "SOURCE.RANKINGS.ALEXA.RANK.BM": "source.rankings.alexa.rank.BM",
                        "SOURCE.RANKINGS.ALEXA.RANK.BT": "source.rankings.alexa.rank.BT",
                        "SOURCE.RANKINGS.ALEXA.RANK.BO": "source.rankings.alexa.rank.BO",
                        "SOURCE.RANKINGS.ALEXA.RANK.BQ": "source.rankings.alexa.rank.BQ",
                        "SOURCE.RANKINGS.ALEXA.RANK.BA": "source.rankings.alexa.rank.BA",
                        "SOURCE.RANKINGS.ALEXA.RANK.BW": "source.rankings.alexa.rank.BW",
                        "SOURCE.RANKINGS.ALEXA.RANK.BV": "source.rankings.alexa.rank.BV",
                        "SOURCE.RANKINGS.ALEXA.RANK.BR": "source.rankings.alexa.rank.BR",
                        "SOURCE.RANKINGS.ALEXA.RANK.IO": "source.rankings.alexa.rank.IO",
                        "SOURCE.RANKINGS.ALEXA.RANK.BN": "source.rankings.alexa.rank.BN",
                        "SOURCE.RANKINGS.ALEXA.RANK.BG": "source.rankings.alexa.rank.BG",
                        "SOURCE.RANKINGS.ALEXA.RANK.BF": "source.rankings.alexa.rank.BF",
                        "SOURCE.RANKINGS.ALEXA.RANK.BI": "source.rankings.alexa.rank.BI",
                        "SOURCE.RANKINGS.ALEXA.RANK.KH": "source.rankings.alexa.rank.KH",
                        "SOURCE.RANKINGS.ALEXA.RANK.CM": "source.rankings.alexa.rank.CM",
                        "SOURCE.RANKINGS.ALEXA.RANK.CA": "source.rankings.alexa.rank.CA",
                        "SOURCE.RANKINGS.ALEXA.RANK.CV": "source.rankings.alexa.rank.CV",
                        "SOURCE.RANKINGS.ALEXA.RANK.KY": "source.rankings.alexa.rank.KY",
                        "SOURCE.RANKINGS.ALEXA.RANK.CF": "source.rankings.alexa.rank.CF",
                        "SOURCE.RANKINGS.ALEXA.RANK.TD": "source.rankings.alexa.rank.TD",
                        "SOURCE.RANKINGS.ALEXA.RANK.CL": "source.rankings.alexa.rank.CL",
                        "SOURCE.RANKINGS.ALEXA.RANK.CN": "source.rankings.alexa.rank.CN",
                        "SOURCE.RANKINGS.ALEXA.RANK.CX": "source.rankings.alexa.rank.CX",
                        "SOURCE.RANKINGS.ALEXA.RANK.CC": "source.rankings.alexa.rank.CC",
                        "SOURCE.RANKINGS.ALEXA.RANK.CO": "source.rankings.alexa.rank.CO",
                        "SOURCE.RANKINGS.ALEXA.RANK.KM": "source.rankings.alexa.rank.KM",
                        "SOURCE.RANKINGS.ALEXA.RANK.CG": "source.rankings.alexa.rank.CG",
                        "SOURCE.RANKINGS.ALEXA.RANK.CD": "source.rankings.alexa.rank.CD",
                        "SOURCE.RANKINGS.ALEXA.RANK.CK": "source.rankings.alexa.rank.CK",
                        "SOURCE.RANKINGS.ALEXA.RANK.CR": "source.rankings.alexa.rank.CR",
                        "SOURCE.RANKINGS.ALEXA.RANK.CI": "source.rankings.alexa.rank.CI",
                        "SOURCE.RANKINGS.ALEXA.RANK.HR": "source.rankings.alexa.rank.HR",
                        "SOURCE.RANKINGS.ALEXA.RANK.CU": "source.rankings.alexa.rank.CU",
                        "SOURCE.RANKINGS.ALEXA.RANK.CW": "source.rankings.alexa.rank.CW",
                        "SOURCE.RANKINGS.ALEXA.RANK.CY": "source.rankings.alexa.rank.CY",
                        "SOURCE.RANKINGS.ALEXA.RANK.CZ": "source.rankings.alexa.rank.CZ",
                        "SOURCE.RANKINGS.ALEXA.RANK.DK": "source.rankings.alexa.rank.DK",
                        "SOURCE.RANKINGS.ALEXA.RANK.DJ": "source.rankings.alexa.rank.DJ",
                        "SOURCE.RANKINGS.ALEXA.RANK.DM": "source.rankings.alexa.rank.DM",
                        "SOURCE.RANKINGS.ALEXA.RANK.DO": "source.rankings.alexa.rank.DO",
                        "SOURCE.RANKINGS.ALEXA.RANK.EC": "source.rankings.alexa.rank.EC",
                        "SOURCE.RANKINGS.ALEXA.RANK.EG": "source.rankings.alexa.rank.EG",
                        "SOURCE.RANKINGS.ALEXA.RANK.SV": "source.rankings.alexa.rank.SV",
                        "SOURCE.RANKINGS.ALEXA.RANK.GQ": "source.rankings.alexa.rank.GQ",
                        "SOURCE.RANKINGS.ALEXA.RANK.ER": "source.rankings.alexa.rank.ER",
                        "SOURCE.RANKINGS.ALEXA.RANK.EE": "source.rankings.alexa.rank.EE",
                        "SOURCE.RANKINGS.ALEXA.RANK.ET": "source.rankings.alexa.rank.ET",
                        "SOURCE.RANKINGS.ALEXA.RANK.FK": "source.rankings.alexa.rank.FK",
                        "SOURCE.RANKINGS.ALEXA.RANK.FO": "source.rankings.alexa.rank.FO",
                        "SOURCE.RANKINGS.ALEXA.RANK.FJ": "source.rankings.alexa.rank.FJ",
                        "SOURCE.RANKINGS.ALEXA.RANK.FI": "source.rankings.alexa.rank.FI",
                        "SOURCE.RANKINGS.ALEXA.RANK.FR": "source.rankings.alexa.rank.FR",
                        "SOURCE.RANKINGS.ALEXA.RANK.GF": "source.rankings.alexa.rank.GF",
                        "SOURCE.RANKINGS.ALEXA.RANK.PF": "source.rankings.alexa.rank.PF",
                        "SOURCE.RANKINGS.ALEXA.RANK.TF": "source.rankings.alexa.rank.TF",
                        "SOURCE.RANKINGS.ALEXA.RANK.GA": "source.rankings.alexa.rank.GA",
                        "SOURCE.RANKINGS.ALEXA.RANK.GM": "source.rankings.alexa.rank.GM",
                        "SOURCE.RANKINGS.ALEXA.RANK.GE": "source.rankings.alexa.rank.GE",
                        "SOURCE.RANKINGS.ALEXA.RANK.DE": "source.rankings.alexa.rank.DE",
                        "SOURCE.RANKINGS.ALEXA.RANK.GH": "source.rankings.alexa.rank.GH",
                        "SOURCE.RANKINGS.ALEXA.RANK.GI": "source.rankings.alexa.rank.GI",
                        "SOURCE.RANKINGS.ALEXA.RANK.GR": "source.rankings.alexa.rank.GR",
                        "SOURCE.RANKINGS.ALEXA.RANK.GL": "source.rankings.alexa.rank.GL",
                        "SOURCE.RANKINGS.ALEXA.RANK.GD": "source.rankings.alexa.rank.GD",
                        "SOURCE.RANKINGS.ALEXA.RANK.GP": "source.rankings.alexa.rank.GP",
                        "SOURCE.RANKINGS.ALEXA.RANK.GU": "source.rankings.alexa.rank.GU",
                        "SOURCE.RANKINGS.ALEXA.RANK.GT": "source.rankings.alexa.rank.GT",
                        "SOURCE.RANKINGS.ALEXA.RANK.GG": "source.rankings.alexa.rank.GG",
                        "SOURCE.RANKINGS.ALEXA.RANK.GN": "source.rankings.alexa.rank.GN",
                        "SOURCE.RANKINGS.ALEXA.RANK.GW": "source.rankings.alexa.rank.GW",
                        "SOURCE.RANKINGS.ALEXA.RANK.GY": "source.rankings.alexa.rank.GY",
                        "SOURCE.RANKINGS.ALEXA.RANK.HT": "source.rankings.alexa.rank.HT",
                        "SOURCE.RANKINGS.ALEXA.RANK.HM": "source.rankings.alexa.rank.HM",
                        "SOURCE.RANKINGS.ALEXA.RANK.VA": "source.rankings.alexa.rank.VA",
                        "SOURCE.RANKINGS.ALEXA.RANK.HN": "source.rankings.alexa.rank.HN",
                        "SOURCE.RANKINGS.ALEXA.RANK.HK": "source.rankings.alexa.rank.HK",
                        "SOURCE.RANKINGS.ALEXA.RANK.HU": "source.rankings.alexa.rank.HU",
                        "SOURCE.RANKINGS.ALEXA.RANK.IS": "source.rankings.alexa.rank.IS",
                        "SOURCE.RANKINGS.ALEXA.RANK.IN": "source.rankings.alexa.rank.IN",
                        "SOURCE.RANKINGS.ALEXA.RANK.ID": "source.rankings.alexa.rank.ID",
                        "SOURCE.RANKINGS.ALEXA.RANK.IR": "source.rankings.alexa.rank.IR",
                        "SOURCE.RANKINGS.ALEXA.RANK.IQ": "source.rankings.alexa.rank.IQ",
                        "SOURCE.RANKINGS.ALEXA.RANK.IE": "source.rankings.alexa.rank.IE",
                        "SOURCE.RANKINGS.ALEXA.RANK.IM": "source.rankings.alexa.rank.IM",
                        "SOURCE.RANKINGS.ALEXA.RANK.IL": "source.rankings.alexa.rank.IL",
                        "SOURCE.RANKINGS.ALEXA.RANK.IT": "source.rankings.alexa.rank.IT",
                        "SOURCE.RANKINGS.ALEXA.RANK.JM": "source.rankings.alexa.rank.JM",
                        "SOURCE.RANKINGS.ALEXA.RANK.JP": "source.rankings.alexa.rank.JP",
                        "SOURCE.RANKINGS.ALEXA.RANK.JE": "source.rankings.alexa.rank.JE",
                        "SOURCE.RANKINGS.ALEXA.RANK.JO": "source.rankings.alexa.rank.JO",
                        "SOURCE.RANKINGS.ALEXA.RANK.KZ": "source.rankings.alexa.rank.KZ",
                        "SOURCE.RANKINGS.ALEXA.RANK.KE": "source.rankings.alexa.rank.KE",
                        "SOURCE.RANKINGS.ALEXA.RANK.KI": "source.rankings.alexa.rank.KI",
                        "SOURCE.RANKINGS.ALEXA.RANK.KP": "source.rankings.alexa.rank.KP",
                        "SOURCE.RANKINGS.ALEXA.RANK.KR": "source.rankings.alexa.rank.KR",
                        "SOURCE.RANKINGS.ALEXA.RANK.KW": "source.rankings.alexa.rank.KW",
                        "SOURCE.RANKINGS.ALEXA.RANK.KG": "source.rankings.alexa.rank.KG",
                        "SOURCE.RANKINGS.ALEXA.RANK.LA": "source.rankings.alexa.rank.LA",
                        "SOURCE.RANKINGS.ALEXA.RANK.LV": "source.rankings.alexa.rank.LV",
                        "SOURCE.RANKINGS.ALEXA.RANK.LB": "source.rankings.alexa.rank.LB",
                        "SOURCE.RANKINGS.ALEXA.RANK.LS": "source.rankings.alexa.rank.LS",
                        "SOURCE.RANKINGS.ALEXA.RANK.LR": "source.rankings.alexa.rank.LR",
                        "SOURCE.RANKINGS.ALEXA.RANK.LY": "source.rankings.alexa.rank.LY",
                        "SOURCE.RANKINGS.ALEXA.RANK.LI": "source.rankings.alexa.rank.LI",
                        "SOURCE.RANKINGS.ALEXA.RANK.LT": "source.rankings.alexa.rank.LT",
                        "SOURCE.RANKINGS.ALEXA.RANK.LU": "source.rankings.alexa.rank.LU",
                        "SOURCE.RANKINGS.ALEXA.RANK.MO": "source.rankings.alexa.rank.MO",
                        "SOURCE.RANKINGS.ALEXA.RANK.MK": "source.rankings.alexa.rank.MK",
                        "SOURCE.RANKINGS.ALEXA.RANK.MG": "source.rankings.alexa.rank.MG",
                        "SOURCE.RANKINGS.ALEXA.RANK.MW": "source.rankings.alexa.rank.MW",
                        "SOURCE.RANKINGS.ALEXA.RANK.MY": "source.rankings.alexa.rank.MY",
                        "SOURCE.RANKINGS.ALEXA.RANK.MV": "source.rankings.alexa.rank.MV",
                        "SOURCE.RANKINGS.ALEXA.RANK.ML": "source.rankings.alexa.rank.ML",
                        "SOURCE.RANKINGS.ALEXA.RANK.MT": "source.rankings.alexa.rank.MT",
                        "SOURCE.RANKINGS.ALEXA.RANK.MH": "source.rankings.alexa.rank.MH",
                        "SOURCE.RANKINGS.ALEXA.RANK.MQ": "source.rankings.alexa.rank.MQ",
                        "SOURCE.RANKINGS.ALEXA.RANK.MR": "source.rankings.alexa.rank.MR",
                        "SOURCE.RANKINGS.ALEXA.RANK.MU": "source.rankings.alexa.rank.MU",
                        "SOURCE.RANKINGS.ALEXA.RANK.YT": "source.rankings.alexa.rank.YT",
                        "SOURCE.RANKINGS.ALEXA.RANK.MX": "source.rankings.alexa.rank.MX",
                        "SOURCE.RANKINGS.ALEXA.RANK.FM": "source.rankings.alexa.rank.FM",
                        "SOURCE.RANKINGS.ALEXA.RANK.MD": "source.rankings.alexa.rank.MD",
                        "SOURCE.RANKINGS.ALEXA.RANK.MC": "source.rankings.alexa.rank.MC",
                        "SOURCE.RANKINGS.ALEXA.RANK.MN": "source.rankings.alexa.rank.MN",
                        "SOURCE.RANKINGS.ALEXA.RANK.ME": "source.rankings.alexa.rank.ME",
                        "SOURCE.RANKINGS.ALEXA.RANK.MS": "source.rankings.alexa.rank.MS",
                        "SOURCE.RANKINGS.ALEXA.RANK.MA": "source.rankings.alexa.rank.MA",
                        "SOURCE.RANKINGS.ALEXA.RANK.MZ": "source.rankings.alexa.rank.MZ",
                        "SOURCE.RANKINGS.ALEXA.RANK.MM": "source.rankings.alexa.rank.MM",
                        "SOURCE.RANKINGS.ALEXA.RANK.NA": "source.rankings.alexa.rank.NA",
                        "SOURCE.RANKINGS.ALEXA.RANK.NR": "source.rankings.alexa.rank.NR",
                        "SOURCE.RANKINGS.ALEXA.RANK.NP": "source.rankings.alexa.rank.NP",
                        "SOURCE.RANKINGS.ALEXA.RANK.NL": "source.rankings.alexa.rank.NL",
                        "SOURCE.RANKINGS.ALEXA.RANK.NC": "source.rankings.alexa.rank.NC",
                        "SOURCE.RANKINGS.ALEXA.RANK.NZ": "source.rankings.alexa.rank.NZ",
                        "SOURCE.RANKINGS.ALEXA.RANK.NI": "source.rankings.alexa.rank.NI",
                        "SOURCE.RANKINGS.ALEXA.RANK.NE": "source.rankings.alexa.rank.NE",
                        "SOURCE.RANKINGS.ALEXA.RANK.NG": "source.rankings.alexa.rank.NG",
                        "SOURCE.RANKINGS.ALEXA.RANK.NU": "source.rankings.alexa.rank.NU",
                        "SOURCE.RANKINGS.ALEXA.RANK.NF": "source.rankings.alexa.rank.NF",
                        "SOURCE.RANKINGS.ALEXA.RANK.MP": "source.rankings.alexa.rank.MP",
                        "SOURCE.RANKINGS.ALEXA.RANK.NO": "source.rankings.alexa.rank.NO",
                        "SOURCE.RANKINGS.ALEXA.RANK.OM": "source.rankings.alexa.rank.OM",
                        "SOURCE.RANKINGS.ALEXA.RANK.PK": "source.rankings.alexa.rank.PK",
                        "SOURCE.RANKINGS.ALEXA.RANK.PW": "source.rankings.alexa.rank.PW",
                        "SOURCE.RANKINGS.ALEXA.RANK.PS": "source.rankings.alexa.rank.PS",
                        "SOURCE.RANKINGS.ALEXA.RANK.PA": "source.rankings.alexa.rank.PA",
                        "SOURCE.RANKINGS.ALEXA.RANK.PG": "source.rankings.alexa.rank.PG",
                        "SOURCE.RANKINGS.ALEXA.RANK.PY": "source.rankings.alexa.rank.PY",
                        "SOURCE.RANKINGS.ALEXA.RANK.PE": "source.rankings.alexa.rank.PE",
                        "SOURCE.RANKINGS.ALEXA.RANK.PH": "source.rankings.alexa.rank.PH",
                        "SOURCE.RANKINGS.ALEXA.RANK.PN": "source.rankings.alexa.rank.PN",
                        "SOURCE.RANKINGS.ALEXA.RANK.PL": "source.rankings.alexa.rank.PL",
                        "SOURCE.RANKINGS.ALEXA.RANK.PT": "source.rankings.alexa.rank.PT",
                        "SOURCE.RANKINGS.ALEXA.RANK.PR": "source.rankings.alexa.rank.PR",
                        "SOURCE.RANKINGS.ALEXA.RANK.QA": "source.rankings.alexa.rank.QA",
                        "SOURCE.RANKINGS.ALEXA.RANK.RE": "source.rankings.alexa.rank.RE",
                        "SOURCE.RANKINGS.ALEXA.RANK.RO": "source.rankings.alexa.rank.RO",
                        "SOURCE.RANKINGS.ALEXA.RANK.RU": "source.rankings.alexa.rank.RU",
                        "SOURCE.RANKINGS.ALEXA.RANK.RW": "source.rankings.alexa.rank.RW",
                        "SOURCE.RANKINGS.ALEXA.RANK.BL": "source.rankings.alexa.rank.BL",
                        "SOURCE.RANKINGS.ALEXA.RANK.SH": "source.rankings.alexa.rank.SH",
                        "SOURCE.RANKINGS.ALEXA.RANK.KN": "source.rankings.alexa.rank.KN",
                        "SOURCE.RANKINGS.ALEXA.RANK.LC": "source.rankings.alexa.rank.LC",
                        "SOURCE.RANKINGS.ALEXA.RANK.MF": "source.rankings.alexa.rank.MF",
                        "SOURCE.RANKINGS.ALEXA.RANK.PM": "source.rankings.alexa.rank.PM",
                        "SOURCE.RANKINGS.ALEXA.RANK.VC": "source.rankings.alexa.rank.VC",
                        "SOURCE.RANKINGS.ALEXA.RANK.WS": "source.rankings.alexa.rank.WS",
                        "SOURCE.RANKINGS.ALEXA.RANK.SM": "source.rankings.alexa.rank.SM",
                        "SOURCE.RANKINGS.ALEXA.RANK.ST": "source.rankings.alexa.rank.ST",
                        "SOURCE.RANKINGS.ALEXA.RANK.SA": "source.rankings.alexa.rank.SA",
                        "SOURCE.RANKINGS.ALEXA.RANK.SN": "source.rankings.alexa.rank.SN",
                        "SOURCE.RANKINGS.ALEXA.RANK.RS": "source.rankings.alexa.rank.RS",
                        "SOURCE.RANKINGS.ALEXA.RANK.SC": "source.rankings.alexa.rank.SC",
                        "SOURCE.RANKINGS.ALEXA.RANK.SL": "source.rankings.alexa.rank.SL",
                        "SOURCE.RANKINGS.ALEXA.RANK.SG": "source.rankings.alexa.rank.SG",
                        "SOURCE.RANKINGS.ALEXA.RANK.SX": "source.rankings.alexa.rank.SX",
                        "SOURCE.RANKINGS.ALEXA.RANK.SK": "source.rankings.alexa.rank.SK",
                        "SOURCE.RANKINGS.ALEXA.RANK.SI": "source.rankings.alexa.rank.SI",
                        "SOURCE.RANKINGS.ALEXA.RANK.SB": "source.rankings.alexa.rank.SB",
                        "SOURCE.RANKINGS.ALEXA.RANK.SO": "source.rankings.alexa.rank.SO",
                        "SOURCE.RANKINGS.ALEXA.RANK.ZA": "source.rankings.alexa.rank.ZA",
                        "SOURCE.RANKINGS.ALEXA.RANK.GS": "source.rankings.alexa.rank.GS",
                        "SOURCE.RANKINGS.ALEXA.RANK.SS": "source.rankings.alexa.rank.SS",
                        "SOURCE.RANKINGS.ALEXA.RANK.ES": "source.rankings.alexa.rank.ES",
                        "SOURCE.RANKINGS.ALEXA.RANK.LK": "source.rankings.alexa.rank.LK",
                        "SOURCE.RANKINGS.ALEXA.RANK.SD": "source.rankings.alexa.rank.SD",
                        "SOURCE.RANKINGS.ALEXA.RANK.SR": "source.rankings.alexa.rank.SR",
                        "SOURCE.RANKINGS.ALEXA.RANK.SJ": "source.rankings.alexa.rank.SJ",
                        "SOURCE.RANKINGS.ALEXA.RANK.SZ": "source.rankings.alexa.rank.SZ",
                        "SOURCE.RANKINGS.ALEXA.RANK.SE": "source.rankings.alexa.rank.SE",
                        "SOURCE.RANKINGS.ALEXA.RANK.CH": "source.rankings.alexa.rank.CH",
                        "SOURCE.RANKINGS.ALEXA.RANK.SY": "source.rankings.alexa.rank.SY",
                        "SOURCE.RANKINGS.ALEXA.RANK.TW": "source.rankings.alexa.rank.TW",
                        "SOURCE.RANKINGS.ALEXA.RANK.TJ": "source.rankings.alexa.rank.TJ",
                        "SOURCE.RANKINGS.ALEXA.RANK.TZ": "source.rankings.alexa.rank.TZ",
                        "SOURCE.RANKINGS.ALEXA.RANK.TH": "source.rankings.alexa.rank.TH",
                        "SOURCE.RANKINGS.ALEXA.RANK.TL": "source.rankings.alexa.rank.TL",
                        "SOURCE.RANKINGS.ALEXA.RANK.TG": "source.rankings.alexa.rank.TG",
                        "SOURCE.RANKINGS.ALEXA.RANK.TK": "source.rankings.alexa.rank.TK",
                        "SOURCE.RANKINGS.ALEXA.RANK.TO": "source.rankings.alexa.rank.TO",
                        "SOURCE.RANKINGS.ALEXA.RANK.TT": "source.rankings.alexa.rank.TT",
                        "SOURCE.RANKINGS.ALEXA.RANK.TN": "source.rankings.alexa.rank.TN",
                        "SOURCE.RANKINGS.ALEXA.RANK.TR": "source.rankings.alexa.rank.TR",
                        "SOURCE.RANKINGS.ALEXA.RANK.TM": "source.rankings.alexa.rank.TM",
                        "SOURCE.RANKINGS.ALEXA.RANK.TC": "source.rankings.alexa.rank.TC",
                        "SOURCE.RANKINGS.ALEXA.RANK.TV": "source.rankings.alexa.rank.TV",
                        "SOURCE.RANKINGS.ALEXA.RANK.UG": "source.rankings.alexa.rank.UG",
                        "SOURCE.RANKINGS.ALEXA.RANK.UA": "source.rankings.alexa.rank.UA",
                        "SOURCE.RANKINGS.ALEXA.RANK.AE": "source.rankings.alexa.rank.AE",
                        "SOURCE.RANKINGS.ALEXA.RANK.GB": "source.rankings.alexa.rank.GB",
                        "SOURCE.RANKINGS.ALEXA.RANK.US": "source.rankings.alexa.rank.US",
                        "SOURCE.RANKINGS.ALEXA.RANK.UM": "source.rankings.alexa.rank.UM",
                        "SOURCE.RANKINGS.ALEXA.RANK.UY": "source.rankings.alexa.rank.UY",
                        "SOURCE.RANKINGS.ALEXA.RANK.UZ": "source.rankings.alexa.rank.UZ",
                        "SOURCE.RANKINGS.ALEXA.RANK.VU": "source.rankings.alexa.rank.VU",
                        "SOURCE.RANKINGS.ALEXA.RANK.VE": "source.rankings.alexa.rank.VE",
                        "SOURCE.RANKINGS.ALEXA.RANK.VN": "source.rankings.alexa.rank.VN",
                        "SOURCE.RANKINGS.ALEXA.RANK.VG": "source.rankings.alexa.rank.VG",
                        "SOURCE.RANKINGS.ALEXA.RANK.VI": "source.rankings.alexa.rank.VI",
                        "SOURCE.RANKINGS.ALEXA.RANK.WF": "source.rankings.alexa.rank.WF",
                        "SOURCE.RANKINGS.ALEXA.RANK.EH": "source.rankings.alexa.rank.EH",
                        "SOURCE.RANKINGS.ALEXA.RANK.YE": "source.rankings.alexa.rank.YE",
                        "SOURCE.RANKINGS.ALEXA.RANK.ZM": "source.rankings.alexa.rank.ZM",
                        "SOURCE.RANKINGS.ALEXA.RANK.ZW": "source.rankings.alexa.rank.ZW"
                    },
                    ('sort_direction',): {
                        'None': None,
                        "ASC": "asc",
                        "DESC": "desc"
                    },
                },
                'openapi_types': {
                    'unknown_base_type':
                        (UNKNOWN_BASE_TYPE,),
                    'published_at_start':
                        (str, none_type,),
                    'published_at_end':
                        (str, none_type,),
                    '_return':
                        ([str], none_type,),
                    'sort_by':
                        (str, none_type,),
                    'sort_direction':
                        (str, none_type,),
                    'cursor':
                        (str, none_type,),
                    'per_page':
                        (int, none_type,),
                },
                'attribute_map': {
                    'published_at_start': 'published_at.start',
                    'published_at_end': 'published_at.end',
                    '_return': 'return[]',
                    'sort_by': 'sort_by',
                    'sort_direction': 'sort_direction',
                    'cursor': 'cursor',
                    'per_page': 'per_page',
                },
                'location_map': {
                    'unknown_base_type': 'body',
                    'published_at_start': 'query',
                    'published_at_end': 'query',
                    '_return': 'query',
                    'sort_by': 'query',
                    'sort_direction': 'query',
                    'cursor': 'query',
                    'per_page': 'query',
                },
                'collection_format_map': {
                    '_return': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/xml'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__advanced_list_stories
        )

        def __list_autocompletes(
            self,
            type,
            term,
            **kwargs
        ):
            """List autocompletes  # noqa: E501

            The autocompletes endpoint a string of characters provided to it, and then returns suggested terms that are the most likely full words or strings. The terms returned by the News API are based on parameters the type parameters you can see below. For example, if you provide the autocompletes endpoint with the term `New York C` and select the type `dbpedia_resources`, the API will return links to the DBpedia resources `New_York_City`, `New_York_City_Subway`, `New_York_City_Police_Department`, and so on.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_autocompletes(type, term, async_req=True)
            >>> result = thread.get()

            Args:
                type (str): This parameter is used for defining the type of autocompletes. 
                term (str): This parameter is used for finding autocomplete objects that contain the specified value. 

            Keyword Args:
                language (str, none_type): This parameter is used for autocompletes whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes. . [optional] if omitted the server will use the default value of "en"
                per_page (int, none_type): This parameter is used for specifying number of items in each page. . [optional] if omitted the server will use the default value of 3
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Autocompletes
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['type'] = \
                type
            kwargs['term'] = \
                term
            return self.call_with_http_info(**kwargs)

        self.list_autocompletes = _Endpoint(
            settings={
                'response_type': (Autocompletes,),
                'auth': [
                    'app_id',
                    'app_key'
                ],
                'endpoint_path': '/autocompletes',
                'operation_id': 'list_autocompletes',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'type',
                    'term',
                    'language',
                    'per_page',
                ],
                'required': [
                    'type',
                    'term',
                ],
                'nullable': [
                    'language',
                    'per_page',
                ],
                'enum': [
                    'type',
                    'language',
                ],
                'validation': [
                    'term',
                    'per_page',
                ]
            },
            root_map={
                'validations': {
                    ('term',): {

                        'min_length': 1,
                    },
                    ('per_page',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('type',): {

                        "SOURCE_NAMES": "source_names",
                        "SOURCE_DOMAINS": "source_domains",
                        "ENTITY_TYPES": "entity_types",
                        "DBPEDIA_RESOURCES": "dbpedia_resources",
                        "AYLIEN_ENTITIES_NAMES": "aylien_entities_names",
                        "AYLIEN_ENTITIES_TYPES": "aylien_entities_types"
                    },
                    ('language',): {
                        'None': None,
                        "EN": "en",
                        "DE": "de",
                        "FR": "fr",
                        "IT": "it",
                        "ES": "es",
                        "PT": "pt"
                    },
                },
                'openapi_types': {
                    'type':
                        (str,),
                    'term':
                        (str,),
                    'language':
                        (str, none_type,),
                    'per_page':
                        (int, none_type,),
                },
                'attribute_map': {
                    'type': 'type',
                    'term': 'term',
                    'language': 'language',
                    'per_page': 'per_page',
                },
                'location_map': {
                    'type': 'query',
                    'term': 'query',
                    'language': 'query',
                    'per_page': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_autocompletes
        )

        def __list_clusters(
            self,
            **kwargs
        ):
            """List Clusters  # noqa: E501

            The clusters endpoint is used to return clusters based on parameters you set in your query.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_clusters(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                id ([int], none_type): This parameter is used for finding clusters by cluster id. . [optional]
                not_id ([int], none_type): This parameter is used for excluding clusters by cluster id. . [optional]
                story_count_min (int, none_type): This parameter is used for finding clusters with more than or equal to a specific amount of stories associated with them. . [optional]
                story_count_max (int, none_type): This parameter is used for finding clusters with less than or equal to a specific amount of stories associated with them. . [optional]
                time_start (str, none_type): This parameter is used for finding clusters whose creation time is greater than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). . [optional]
                time_end (str, none_type): This parameter is used for finding clusters whose creation time is less than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). . [optional]
                earliest_story_start (str, none_type): This parameter is used for finding clusters whose publication date of its earliest story is greater than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). . [optional]
                earliest_story_end (str, none_type): This parameter is used for finding clusters whose publication date of its earliest story is less than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). . [optional]
                latest_story_start (str, none_type): This parameter is used for finding clusters whose publication date of its latest story is greater than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). . [optional]
                latest_story_end (str, none_type): This parameter is used for finding clusters whose publication date of its latest story is less than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). . [optional]
                location_country ([str], none_type): This parameter is used for finding clusters belonging to a specific country. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_location_country ([str], none_type): This parameter is used for excluding clusters belonging to a specific country. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                _return ([str], none_type): This parameter is used for specifying return fields.. [optional]
                sort_by (str, none_type): This parameter is used for changing the order column of the results. You can read about sorting results [here](https://newsapi.aylien.com/docs/sorting-results). . [optional] if omitted the server will use the default value of "published_at"
                sort_direction (str, none_type): This parameter is used for changing the order direction of the result. You can read about sorting results [here](https://newsapi.aylien.com/docs/sorting-results). . [optional] if omitted the server will use the default value of "desc"
                cursor (str, none_type): This parameter is used for finding a specific page. You can read more about pagination of results [here](https://newsapi.aylien.com/docs/pagination-of-results). . [optional] if omitted the server will use the default value of "*"
                per_page (int, none_type): This parameter is used for specifying number of items in each page You can read more about pagination of results [here](https://newsapi.aylien.com/docs/pagination-of-results) . [optional] if omitted the server will use the default value of 10
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Clusters
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.list_clusters = _Endpoint(
            settings={
                'response_type': (Clusters,),
                'auth': [
                    'app_id',
                    'app_key'
                ],
                'endpoint_path': '/clusters',
                'operation_id': 'list_clusters',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'not_id',
                    'story_count_min',
                    'story_count_max',
                    'time_start',
                    'time_end',
                    'earliest_story_start',
                    'earliest_story_end',
                    'latest_story_start',
                    'latest_story_end',
                    'location_country',
                    'not_location_country',
                    '_return',
                    'sort_by',
                    'sort_direction',
                    'cursor',
                    'per_page',
                ],
                'required': [],
                'nullable': [
                    'id',
                    'not_id',
                    'story_count_min',
                    'story_count_max',
                    'time_start',
                    'time_end',
                    'earliest_story_start',
                    'earliest_story_end',
                    'latest_story_start',
                    'latest_story_end',
                    'location_country',
                    'not_location_country',
                    '_return',
                    'sort_by',
                    'sort_direction',
                    'cursor',
                    'per_page',
                ],
                'enum': [
                    '_return',
                    'sort_by',
                    'sort_direction',
                ],
                'validation': [
                    'story_count_min',
                    'story_count_max',
                    'per_page',
                ]
            },
            root_map={
                'validations': {
                    ('story_count_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('story_count_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('per_page',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('_return',): {
                        'None': None,
                        "ID": "id",
                        "TIME": "time",
                        "SUMMARY": "summary",
                        "CATEGORY": "category",
                        "STORY_COUNT": "story_count",
                        "EARLIEST_STORY": "earliest_story",
                        "LATEST_STORY": "latest_story",
                        "REPRESENTATIVE_STORY": "representative_story",
                        "LOCATION_COUNTRY": "location_country"
                    },
                    ('sort_by',): {
                        'None': None,
                        "TIME": "time",
                        "STORY_COUNT": "story_count",
                        "EARLIEST_STORY": "earliest_story",
                        "LATEST_STORY": "latest_story"
                    },
                    ('sort_direction',): {
                        'None': None,
                        "ASC": "asc",
                        "DESC": "desc"
                    },
                },
                'openapi_types': {
                    'id':
                        ([int], none_type,),
                    'not_id':
                        ([int], none_type,),
                    'story_count_min':
                        (int, none_type,),
                    'story_count_max':
                        (int, none_type,),
                    'time_start':
                        (str, none_type,),
                    'time_end':
                        (str, none_type,),
                    'earliest_story_start':
                        (str, none_type,),
                    'earliest_story_end':
                        (str, none_type,),
                    'latest_story_start':
                        (str, none_type,),
                    'latest_story_end':
                        (str, none_type,),
                    'location_country':
                        ([str], none_type,),
                    'not_location_country':
                        ([str], none_type,),
                    '_return':
                        ([str], none_type,),
                    'sort_by':
                        (str, none_type,),
                    'sort_direction':
                        (str, none_type,),
                    'cursor':
                        (str, none_type,),
                    'per_page':
                        (int, none_type,),
                },
                'attribute_map': {
                    'id': 'id[]',
                    'not_id': '!id[]',
                    'story_count_min': 'story_count.min',
                    'story_count_max': 'story_count.max',
                    'time_start': 'time.start',
                    'time_end': 'time.end',
                    'earliest_story_start': 'earliest_story.start',
                    'earliest_story_end': 'earliest_story.end',
                    'latest_story_start': 'latest_story.start',
                    'latest_story_end': 'latest_story.end',
                    'location_country': 'location.country',
                    'not_location_country': '!location.country',
                    '_return': 'return[]',
                    'sort_by': 'sort_by',
                    'sort_direction': 'sort_direction',
                    'cursor': 'cursor',
                    'per_page': 'per_page',
                },
                'location_map': {
                    'id': 'query',
                    'not_id': 'query',
                    'story_count_min': 'query',
                    'story_count_max': 'query',
                    'time_start': 'query',
                    'time_end': 'query',
                    'earliest_story_start': 'query',
                    'earliest_story_end': 'query',
                    'latest_story_start': 'query',
                    'latest_story_end': 'query',
                    'location_country': 'query',
                    'not_location_country': 'query',
                    '_return': 'query',
                    'sort_by': 'query',
                    'sort_direction': 'query',
                    'cursor': 'query',
                    'per_page': 'query',
                },
                'collection_format_map': {
                    'id': 'multi',
                    'not_id': 'multi',
                    'location_country': 'multi',
                    'not_location_country': 'multi',
                    '_return': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_clusters
        )

        def __list_histograms(
            self,
            **kwargs
        ):
            """List histograms  # noqa: E501

            For the numerical metadata that the News API gathers (such as word counts or social shares for example), you can use the histograms endpoint to access and display this information. As this endpoint does not return actual stories, the results you are given will not count towards your story allowance provided by your subscription, so you can effectively query this endpoint free of charge.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_histograms(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                id ([int], none_type): This parameter is used for finding stories by story id. . [optional]
                not_id ([int], none_type): This parameter is used for excluding stories by story id. . [optional]
                title (str, none_type): This parameter is used for finding stories whose title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                body (str, none_type): This parameter is used for finding stories whose body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                text (str, none_type): This parameter is used for finding stories whose title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                translations_en_title (str, none_type): This parameter is used for finding stories whose translation title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                translations_en_body (str, none_type): This parameter is used for finding stories whose translation body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                translations_en_text (str, none_type): This parameter is used for finding stories whose translation title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                links_permalink ([str], none_type): This parameter is used to find stories based on their url. . [optional]
                not_links_permalink ([str], none_type): This parameter is used to exclude stories based on their url. . [optional]
                language ([str], none_type): This parameter is used for finding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes. . [optional]
                not_language ([str], none_type): This parameter is used for excluding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes. . [optional]
                published_at_start (str, none_type): This parameter is used for finding stories whose published at time is greater than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). . [optional]
                published_at_end (str, none_type): This parameter is used for finding stories whose published at time is less than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). . [optional]
                categories_taxonomy (str, none_type): This parameter is used for defining the type of the taxonomy for the rest of the categories queries. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                categories_confident (bool, none_type): This parameter is used for finding stories whose categories are confident. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional] if omitted the server will use the default value of True
                categories_id ([str], none_type): This parameter is used for finding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                not_categories_id ([str], none_type): This parameter is used for excluding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                categories_label ([str], none_type): This parameter is used for finding stories by categories label. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                not_categories_label ([str], none_type): This parameter is used for excluding stories by categories label. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                categories_level ([int], none_type): This parameter is used for finding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                not_categories_level ([int], none_type): This parameter is used for excluding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                entities_id ([str], none_type): This parameter is used to find stories based on the specified entities `id`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_id ([str], none_type): This parameter is used to exclude stories based on the specified entity's `id`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_links_wikipedia ([str], none_type): This parameter is used to find stories based on the specified entities wikipedia URL. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_links_wikipedia ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikipedia URL. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_links_wikidata ([str], none_type): This parameter is used to find stories based on the specified entities wikidata URL. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_links_wikidata ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikidata URL. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_types ([str], none_type): This parameter is used to find stories based on the specified entities `types`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_types ([str], none_type): This parameter is used to exclude stories based on the specified entity's `types`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_stock_tickers ([str], none_type): This parameter is used to find stories based on the specified entities `stock_tickers`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_stock_tickers ([str], none_type): This parameter is used to exclude stories based on the specified entity's `stock_tickers` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_surface_forms_text ([str], none_type): This parameter is used to find stories based on the specified entities `surface_form` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_surface_forms_text ([str], none_type): This parameter is used to exclude stories based on the specified entity's `surface_form`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_id ([str], none_type): This parameter is used to find stories based on the specified entities `id` in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_id ([str], none_type): This parameter is used to exclude stories based on the specified entity's `id` in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_surface_forms_text (str, none_type): This parameter is used to find stories based on the specified entities `surface_form` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_surface_forms_text ([str], none_type): This parameter is used to exclude stories based on the specified entity's `surface_form` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_text ([str], none_type): This parameter is used to find stories based on the specified entities `text` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_text ([str], none_type): This parameter is used to exclude stories based on the specified entities `text` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_type ([str], none_type): This parameter is used to find stories based on the specified entities `type` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_type ([str], none_type): This parameter is used to exclude stories based on the specified entities `type` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_stock_ticker ([str], none_type): This parameter is used to find stories based on the specified entities `stock_ticker` in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_stock_ticker ([str], none_type): This parameter is used to exclude stories based on the specified entity's `stock_ticker` in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_links_dbpedia ([str], none_type): This parameter is used to find stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_links_dbpedia ([str], none_type): This parameter is used to exclude stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_links_wikipedia ([str], none_type): This parameter is used to find stories based on the specified entities wikipedia URL in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_links_wikipedia ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikipedia URL in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_links_wikidata ([str], none_type): This parameter is used to find stories based on the specified entities wikidata URL in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_links_wikidata ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikidata URL in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_id ([str], none_type): This parameter is used to find stories based on the specified entities `id` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_id ([str], none_type): This parameter is used to exclude stories based on the specified entity's `id` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_surface_forms_text ([str], none_type): This parameter is used to exclude stories based on the specified entity's `surface_form` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_text ([str], none_type): This parameter is used to find stories based on the specified entities `text` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_text ([str], none_type): This parameter is used to exclude stories based on the specified entities `text` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_type ([str], none_type): This parameter is used to find stories based on the specified entities `type` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_type ([str], none_type): This parameter is used to exclude stories based on the specified entities `type` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_stock_ticker ([str], none_type): This parameter is used to find stories based on the specified entities `stock_ticker` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_stock_ticker ([str], none_type): This parameter is used to exclude stories based on the specified entity's `stock_ticker` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_links_dbpedia ([str], none_type): This parameter is used to find stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_links_dbpedia ([str], none_type): This parameter is used to exclude stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_links_wikipedia ([str], none_type): This parameter is used to find stories based on the specified entities wikipedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_links_wikipedia ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikipedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_links_wikidata ([str], none_type): This parameter is used to find stories based on the specified entities wikidata URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_links_wikidata ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikidata URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                sentiment_title_polarity (str, none_type): This parameter is used for finding stories whose title sentiment is the specified value. . [optional]
                not_sentiment_title_polarity (str, none_type): This parameter is used for excluding stories whose title sentiment is the specified value. . [optional]
                sentiment_body_polarity (str, none_type): This parameter is used for finding stories whose body sentiment is the specified value. . [optional]
                not_sentiment_body_polarity (str, none_type): This parameter is used for excluding stories whose body sentiment is the specified value. . [optional]
                media_images_count_min (int, none_type): This parameter is used for finding stories whose number of images is greater than or equal to the specified value. . [optional]
                media_images_count_max (int, none_type): This parameter is used for finding stories whose number of images is less than or equal to the specified value. . [optional]
                media_images_width_min (int, none_type): This parameter is used for finding stories whose width of images are greater than or equal to the specified value. . [optional]
                media_images_width_max (int, none_type): This parameter is used for finding stories whose width of images are less than or equal to the specified value. . [optional]
                media_images_height_min (int, none_type): This parameter is used for finding stories whose height of images are greater than or equal to the specified value. . [optional]
                media_images_height_max (int, none_type): This parameter is used for finding stories whose height of images are less than or equal to the specified value. . [optional]
                media_images_content_length_min (int, none_type): This parameter is used for finding stories whose images content length are greater than or equal to the specified value. . [optional]
                media_images_content_length_max (int, none_type): This parameter is used for finding stories whose images content length are less than or equal to the specified value. . [optional]
                media_images_format ([str], none_type): This parameter is used for finding stories whose images format are the specified value. . [optional]
                not_media_images_format ([str], none_type): This parameter is used for excluding stories whose images format are the specified value. . [optional]
                media_videos_count_min (int, none_type): This parameter is used for finding stories whose number of videos is greater than or equal to the specified value. . [optional]
                media_videos_count_max (int, none_type): This parameter is used for finding stories whose number of videos is less than or equal to the specified value. . [optional]
                author_id ([int], none_type): This parameter is used for finding stories whose author id is the specified value. . [optional]
                not_author_id ([int], none_type): This parameter is used for excluding stories whose author id is the specified value. . [optional]
                author_name (str, none_type): This parameter is used for finding stories whose author full name contains the specified value. . [optional]
                not_author_name (str, none_type): This parameter is used for excluding stories whose author full name contains the specified value. . [optional]
                source_id ([int], none_type): This parameter is used for finding stories whose source id is the specified value. . [optional]
                not_source_id ([int], none_type): This parameter is used for excluding stories whose source id is the specified value. . [optional]
                source_name ([str], none_type): This parameter is used for finding stories whose source name contains the specified value. . [optional]
                not_source_name ([str], none_type): This parameter is used for excluding stories whose source name contains the specified value. . [optional]
                source_domain ([str], none_type): This parameter is used for finding stories whose source domain is the specified value. . [optional]
                not_source_domain ([str], none_type): This parameter is used for excluding stories whose source domain is the specified value. . [optional]
                source_locations_country ([str], none_type): This parameter is used for finding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_locations_country ([str], none_type): This parameter is used for excluding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_locations_state ([str], none_type): This parameter is used for finding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_locations_state ([str], none_type): This parameter is used for excluding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_locations_city ([str], none_type): This parameter is used for finding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_locations_city ([str], none_type): This parameter is used for excluding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_scopes_country ([str], none_type): This parameter is used for finding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_scopes_country ([str], none_type): This parameter is used for excluding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_scopes_state ([str], none_type): This parameter is used for finding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_scopes_state ([str], none_type): This parameter is used for excluding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_scopes_city ([str], none_type): This parameter is used for finding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_scopes_city ([str], none_type): This parameter is used for excluding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_scopes_level ([str], none_type): This parameter is used for finding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_scopes_level ([str], none_type): This parameter is used for excluding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_links_in_count_min (int, none_type): This parameter is used for finding stories from sources whose Links in count is greater than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count). . [optional]
                source_links_in_count_max (int, none_type): This parameter is used for finding stories from sources whose Links in count is less than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count). . [optional]
                source_rankings_alexa_rank_min (int, none_type): This parameter is used for finding stories from sources whose Alexa rank is greater than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks). . [optional]
                source_rankings_alexa_rank_max (int, none_type): This parameter is used for finding stories from sources whose Alexa rank is less than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks). . [optional]
                source_rankings_alexa_country ([str], none_type): This parameter is used for finding stories from sources whose Alexa rank is in the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks). . [optional]
                social_shares_count_facebook_min (int, none_type): This parameter is used for finding stories whose Facebook social shares count is greater than or equal to the specified value. . [optional]
                social_shares_count_facebook_max (int, none_type): This parameter is used for finding stories whose Facebook social shares count is less than or equal to the specified value. . [optional]
                social_shares_count_google_plus_min (int, none_type): This parameter is used for finding stories whose Google+ social shares count is greater than or equal to the specified value. . [optional]
                social_shares_count_google_plus_max (int, none_type): This parameter is used for finding stories whose Google+ social shares count is less than or equal to the specified value. . [optional]
                social_shares_count_linkedin_min (int, none_type): This parameter is used for finding stories whose LinkedIn social shares count is greater than or equal to the specified value. . [optional]
                social_shares_count_linkedin_max (int, none_type): This parameter is used for finding stories whose LinkedIn social shares count is less than or equal to the specified value. . [optional]
                social_shares_count_reddit_min (int, none_type): This parameter is used for finding stories whose Reddit social shares count is greater than or equal to the specified value. . [optional]
                social_shares_count_reddit_max (int, none_type): This parameter is used for finding stories whose Reddit social shares count is less than or equal to the specified value. . [optional]
                clusters ([str], none_type): This parameter is used for finding stories with belonging to one of clusters in a specific set of clusters You can read more about working with clustering [here](https://newsapi.aylien.com/docs/working-with-clustering). . [optional]
                aql (str, none_type): This parameter is used to supply a query in AYLIEN Query Language. . [optional]
                aql_default_field (str, none_type): This parameter is used to supply an optional default field name used in the AQL query. . [optional] if omitted the server will use the default value of "text"
                query (str, none_type): This parameter is used to make an advanced query using $and, $or, $not logical operators and $eq for exact match, $text for a text search and $lt, $gt, $lte, $gte for range queries. value must be a json string. . [optional]
                interval_start (int, none_type): This parameter is used for setting the start data point of histogram intervals. . [optional]
                interval_end (int, none_type): This parameter is used for setting the end data point of histogram intervals. . [optional]
                interval_width (int, none_type): This parameter is used for setting the width of histogram intervals. . [optional]
                field (str, none_type): This parameter is used for specifying the y-axis variable for the histogram. . [optional] if omitted the server will use the default value of "social_shares_count"
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Histograms
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.list_histograms = _Endpoint(
            settings={
                'response_type': (Histograms,),
                'auth': [
                    'app_id',
                    'app_key'
                ],
                'endpoint_path': '/histograms',
                'operation_id': 'list_histograms',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'not_id',
                    'title',
                    'body',
                    'text',
                    'translations_en_title',
                    'translations_en_body',
                    'translations_en_text',
                    'links_permalink',
                    'not_links_permalink',
                    'language',
                    'not_language',
                    'published_at_start',
                    'published_at_end',
                    'categories_taxonomy',
                    'categories_confident',
                    'categories_id',
                    'not_categories_id',
                    'categories_label',
                    'not_categories_label',
                    'categories_level',
                    'not_categories_level',
                    'entities_id',
                    'not_entities_id',
                    'entities_links_wikipedia',
                    'not_entities_links_wikipedia',
                    'entities_links_wikidata',
                    'not_entities_links_wikidata',
                    'entities_types',
                    'not_entities_types',
                    'entities_stock_tickers',
                    'entities_body_stock_tickers',
                    'entities_body_surface_forms_text',
                    'entities_surface_forms_text',
                    'entities_title_id',
                    'not_entities_title_id',
                    'entities_title_surface_forms_text',
                    'not_entities_title_surface_forms_text',
                    'entities_title_text',
                    'not_entities_title_text',
                    'entities_title_type',
                    'not_entities_title_type',
                    'entities_title_stock_ticker',
                    'not_entities_title_stock_ticker',
                    'entities_title_links_dbpedia',
                    'not_entities_title_links_dbpedia',
                    'entities_title_links_wikipedia',
                    'not_entities_title_links_wikipedia',
                    'entities_title_links_wikidata',
                    'not_entities_title_links_wikidata',
                    'entities_body_id',
                    'not_entities_body_id',
                    'not_entities_body_surface_forms_text',
                    'entities_body_text',
                    'not_entities_body_text',
                    'entities_body_type',
                    'not_entities_body_type',
                    'entities_body_stock_ticker',
                    'not_entities_body_stock_ticker',
                    'entities_body_links_dbpedia',
                    'not_entities_body_links_dbpedia',
                    'entities_body_links_wikipedia',
                    'not_entities_body_links_wikipedia',
                    'entities_body_links_wikidata',
                    'not_entities_body_links_wikidata',
                    'sentiment_title_polarity',
                    'not_sentiment_title_polarity',
                    'sentiment_body_polarity',
                    'not_sentiment_body_polarity',
                    'media_images_count_min',
                    'media_images_count_max',
                    'media_images_width_min',
                    'media_images_width_max',
                    'media_images_height_min',
                    'media_images_height_max',
                    'media_images_content_length_min',
                    'media_images_content_length_max',
                    'media_images_format',
                    'not_media_images_format',
                    'media_videos_count_min',
                    'media_videos_count_max',
                    'author_id',
                    'not_author_id',
                    'author_name',
                    'not_author_name',
                    'source_id',
                    'not_source_id',
                    'source_name',
                    'not_source_name',
                    'source_domain',
                    'not_source_domain',
                    'source_locations_country',
                    'not_source_locations_country',
                    'source_locations_state',
                    'not_source_locations_state',
                    'source_locations_city',
                    'not_source_locations_city',
                    'source_scopes_country',
                    'not_source_scopes_country',
                    'source_scopes_state',
                    'not_source_scopes_state',
                    'source_scopes_city',
                    'not_source_scopes_city',
                    'source_scopes_level',
                    'not_source_scopes_level',
                    'source_links_in_count_min',
                    'source_links_in_count_max',
                    'source_rankings_alexa_rank_min',
                    'source_rankings_alexa_rank_max',
                    'source_rankings_alexa_country',
                    'social_shares_count_facebook_min',
                    'social_shares_count_facebook_max',
                    'social_shares_count_google_plus_min',
                    'social_shares_count_google_plus_max',
                    'social_shares_count_linkedin_min',
                    'social_shares_count_linkedin_max',
                    'social_shares_count_reddit_min',
                    'social_shares_count_reddit_max',
                    'clusters',
                    'aql',
                    'aql_default_field',
                    'query',
                    'interval_start',
                    'interval_end',
                    'interval_width',
                    'field',
                ],
                'required': [],
                'nullable': [
                    'id',
                    'not_id',
                    'title',
                    'body',
                    'text',
                    'translations_en_title',
                    'translations_en_body',
                    'translations_en_text',
                    'links_permalink',
                    'not_links_permalink',
                    'language',
                    'not_language',
                    'published_at_start',
                    'published_at_end',
                    'categories_taxonomy',
                    'categories_confident',
                    'categories_id',
                    'not_categories_id',
                    'categories_label',
                    'not_categories_label',
                    'categories_level',
                    'not_categories_level',
                    'entities_id',
                    'not_entities_id',
                    'entities_links_wikipedia',
                    'not_entities_links_wikipedia',
                    'entities_links_wikidata',
                    'not_entities_links_wikidata',
                    'entities_types',
                    'not_entities_types',
                    'entities_stock_tickers',
                    'entities_body_stock_tickers',
                    'entities_body_surface_forms_text',
                    'entities_surface_forms_text',
                    'entities_title_id',
                    'not_entities_title_id',
                    'entities_title_surface_forms_text',
                    'not_entities_title_surface_forms_text',
                    'entities_title_text',
                    'not_entities_title_text',
                    'entities_title_type',
                    'not_entities_title_type',
                    'entities_title_stock_ticker',
                    'not_entities_title_stock_ticker',
                    'entities_title_links_dbpedia',
                    'not_entities_title_links_dbpedia',
                    'entities_title_links_wikipedia',
                    'not_entities_title_links_wikipedia',
                    'entities_title_links_wikidata',
                    'not_entities_title_links_wikidata',
                    'entities_body_id',
                    'not_entities_body_id',
                    'not_entities_body_surface_forms_text',
                    'entities_body_text',
                    'not_entities_body_text',
                    'entities_body_type',
                    'not_entities_body_type',
                    'entities_body_stock_ticker',
                    'not_entities_body_stock_ticker',
                    'entities_body_links_dbpedia',
                    'not_entities_body_links_dbpedia',
                    'entities_body_links_wikipedia',
                    'not_entities_body_links_wikipedia',
                    'entities_body_links_wikidata',
                    'not_entities_body_links_wikidata',
                    'sentiment_title_polarity',
                    'not_sentiment_title_polarity',
                    'sentiment_body_polarity',
                    'not_sentiment_body_polarity',
                    'media_images_count_min',
                    'media_images_count_max',
                    'media_images_width_min',
                    'media_images_width_max',
                    'media_images_height_min',
                    'media_images_height_max',
                    'media_images_content_length_min',
                    'media_images_content_length_max',
                    'media_images_format',
                    'not_media_images_format',
                    'media_videos_count_min',
                    'media_videos_count_max',
                    'author_id',
                    'not_author_id',
                    'author_name',
                    'not_author_name',
                    'source_id',
                    'not_source_id',
                    'source_name',
                    'not_source_name',
                    'source_domain',
                    'not_source_domain',
                    'source_locations_country',
                    'not_source_locations_country',
                    'source_locations_state',
                    'not_source_locations_state',
                    'source_locations_city',
                    'not_source_locations_city',
                    'source_scopes_country',
                    'not_source_scopes_country',
                    'source_scopes_state',
                    'not_source_scopes_state',
                    'source_scopes_city',
                    'not_source_scopes_city',
                    'source_scopes_level',
                    'not_source_scopes_level',
                    'source_links_in_count_min',
                    'source_links_in_count_max',
                    'source_rankings_alexa_rank_min',
                    'source_rankings_alexa_rank_max',
                    'source_rankings_alexa_country',
                    'social_shares_count_facebook_min',
                    'social_shares_count_facebook_max',
                    'social_shares_count_google_plus_min',
                    'social_shares_count_google_plus_max',
                    'social_shares_count_linkedin_min',
                    'social_shares_count_linkedin_max',
                    'social_shares_count_reddit_min',
                    'social_shares_count_reddit_max',
                    'clusters',
                    'aql',
                    'aql_default_field',
                    'query',
                    'interval_start',
                    'interval_end',
                    'interval_width',
                    'field',
                ],
                'enum': [
                    'language',
                    'not_language',
                    'categories_taxonomy',
                    'sentiment_title_polarity',
                    'not_sentiment_title_polarity',
                    'sentiment_body_polarity',
                    'not_sentiment_body_polarity',
                    'media_images_format',
                    'not_media_images_format',
                    'source_scopes_level',
                    'not_source_scopes_level',
                    'field',
                ],
                'validation': [
                    'media_images_count_min',
                    'media_images_count_max',
                    'media_images_width_min',
                    'media_images_width_max',
                    'media_images_height_min',
                    'media_images_height_max',
                    'media_images_content_length_min',
                    'media_images_content_length_max',
                    'media_videos_count_min',
                    'media_videos_count_max',
                    'source_links_in_count_min',
                    'source_links_in_count_max',
                    'source_rankings_alexa_rank_min',
                    'source_rankings_alexa_rank_max',
                    'social_shares_count_facebook_min',
                    'social_shares_count_facebook_max',
                    'social_shares_count_google_plus_min',
                    'social_shares_count_google_plus_max',
                    'social_shares_count_linkedin_min',
                    'social_shares_count_linkedin_max',
                    'social_shares_count_reddit_min',
                    'social_shares_count_reddit_max',
                ]
            },
            root_map={
                'validations': {
                    ('media_images_count_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_count_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_width_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_width_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_height_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_height_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_content_length_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_content_length_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_videos_count_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_videos_count_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('source_links_in_count_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('source_links_in_count_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('source_rankings_alexa_rank_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('source_rankings_alexa_rank_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_facebook_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_facebook_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_google_plus_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_google_plus_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_linkedin_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_linkedin_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_reddit_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_reddit_max',): {

                        'exclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                    ('language',): {
                        'None': None,
                        "EN": "en",
                        "DE": "de",
                        "FR": "fr",
                        "IT": "it",
                        "ES": "es",
                        "PT": "pt"
                    },
                    ('not_language',): {
                        'None': None,
                        "EN": "en",
                        "DE": "de",
                        "FR": "fr",
                        "IT": "it",
                        "ES": "es",
                        "PT": "pt"
                    },
                    ('categories_taxonomy',): {
                        'None': None,
                        "IAB-QAG": "iab-qag",
                        "IPTC-SUBJECTCODE": "iptc-subjectcode"
                    },
                    ('sentiment_title_polarity',): {
                        'None': None,
                        "POSITIVE": "positive",
                        "NEUTRAL": "neutral",
                        "NEGATIVE": "negative"
                    },
                    ('not_sentiment_title_polarity',): {
                        'None': None,
                        "POSITIVE": "positive",
                        "NEUTRAL": "neutral",
                        "NEGATIVE": "negative"
                    },
                    ('sentiment_body_polarity',): {
                        'None': None,
                        "POSITIVE": "positive",
                        "NEUTRAL": "neutral",
                        "NEGATIVE": "negative"
                    },
                    ('not_sentiment_body_polarity',): {
                        'None': None,
                        "POSITIVE": "positive",
                        "NEUTRAL": "neutral",
                        "NEGATIVE": "negative"
                    },
                    ('media_images_format',): {
                        'None': None,
                        "BMP": "BMP",
                        "GIF": "GIF",
                        "JPEG": "JPEG",
                        "PNG": "PNG",
                        "TIFF": "TIFF",
                        "PSD": "PSD",
                        "ICO": "ICO",
                        "CUR": "CUR",
                        "WEBP": "WEBP",
                        "SVG": "SVG"
                    },
                    ('not_media_images_format',): {
                        'None': None,
                        "BMP": "BMP",
                        "GIF": "GIF",
                        "JPEG": "JPEG",
                        "PNG": "PNG",
                        "TIFF": "TIFF",
                        "PSD": "PSD",
                        "ICO": "ICO",
                        "CUR": "CUR",
                        "WEBP": "WEBP",
                        "SVG": "SVG"
                    },
                    ('source_scopes_level',): {
                        'None': None,
                        "INTERNATIONAL": "international",
                        "NATIONAL": "national",
                        "LOCAL": "local"
                    },
                    ('not_source_scopes_level',): {
                        'None': None,
                        "INTERNATIONAL": "international",
                        "NATIONAL": "national",
                        "LOCAL": "local"
                    },
                    ('field',): {
                        'None': None,
                        "SOCIAL_SHARES_COUNT": "social_shares_count",
                        "SOCIAL_SHARES_COUNT.FACEBOOK": "social_shares_count.facebook",
                        "SOCIAL_SHARES_COUNT.LINKEDIN": "social_shares_count.linkedin",
                        "SOCIAL_SHARES_COUNT.REDDIT": "social_shares_count.reddit",
                        "SOCIAL_SHARES_COUNT.GOOGLE_PLUS": "social_shares_count.google_plus",
                        "CHARACTERS_COUNT": "characters_count",
                        "WORDS_COUNT": "words_count",
                        "SENTENCES_COUNT": "sentences_count",
                        "PARAGRAPHS_COUNT": "paragraphs_count",
                        "MEDIA.IMAGES.COUNT": "media.images.count",
                        "MEDIA.VIDEOS.COUNT": "media.videos.count",
                        "SOURCE.LINKS_IN_COUNT": "source.links_in_count",
                        "SOURCE.RANKINGS.ALEXA.RANK": "source.rankings.alexa.rank",
                        "SOURCE.RANKINGS.ALEXA.RANK.AF": "source.rankings.alexa.rank.AF",
                        "SOURCE.RANKINGS.ALEXA.RANK.AX": "source.rankings.alexa.rank.AX",
                        "SOURCE.RANKINGS.ALEXA.RANK.AL": "source.rankings.alexa.rank.AL",
                        "SOURCE.RANKINGS.ALEXA.RANK.DZ": "source.rankings.alexa.rank.DZ",
                        "SOURCE.RANKINGS.ALEXA.RANK.AS": "source.rankings.alexa.rank.AS",
                        "SOURCE.RANKINGS.ALEXA.RANK.AD": "source.rankings.alexa.rank.AD",
                        "SOURCE.RANKINGS.ALEXA.RANK.AO": "source.rankings.alexa.rank.AO",
                        "SOURCE.RANKINGS.ALEXA.RANK.AI": "source.rankings.alexa.rank.AI",
                        "SOURCE.RANKINGS.ALEXA.RANK.AQ": "source.rankings.alexa.rank.AQ",
                        "SOURCE.RANKINGS.ALEXA.RANK.AG": "source.rankings.alexa.rank.AG",
                        "SOURCE.RANKINGS.ALEXA.RANK.AR": "source.rankings.alexa.rank.AR",
                        "SOURCE.RANKINGS.ALEXA.RANK.AM": "source.rankings.alexa.rank.AM",
                        "SOURCE.RANKINGS.ALEXA.RANK.AW": "source.rankings.alexa.rank.AW",
                        "SOURCE.RANKINGS.ALEXA.RANK.AU": "source.rankings.alexa.rank.AU",
                        "SOURCE.RANKINGS.ALEXA.RANK.AT": "source.rankings.alexa.rank.AT",
                        "SOURCE.RANKINGS.ALEXA.RANK.AZ": "source.rankings.alexa.rank.AZ",
                        "SOURCE.RANKINGS.ALEXA.RANK.BS": "source.rankings.alexa.rank.BS",
                        "SOURCE.RANKINGS.ALEXA.RANK.BH": "source.rankings.alexa.rank.BH",
                        "SOURCE.RANKINGS.ALEXA.RANK.BD": "source.rankings.alexa.rank.BD",
                        "SOURCE.RANKINGS.ALEXA.RANK.BB": "source.rankings.alexa.rank.BB",
                        "SOURCE.RANKINGS.ALEXA.RANK.BY": "source.rankings.alexa.rank.BY",
                        "SOURCE.RANKINGS.ALEXA.RANK.BE": "source.rankings.alexa.rank.BE",
                        "SOURCE.RANKINGS.ALEXA.RANK.BZ": "source.rankings.alexa.rank.BZ",
                        "SOURCE.RANKINGS.ALEXA.RANK.BJ": "source.rankings.alexa.rank.BJ",
                        "SOURCE.RANKINGS.ALEXA.RANK.BM": "source.rankings.alexa.rank.BM",
                        "SOURCE.RANKINGS.ALEXA.RANK.BT": "source.rankings.alexa.rank.BT",
                        "SOURCE.RANKINGS.ALEXA.RANK.BO": "source.rankings.alexa.rank.BO",
                        "SOURCE.RANKINGS.ALEXA.RANK.BQ": "source.rankings.alexa.rank.BQ",
                        "SOURCE.RANKINGS.ALEXA.RANK.BA": "source.rankings.alexa.rank.BA",
                        "SOURCE.RANKINGS.ALEXA.RANK.BW": "source.rankings.alexa.rank.BW",
                        "SOURCE.RANKINGS.ALEXA.RANK.BV": "source.rankings.alexa.rank.BV",
                        "SOURCE.RANKINGS.ALEXA.RANK.BR": "source.rankings.alexa.rank.BR",
                        "SOURCE.RANKINGS.ALEXA.RANK.IO": "source.rankings.alexa.rank.IO",
                        "SOURCE.RANKINGS.ALEXA.RANK.BN": "source.rankings.alexa.rank.BN",
                        "SOURCE.RANKINGS.ALEXA.RANK.BG": "source.rankings.alexa.rank.BG",
                        "SOURCE.RANKINGS.ALEXA.RANK.BF": "source.rankings.alexa.rank.BF",
                        "SOURCE.RANKINGS.ALEXA.RANK.BI": "source.rankings.alexa.rank.BI",
                        "SOURCE.RANKINGS.ALEXA.RANK.KH": "source.rankings.alexa.rank.KH",
                        "SOURCE.RANKINGS.ALEXA.RANK.CM": "source.rankings.alexa.rank.CM",
                        "SOURCE.RANKINGS.ALEXA.RANK.CA": "source.rankings.alexa.rank.CA",
                        "SOURCE.RANKINGS.ALEXA.RANK.CV": "source.rankings.alexa.rank.CV",
                        "SOURCE.RANKINGS.ALEXA.RANK.KY": "source.rankings.alexa.rank.KY",
                        "SOURCE.RANKINGS.ALEXA.RANK.CF": "source.rankings.alexa.rank.CF",
                        "SOURCE.RANKINGS.ALEXA.RANK.TD": "source.rankings.alexa.rank.TD",
                        "SOURCE.RANKINGS.ALEXA.RANK.CL": "source.rankings.alexa.rank.CL",
                        "SOURCE.RANKINGS.ALEXA.RANK.CN": "source.rankings.alexa.rank.CN",
                        "SOURCE.RANKINGS.ALEXA.RANK.CX": "source.rankings.alexa.rank.CX",
                        "SOURCE.RANKINGS.ALEXA.RANK.CC": "source.rankings.alexa.rank.CC",
                        "SOURCE.RANKINGS.ALEXA.RANK.CO": "source.rankings.alexa.rank.CO",
                        "SOURCE.RANKINGS.ALEXA.RANK.KM": "source.rankings.alexa.rank.KM",
                        "SOURCE.RANKINGS.ALEXA.RANK.CG": "source.rankings.alexa.rank.CG",
                        "SOURCE.RANKINGS.ALEXA.RANK.CD": "source.rankings.alexa.rank.CD",
                        "SOURCE.RANKINGS.ALEXA.RANK.CK": "source.rankings.alexa.rank.CK",
                        "SOURCE.RANKINGS.ALEXA.RANK.CR": "source.rankings.alexa.rank.CR",
                        "SOURCE.RANKINGS.ALEXA.RANK.CI": "source.rankings.alexa.rank.CI",
                        "SOURCE.RANKINGS.ALEXA.RANK.HR": "source.rankings.alexa.rank.HR",
                        "SOURCE.RANKINGS.ALEXA.RANK.CU": "source.rankings.alexa.rank.CU",
                        "SOURCE.RANKINGS.ALEXA.RANK.CW": "source.rankings.alexa.rank.CW",
                        "SOURCE.RANKINGS.ALEXA.RANK.CY": "source.rankings.alexa.rank.CY",
                        "SOURCE.RANKINGS.ALEXA.RANK.CZ": "source.rankings.alexa.rank.CZ",
                        "SOURCE.RANKINGS.ALEXA.RANK.DK": "source.rankings.alexa.rank.DK",
                        "SOURCE.RANKINGS.ALEXA.RANK.DJ": "source.rankings.alexa.rank.DJ",
                        "SOURCE.RANKINGS.ALEXA.RANK.DM": "source.rankings.alexa.rank.DM",
                        "SOURCE.RANKINGS.ALEXA.RANK.DO": "source.rankings.alexa.rank.DO",
                        "SOURCE.RANKINGS.ALEXA.RANK.EC": "source.rankings.alexa.rank.EC",
                        "SOURCE.RANKINGS.ALEXA.RANK.EG": "source.rankings.alexa.rank.EG",
                        "SOURCE.RANKINGS.ALEXA.RANK.SV": "source.rankings.alexa.rank.SV",
                        "SOURCE.RANKINGS.ALEXA.RANK.GQ": "source.rankings.alexa.rank.GQ",
                        "SOURCE.RANKINGS.ALEXA.RANK.ER": "source.rankings.alexa.rank.ER",
                        "SOURCE.RANKINGS.ALEXA.RANK.EE": "source.rankings.alexa.rank.EE",
                        "SOURCE.RANKINGS.ALEXA.RANK.ET": "source.rankings.alexa.rank.ET",
                        "SOURCE.RANKINGS.ALEXA.RANK.FK": "source.rankings.alexa.rank.FK",
                        "SOURCE.RANKINGS.ALEXA.RANK.FO": "source.rankings.alexa.rank.FO",
                        "SOURCE.RANKINGS.ALEXA.RANK.FJ": "source.rankings.alexa.rank.FJ",
                        "SOURCE.RANKINGS.ALEXA.RANK.FI": "source.rankings.alexa.rank.FI",
                        "SOURCE.RANKINGS.ALEXA.RANK.FR": "source.rankings.alexa.rank.FR",
                        "SOURCE.RANKINGS.ALEXA.RANK.GF": "source.rankings.alexa.rank.GF",
                        "SOURCE.RANKINGS.ALEXA.RANK.PF": "source.rankings.alexa.rank.PF",
                        "SOURCE.RANKINGS.ALEXA.RANK.TF": "source.rankings.alexa.rank.TF",
                        "SOURCE.RANKINGS.ALEXA.RANK.GA": "source.rankings.alexa.rank.GA",
                        "SOURCE.RANKINGS.ALEXA.RANK.GM": "source.rankings.alexa.rank.GM",
                        "SOURCE.RANKINGS.ALEXA.RANK.GE": "source.rankings.alexa.rank.GE",
                        "SOURCE.RANKINGS.ALEXA.RANK.DE": "source.rankings.alexa.rank.DE",
                        "SOURCE.RANKINGS.ALEXA.RANK.GH": "source.rankings.alexa.rank.GH",
                        "SOURCE.RANKINGS.ALEXA.RANK.GI": "source.rankings.alexa.rank.GI",
                        "SOURCE.RANKINGS.ALEXA.RANK.GR": "source.rankings.alexa.rank.GR",
                        "SOURCE.RANKINGS.ALEXA.RANK.GL": "source.rankings.alexa.rank.GL",
                        "SOURCE.RANKINGS.ALEXA.RANK.GD": "source.rankings.alexa.rank.GD",
                        "SOURCE.RANKINGS.ALEXA.RANK.GP": "source.rankings.alexa.rank.GP",
                        "SOURCE.RANKINGS.ALEXA.RANK.GU": "source.rankings.alexa.rank.GU",
                        "SOURCE.RANKINGS.ALEXA.RANK.GT": "source.rankings.alexa.rank.GT",
                        "SOURCE.RANKINGS.ALEXA.RANK.GG": "source.rankings.alexa.rank.GG",
                        "SOURCE.RANKINGS.ALEXA.RANK.GN": "source.rankings.alexa.rank.GN",
                        "SOURCE.RANKINGS.ALEXA.RANK.GW": "source.rankings.alexa.rank.GW",
                        "SOURCE.RANKINGS.ALEXA.RANK.GY": "source.rankings.alexa.rank.GY",
                        "SOURCE.RANKINGS.ALEXA.RANK.HT": "source.rankings.alexa.rank.HT",
                        "SOURCE.RANKINGS.ALEXA.RANK.HM": "source.rankings.alexa.rank.HM",
                        "SOURCE.RANKINGS.ALEXA.RANK.VA": "source.rankings.alexa.rank.VA",
                        "SOURCE.RANKINGS.ALEXA.RANK.HN": "source.rankings.alexa.rank.HN",
                        "SOURCE.RANKINGS.ALEXA.RANK.HK": "source.rankings.alexa.rank.HK",
                        "SOURCE.RANKINGS.ALEXA.RANK.HU": "source.rankings.alexa.rank.HU",
                        "SOURCE.RANKINGS.ALEXA.RANK.IS": "source.rankings.alexa.rank.IS",
                        "SOURCE.RANKINGS.ALEXA.RANK.IN": "source.rankings.alexa.rank.IN",
                        "SOURCE.RANKINGS.ALEXA.RANK.ID": "source.rankings.alexa.rank.ID",
                        "SOURCE.RANKINGS.ALEXA.RANK.IR": "source.rankings.alexa.rank.IR",
                        "SOURCE.RANKINGS.ALEXA.RANK.IQ": "source.rankings.alexa.rank.IQ",
                        "SOURCE.RANKINGS.ALEXA.RANK.IE": "source.rankings.alexa.rank.IE",
                        "SOURCE.RANKINGS.ALEXA.RANK.IM": "source.rankings.alexa.rank.IM",
                        "SOURCE.RANKINGS.ALEXA.RANK.IL": "source.rankings.alexa.rank.IL",
                        "SOURCE.RANKINGS.ALEXA.RANK.IT": "source.rankings.alexa.rank.IT",
                        "SOURCE.RANKINGS.ALEXA.RANK.JM": "source.rankings.alexa.rank.JM",
                        "SOURCE.RANKINGS.ALEXA.RANK.JP": "source.rankings.alexa.rank.JP",
                        "SOURCE.RANKINGS.ALEXA.RANK.JE": "source.rankings.alexa.rank.JE",
                        "SOURCE.RANKINGS.ALEXA.RANK.JO": "source.rankings.alexa.rank.JO",
                        "SOURCE.RANKINGS.ALEXA.RANK.KZ": "source.rankings.alexa.rank.KZ",
                        "SOURCE.RANKINGS.ALEXA.RANK.KE": "source.rankings.alexa.rank.KE",
                        "SOURCE.RANKINGS.ALEXA.RANK.KI": "source.rankings.alexa.rank.KI",
                        "SOURCE.RANKINGS.ALEXA.RANK.KP": "source.rankings.alexa.rank.KP",
                        "SOURCE.RANKINGS.ALEXA.RANK.KR": "source.rankings.alexa.rank.KR",
                        "SOURCE.RANKINGS.ALEXA.RANK.KW": "source.rankings.alexa.rank.KW",
                        "SOURCE.RANKINGS.ALEXA.RANK.KG": "source.rankings.alexa.rank.KG",
                        "SOURCE.RANKINGS.ALEXA.RANK.LA": "source.rankings.alexa.rank.LA",
                        "SOURCE.RANKINGS.ALEXA.RANK.LV": "source.rankings.alexa.rank.LV",
                        "SOURCE.RANKINGS.ALEXA.RANK.LB": "source.rankings.alexa.rank.LB",
                        "SOURCE.RANKINGS.ALEXA.RANK.LS": "source.rankings.alexa.rank.LS",
                        "SOURCE.RANKINGS.ALEXA.RANK.LR": "source.rankings.alexa.rank.LR",
                        "SOURCE.RANKINGS.ALEXA.RANK.LY": "source.rankings.alexa.rank.LY",
                        "SOURCE.RANKINGS.ALEXA.RANK.LI": "source.rankings.alexa.rank.LI",
                        "SOURCE.RANKINGS.ALEXA.RANK.LT": "source.rankings.alexa.rank.LT",
                        "SOURCE.RANKINGS.ALEXA.RANK.LU": "source.rankings.alexa.rank.LU",
                        "SOURCE.RANKINGS.ALEXA.RANK.MO": "source.rankings.alexa.rank.MO",
                        "SOURCE.RANKINGS.ALEXA.RANK.MK": "source.rankings.alexa.rank.MK",
                        "SOURCE.RANKINGS.ALEXA.RANK.MG": "source.rankings.alexa.rank.MG",
                        "SOURCE.RANKINGS.ALEXA.RANK.MW": "source.rankings.alexa.rank.MW",
                        "SOURCE.RANKINGS.ALEXA.RANK.MY": "source.rankings.alexa.rank.MY",
                        "SOURCE.RANKINGS.ALEXA.RANK.MV": "source.rankings.alexa.rank.MV",
                        "SOURCE.RANKINGS.ALEXA.RANK.ML": "source.rankings.alexa.rank.ML",
                        "SOURCE.RANKINGS.ALEXA.RANK.MT": "source.rankings.alexa.rank.MT",
                        "SOURCE.RANKINGS.ALEXA.RANK.MH": "source.rankings.alexa.rank.MH",
                        "SOURCE.RANKINGS.ALEXA.RANK.MQ": "source.rankings.alexa.rank.MQ",
                        "SOURCE.RANKINGS.ALEXA.RANK.MR": "source.rankings.alexa.rank.MR",
                        "SOURCE.RANKINGS.ALEXA.RANK.MU": "source.rankings.alexa.rank.MU",
                        "SOURCE.RANKINGS.ALEXA.RANK.YT": "source.rankings.alexa.rank.YT",
                        "SOURCE.RANKINGS.ALEXA.RANK.MX": "source.rankings.alexa.rank.MX",
                        "SOURCE.RANKINGS.ALEXA.RANK.FM": "source.rankings.alexa.rank.FM",
                        "SOURCE.RANKINGS.ALEXA.RANK.MD": "source.rankings.alexa.rank.MD",
                        "SOURCE.RANKINGS.ALEXA.RANK.MC": "source.rankings.alexa.rank.MC",
                        "SOURCE.RANKINGS.ALEXA.RANK.MN": "source.rankings.alexa.rank.MN",
                        "SOURCE.RANKINGS.ALEXA.RANK.ME": "source.rankings.alexa.rank.ME",
                        "SOURCE.RANKINGS.ALEXA.RANK.MS": "source.rankings.alexa.rank.MS",
                        "SOURCE.RANKINGS.ALEXA.RANK.MA": "source.rankings.alexa.rank.MA",
                        "SOURCE.RANKINGS.ALEXA.RANK.MZ": "source.rankings.alexa.rank.MZ",
                        "SOURCE.RANKINGS.ALEXA.RANK.MM": "source.rankings.alexa.rank.MM",
                        "SOURCE.RANKINGS.ALEXA.RANK.NA": "source.rankings.alexa.rank.NA",
                        "SOURCE.RANKINGS.ALEXA.RANK.NR": "source.rankings.alexa.rank.NR",
                        "SOURCE.RANKINGS.ALEXA.RANK.NP": "source.rankings.alexa.rank.NP",
                        "SOURCE.RANKINGS.ALEXA.RANK.NL": "source.rankings.alexa.rank.NL",
                        "SOURCE.RANKINGS.ALEXA.RANK.NC": "source.rankings.alexa.rank.NC",
                        "SOURCE.RANKINGS.ALEXA.RANK.NZ": "source.rankings.alexa.rank.NZ",
                        "SOURCE.RANKINGS.ALEXA.RANK.NI": "source.rankings.alexa.rank.NI",
                        "SOURCE.RANKINGS.ALEXA.RANK.NE": "source.rankings.alexa.rank.NE",
                        "SOURCE.RANKINGS.ALEXA.RANK.NG": "source.rankings.alexa.rank.NG",
                        "SOURCE.RANKINGS.ALEXA.RANK.NU": "source.rankings.alexa.rank.NU",
                        "SOURCE.RANKINGS.ALEXA.RANK.NF": "source.rankings.alexa.rank.NF",
                        "SOURCE.RANKINGS.ALEXA.RANK.MP": "source.rankings.alexa.rank.MP",
                        "SOURCE.RANKINGS.ALEXA.RANK.NO": "source.rankings.alexa.rank.NO",
                        "SOURCE.RANKINGS.ALEXA.RANK.OM": "source.rankings.alexa.rank.OM",
                        "SOURCE.RANKINGS.ALEXA.RANK.PK": "source.rankings.alexa.rank.PK",
                        "SOURCE.RANKINGS.ALEXA.RANK.PW": "source.rankings.alexa.rank.PW",
                        "SOURCE.RANKINGS.ALEXA.RANK.PS": "source.rankings.alexa.rank.PS",
                        "SOURCE.RANKINGS.ALEXA.RANK.PA": "source.rankings.alexa.rank.PA",
                        "SOURCE.RANKINGS.ALEXA.RANK.PG": "source.rankings.alexa.rank.PG",
                        "SOURCE.RANKINGS.ALEXA.RANK.PY": "source.rankings.alexa.rank.PY",
                        "SOURCE.RANKINGS.ALEXA.RANK.PE": "source.rankings.alexa.rank.PE",
                        "SOURCE.RANKINGS.ALEXA.RANK.PH": "source.rankings.alexa.rank.PH",
                        "SOURCE.RANKINGS.ALEXA.RANK.PN": "source.rankings.alexa.rank.PN",
                        "SOURCE.RANKINGS.ALEXA.RANK.PL": "source.rankings.alexa.rank.PL",
                        "SOURCE.RANKINGS.ALEXA.RANK.PT": "source.rankings.alexa.rank.PT",
                        "SOURCE.RANKINGS.ALEXA.RANK.PR": "source.rankings.alexa.rank.PR",
                        "SOURCE.RANKINGS.ALEXA.RANK.QA": "source.rankings.alexa.rank.QA",
                        "SOURCE.RANKINGS.ALEXA.RANK.RE": "source.rankings.alexa.rank.RE",
                        "SOURCE.RANKINGS.ALEXA.RANK.RO": "source.rankings.alexa.rank.RO",
                        "SOURCE.RANKINGS.ALEXA.RANK.RU": "source.rankings.alexa.rank.RU",
                        "SOURCE.RANKINGS.ALEXA.RANK.RW": "source.rankings.alexa.rank.RW",
                        "SOURCE.RANKINGS.ALEXA.RANK.BL": "source.rankings.alexa.rank.BL",
                        "SOURCE.RANKINGS.ALEXA.RANK.SH": "source.rankings.alexa.rank.SH",
                        "SOURCE.RANKINGS.ALEXA.RANK.KN": "source.rankings.alexa.rank.KN",
                        "SOURCE.RANKINGS.ALEXA.RANK.LC": "source.rankings.alexa.rank.LC",
                        "SOURCE.RANKINGS.ALEXA.RANK.MF": "source.rankings.alexa.rank.MF",
                        "SOURCE.RANKINGS.ALEXA.RANK.PM": "source.rankings.alexa.rank.PM",
                        "SOURCE.RANKINGS.ALEXA.RANK.VC": "source.rankings.alexa.rank.VC",
                        "SOURCE.RANKINGS.ALEXA.RANK.WS": "source.rankings.alexa.rank.WS",
                        "SOURCE.RANKINGS.ALEXA.RANK.SM": "source.rankings.alexa.rank.SM",
                        "SOURCE.RANKINGS.ALEXA.RANK.ST": "source.rankings.alexa.rank.ST",
                        "SOURCE.RANKINGS.ALEXA.RANK.SA": "source.rankings.alexa.rank.SA",
                        "SOURCE.RANKINGS.ALEXA.RANK.SN": "source.rankings.alexa.rank.SN",
                        "SOURCE.RANKINGS.ALEXA.RANK.RS": "source.rankings.alexa.rank.RS",
                        "SOURCE.RANKINGS.ALEXA.RANK.SC": "source.rankings.alexa.rank.SC",
                        "SOURCE.RANKINGS.ALEXA.RANK.SL": "source.rankings.alexa.rank.SL",
                        "SOURCE.RANKINGS.ALEXA.RANK.SG": "source.rankings.alexa.rank.SG",
                        "SOURCE.RANKINGS.ALEXA.RANK.SX": "source.rankings.alexa.rank.SX",
                        "SOURCE.RANKINGS.ALEXA.RANK.SK": "source.rankings.alexa.rank.SK",
                        "SOURCE.RANKINGS.ALEXA.RANK.SI": "source.rankings.alexa.rank.SI",
                        "SOURCE.RANKINGS.ALEXA.RANK.SB": "source.rankings.alexa.rank.SB",
                        "SOURCE.RANKINGS.ALEXA.RANK.SO": "source.rankings.alexa.rank.SO",
                        "SOURCE.RANKINGS.ALEXA.RANK.ZA": "source.rankings.alexa.rank.ZA",
                        "SOURCE.RANKINGS.ALEXA.RANK.GS": "source.rankings.alexa.rank.GS",
                        "SOURCE.RANKINGS.ALEXA.RANK.SS": "source.rankings.alexa.rank.SS",
                        "SOURCE.RANKINGS.ALEXA.RANK.ES": "source.rankings.alexa.rank.ES",
                        "SOURCE.RANKINGS.ALEXA.RANK.LK": "source.rankings.alexa.rank.LK",
                        "SOURCE.RANKINGS.ALEXA.RANK.SD": "source.rankings.alexa.rank.SD",
                        "SOURCE.RANKINGS.ALEXA.RANK.SR": "source.rankings.alexa.rank.SR",
                        "SOURCE.RANKINGS.ALEXA.RANK.SJ": "source.rankings.alexa.rank.SJ",
                        "SOURCE.RANKINGS.ALEXA.RANK.SZ": "source.rankings.alexa.rank.SZ",
                        "SOURCE.RANKINGS.ALEXA.RANK.SE": "source.rankings.alexa.rank.SE",
                        "SOURCE.RANKINGS.ALEXA.RANK.CH": "source.rankings.alexa.rank.CH",
                        "SOURCE.RANKINGS.ALEXA.RANK.SY": "source.rankings.alexa.rank.SY",
                        "SOURCE.RANKINGS.ALEXA.RANK.TW": "source.rankings.alexa.rank.TW",
                        "SOURCE.RANKINGS.ALEXA.RANK.TJ": "source.rankings.alexa.rank.TJ",
                        "SOURCE.RANKINGS.ALEXA.RANK.TZ": "source.rankings.alexa.rank.TZ",
                        "SOURCE.RANKINGS.ALEXA.RANK.TH": "source.rankings.alexa.rank.TH",
                        "SOURCE.RANKINGS.ALEXA.RANK.TL": "source.rankings.alexa.rank.TL",
                        "SOURCE.RANKINGS.ALEXA.RANK.TG": "source.rankings.alexa.rank.TG",
                        "SOURCE.RANKINGS.ALEXA.RANK.TK": "source.rankings.alexa.rank.TK",
                        "SOURCE.RANKINGS.ALEXA.RANK.TO": "source.rankings.alexa.rank.TO",
                        "SOURCE.RANKINGS.ALEXA.RANK.TT": "source.rankings.alexa.rank.TT",
                        "SOURCE.RANKINGS.ALEXA.RANK.TN": "source.rankings.alexa.rank.TN",
                        "SOURCE.RANKINGS.ALEXA.RANK.TR": "source.rankings.alexa.rank.TR",
                        "SOURCE.RANKINGS.ALEXA.RANK.TM": "source.rankings.alexa.rank.TM",
                        "SOURCE.RANKINGS.ALEXA.RANK.TC": "source.rankings.alexa.rank.TC",
                        "SOURCE.RANKINGS.ALEXA.RANK.TV": "source.rankings.alexa.rank.TV",
                        "SOURCE.RANKINGS.ALEXA.RANK.UG": "source.rankings.alexa.rank.UG",
                        "SOURCE.RANKINGS.ALEXA.RANK.UA": "source.rankings.alexa.rank.UA",
                        "SOURCE.RANKINGS.ALEXA.RANK.AE": "source.rankings.alexa.rank.AE",
                        "SOURCE.RANKINGS.ALEXA.RANK.GB": "source.rankings.alexa.rank.GB",
                        "SOURCE.RANKINGS.ALEXA.RANK.US": "source.rankings.alexa.rank.US",
                        "SOURCE.RANKINGS.ALEXA.RANK.UM": "source.rankings.alexa.rank.UM",
                        "SOURCE.RANKINGS.ALEXA.RANK.UY": "source.rankings.alexa.rank.UY",
                        "SOURCE.RANKINGS.ALEXA.RANK.UZ": "source.rankings.alexa.rank.UZ",
                        "SOURCE.RANKINGS.ALEXA.RANK.VU": "source.rankings.alexa.rank.VU",
                        "SOURCE.RANKINGS.ALEXA.RANK.VE": "source.rankings.alexa.rank.VE",
                        "SOURCE.RANKINGS.ALEXA.RANK.VN": "source.rankings.alexa.rank.VN",
                        "SOURCE.RANKINGS.ALEXA.RANK.VG": "source.rankings.alexa.rank.VG",
                        "SOURCE.RANKINGS.ALEXA.RANK.VI": "source.rankings.alexa.rank.VI",
                        "SOURCE.RANKINGS.ALEXA.RANK.WF": "source.rankings.alexa.rank.WF",
                        "SOURCE.RANKINGS.ALEXA.RANK.EH": "source.rankings.alexa.rank.EH",
                        "SOURCE.RANKINGS.ALEXA.RANK.YE": "source.rankings.alexa.rank.YE",
                        "SOURCE.RANKINGS.ALEXA.RANK.ZM": "source.rankings.alexa.rank.ZM",
                        "SOURCE.RANKINGS.ALEXA.RANK.ZW": "source.rankings.alexa.rank.ZW"
                    },
                },
                'openapi_types': {
                    'id':
                        ([int], none_type,),
                    'not_id':
                        ([int], none_type,),
                    'title':
                        (str, none_type,),
                    'body':
                        (str, none_type,),
                    'text':
                        (str, none_type,),
                    'translations_en_title':
                        (str, none_type,),
                    'translations_en_body':
                        (str, none_type,),
                    'translations_en_text':
                        (str, none_type,),
                    'links_permalink':
                        ([str], none_type,),
                    'not_links_permalink':
                        ([str], none_type,),
                    'language':
                        ([str], none_type,),
                    'not_language':
                        ([str], none_type,),
                    'published_at_start':
                        (str, none_type,),
                    'published_at_end':
                        (str, none_type,),
                    'categories_taxonomy':
                        (str, none_type,),
                    'categories_confident':
                        (bool, none_type,),
                    'categories_id':
                        ([str], none_type,),
                    'not_categories_id':
                        ([str], none_type,),
                    'categories_label':
                        ([str], none_type,),
                    'not_categories_label':
                        ([str], none_type,),
                    'categories_level':
                        ([int], none_type,),
                    'not_categories_level':
                        ([int], none_type,),
                    'entities_id':
                        ([str], none_type,),
                    'not_entities_id':
                        ([str], none_type,),
                    'entities_links_wikipedia':
                        ([str], none_type,),
                    'not_entities_links_wikipedia':
                        ([str], none_type,),
                    'entities_links_wikidata':
                        ([str], none_type,),
                    'not_entities_links_wikidata':
                        ([str], none_type,),
                    'entities_types':
                        ([str], none_type,),
                    'not_entities_types':
                        ([str], none_type,),
                    'entities_stock_tickers':
                        ([str], none_type,),
                    'entities_body_stock_tickers':
                        ([str], none_type,),
                    'entities_body_surface_forms_text':
                        ([str], none_type,),
                    'entities_surface_forms_text':
                        ([str], none_type,),
                    'entities_title_id':
                        ([str], none_type,),
                    'not_entities_title_id':
                        ([str], none_type,),
                    'entities_title_surface_forms_text':
                        (str, none_type,),
                    'not_entities_title_surface_forms_text':
                        ([str], none_type,),
                    'entities_title_text':
                        ([str], none_type,),
                    'not_entities_title_text':
                        ([str], none_type,),
                    'entities_title_type':
                        ([str], none_type,),
                    'not_entities_title_type':
                        ([str], none_type,),
                    'entities_title_stock_ticker':
                        ([str], none_type,),
                    'not_entities_title_stock_ticker':
                        ([str], none_type,),
                    'entities_title_links_dbpedia':
                        ([str], none_type,),
                    'not_entities_title_links_dbpedia':
                        ([str], none_type,),
                    'entities_title_links_wikipedia':
                        ([str], none_type,),
                    'not_entities_title_links_wikipedia':
                        ([str], none_type,),
                    'entities_title_links_wikidata':
                        ([str], none_type,),
                    'not_entities_title_links_wikidata':
                        ([str], none_type,),
                    'entities_body_id':
                        ([str], none_type,),
                    'not_entities_body_id':
                        ([str], none_type,),
                    'not_entities_body_surface_forms_text':
                        ([str], none_type,),
                    'entities_body_text':
                        ([str], none_type,),
                    'not_entities_body_text':
                        ([str], none_type,),
                    'entities_body_type':
                        ([str], none_type,),
                    'not_entities_body_type':
                        ([str], none_type,),
                    'entities_body_stock_ticker':
                        ([str], none_type,),
                    'not_entities_body_stock_ticker':
                        ([str], none_type,),
                    'entities_body_links_dbpedia':
                        ([str], none_type,),
                    'not_entities_body_links_dbpedia':
                        ([str], none_type,),
                    'entities_body_links_wikipedia':
                        ([str], none_type,),
                    'not_entities_body_links_wikipedia':
                        ([str], none_type,),
                    'entities_body_links_wikidata':
                        ([str], none_type,),
                    'not_entities_body_links_wikidata':
                        ([str], none_type,),
                    'sentiment_title_polarity':
                        (str, none_type,),
                    'not_sentiment_title_polarity':
                        (str, none_type,),
                    'sentiment_body_polarity':
                        (str, none_type,),
                    'not_sentiment_body_polarity':
                        (str, none_type,),
                    'media_images_count_min':
                        (int, none_type,),
                    'media_images_count_max':
                        (int, none_type,),
                    'media_images_width_min':
                        (int, none_type,),
                    'media_images_width_max':
                        (int, none_type,),
                    'media_images_height_min':
                        (int, none_type,),
                    'media_images_height_max':
                        (int, none_type,),
                    'media_images_content_length_min':
                        (int, none_type,),
                    'media_images_content_length_max':
                        (int, none_type,),
                    'media_images_format':
                        ([str], none_type,),
                    'not_media_images_format':
                        ([str], none_type,),
                    'media_videos_count_min':
                        (int, none_type,),
                    'media_videos_count_max':
                        (int, none_type,),
                    'author_id':
                        ([int], none_type,),
                    'not_author_id':
                        ([int], none_type,),
                    'author_name':
                        (str, none_type,),
                    'not_author_name':
                        (str, none_type,),
                    'source_id':
                        ([int], none_type,),
                    'not_source_id':
                        ([int], none_type,),
                    'source_name':
                        ([str], none_type,),
                    'not_source_name':
                        ([str], none_type,),
                    'source_domain':
                        ([str], none_type,),
                    'not_source_domain':
                        ([str], none_type,),
                    'source_locations_country':
                        ([str], none_type,),
                    'not_source_locations_country':
                        ([str], none_type,),
                    'source_locations_state':
                        ([str], none_type,),
                    'not_source_locations_state':
                        ([str], none_type,),
                    'source_locations_city':
                        ([str], none_type,),
                    'not_source_locations_city':
                        ([str], none_type,),
                    'source_scopes_country':
                        ([str], none_type,),
                    'not_source_scopes_country':
                        ([str], none_type,),
                    'source_scopes_state':
                        ([str], none_type,),
                    'not_source_scopes_state':
                        ([str], none_type,),
                    'source_scopes_city':
                        ([str], none_type,),
                    'not_source_scopes_city':
                        ([str], none_type,),
                    'source_scopes_level':
                        ([str], none_type,),
                    'not_source_scopes_level':
                        ([str], none_type,),
                    'source_links_in_count_min':
                        (int, none_type,),
                    'source_links_in_count_max':
                        (int, none_type,),
                    'source_rankings_alexa_rank_min':
                        (int, none_type,),
                    'source_rankings_alexa_rank_max':
                        (int, none_type,),
                    'source_rankings_alexa_country':
                        ([str], none_type,),
                    'social_shares_count_facebook_min':
                        (int, none_type,),
                    'social_shares_count_facebook_max':
                        (int, none_type,),
                    'social_shares_count_google_plus_min':
                        (int, none_type,),
                    'social_shares_count_google_plus_max':
                        (int, none_type,),
                    'social_shares_count_linkedin_min':
                        (int, none_type,),
                    'social_shares_count_linkedin_max':
                        (int, none_type,),
                    'social_shares_count_reddit_min':
                        (int, none_type,),
                    'social_shares_count_reddit_max':
                        (int, none_type,),
                    'clusters':
                        ([str], none_type,),
                    'aql':
                        (str, none_type,),
                    'aql_default_field':
                        (str, none_type,),
                    'query':
                        (str, none_type,),
                    'interval_start':
                        (int, none_type,),
                    'interval_end':
                        (int, none_type,),
                    'interval_width':
                        (int, none_type,),
                    'field':
                        (str, none_type,),
                },
                'attribute_map': {
                    'id': 'id[]',
                    'not_id': '!id[]',
                    'title': 'title',
                    'body': 'body',
                    'text': 'text',
                    'translations_en_title': 'translations.en.title',
                    'translations_en_body': 'translations.en.body',
                    'translations_en_text': 'translations.en.text',
                    'links_permalink': 'links.permalink[]',
                    'not_links_permalink': '!links.permalink[]',
                    'language': 'language[]',
                    'not_language': '!language[]',
                    'published_at_start': 'published_at.start',
                    'published_at_end': 'published_at.end',
                    'categories_taxonomy': 'categories.taxonomy',
                    'categories_confident': 'categories.confident',
                    'categories_id': 'categories.id[]',
                    'not_categories_id': '!categories.id[]',
                    'categories_label': 'categories.label[]',
                    'not_categories_label': '!categories.label[]',
                    'categories_level': 'categories.level[]',
                    'not_categories_level': '!categories.level[]',
                    'entities_id': 'entities.id[]',
                    'not_entities_id': '!entities.id[]',
                    'entities_links_wikipedia': 'entities.links.wikipedia[]',
                    'not_entities_links_wikipedia': '!entities.links.wikipedia[]',
                    'entities_links_wikidata': 'entities.links.wikidata[]',
                    'not_entities_links_wikidata': '!entities.links.wikidata[]',
                    'entities_types': 'entities.types[]',
                    'not_entities_types': '!entities.types[]',
                    'entities_stock_tickers': 'entities.stock_tickers[]',
                    'entities_body_stock_tickers': '!entities.body.stock_tickers[]',
                    'entities_body_surface_forms_text': 'entities.body.surface_forms.text[]',
                    'entities_surface_forms_text': '!entities.surface_forms.text[]',
                    'entities_title_id': 'entities.title.id[]',
                    'not_entities_title_id': '!entities.title.id[]',
                    'entities_title_surface_forms_text': 'entities.title.surface_forms.text[]',
                    'not_entities_title_surface_forms_text': '!entities.title.surface_forms.text[]',
                    'entities_title_text': 'entities.title.text[]',
                    'not_entities_title_text': '!entities.title.text[]',
                    'entities_title_type': 'entities.title.type[]',
                    'not_entities_title_type': '!entities.title.type[]',
                    'entities_title_stock_ticker': 'entities.title.stock_ticker[]',
                    'not_entities_title_stock_ticker': '!entities.title.stock_ticker[]',
                    'entities_title_links_dbpedia': 'entities.title.links.dbpedia[]',
                    'not_entities_title_links_dbpedia': '!entities.title.links.dbpedia[]',
                    'entities_title_links_wikipedia': 'entities.title.links.wikipedia[]',
                    'not_entities_title_links_wikipedia': '!entities.title.links.wikipedia[]',
                    'entities_title_links_wikidata': 'entities.title.links.wikidata[]',
                    'not_entities_title_links_wikidata': '!entities.title.links.wikidata[]',
                    'entities_body_id': 'entities.body.id[]',
                    'not_entities_body_id': '!entities.body.id[]',
                    'not_entities_body_surface_forms_text': '!entities.body.surface_forms.text[]',
                    'entities_body_text': 'entities.body.text[]',
                    'not_entities_body_text': '!entities.body.text[]',
                    'entities_body_type': 'entities.body.type[]',
                    'not_entities_body_type': '!entities.body.type[]',
                    'entities_body_stock_ticker': 'entities.body.stock_ticker[]',
                    'not_entities_body_stock_ticker': '!entities.body.stock_ticker[]',
                    'entities_body_links_dbpedia': 'entities.body.links.dbpedia[]',
                    'not_entities_body_links_dbpedia': '!entities.body.links.dbpedia[]',
                    'entities_body_links_wikipedia': 'entities.body.links.wikipedia[]',
                    'not_entities_body_links_wikipedia': '!entities.body.links.wikipedia[]',
                    'entities_body_links_wikidata': 'entities.body.links.wikidata[]',
                    'not_entities_body_links_wikidata': '!entities.body.links.wikidata[]',
                    'sentiment_title_polarity': 'sentiment.title.polarity',
                    'not_sentiment_title_polarity': '!sentiment.title.polarity',
                    'sentiment_body_polarity': 'sentiment.body.polarity',
                    'not_sentiment_body_polarity': '!sentiment.body.polarity',
                    'media_images_count_min': 'media.images.count.min',
                    'media_images_count_max': 'media.images.count.max',
                    'media_images_width_min': 'media.images.width.min',
                    'media_images_width_max': 'media.images.width.max',
                    'media_images_height_min': 'media.images.height.min',
                    'media_images_height_max': 'media.images.height.max',
                    'media_images_content_length_min': 'media.images.content_length.min',
                    'media_images_content_length_max': 'media.images.content_length.max',
                    'media_images_format': 'media.images.format[]',
                    'not_media_images_format': '!media.images.format[]',
                    'media_videos_count_min': 'media.videos.count.min',
                    'media_videos_count_max': 'media.videos.count.max',
                    'author_id': 'author.id[]',
                    'not_author_id': '!author.id[]',
                    'author_name': 'author.name',
                    'not_author_name': '!author.name',
                    'source_id': 'source.id[]',
                    'not_source_id': '!source.id[]',
                    'source_name': 'source.name[]',
                    'not_source_name': '!source.name[]',
                    'source_domain': 'source.domain[]',
                    'not_source_domain': '!source.domain[]',
                    'source_locations_country': 'source.locations.country[]',
                    'not_source_locations_country': '!source.locations.country[]',
                    'source_locations_state': 'source.locations.state[]',
                    'not_source_locations_state': '!source.locations.state[]',
                    'source_locations_city': 'source.locations.city[]',
                    'not_source_locations_city': '!source.locations.city[]',
                    'source_scopes_country': 'source.scopes.country[]',
                    'not_source_scopes_country': '!source.scopes.country[]',
                    'source_scopes_state': 'source.scopes.state[]',
                    'not_source_scopes_state': '!source.scopes.state[]',
                    'source_scopes_city': 'source.scopes.city[]',
                    'not_source_scopes_city': '!source.scopes.city[]',
                    'source_scopes_level': 'source.scopes.level[]',
                    'not_source_scopes_level': '!source.scopes.level[]',
                    'source_links_in_count_min': 'source.links_in_count.min',
                    'source_links_in_count_max': 'source.links_in_count.max',
                    'source_rankings_alexa_rank_min': 'source.rankings.alexa.rank.min',
                    'source_rankings_alexa_rank_max': 'source.rankings.alexa.rank.max',
                    'source_rankings_alexa_country': 'source.rankings.alexa.country[]',
                    'social_shares_count_facebook_min': 'social_shares_count.facebook.min',
                    'social_shares_count_facebook_max': 'social_shares_count.facebook.max',
                    'social_shares_count_google_plus_min': 'social_shares_count.google_plus.min',
                    'social_shares_count_google_plus_max': 'social_shares_count.google_plus.max',
                    'social_shares_count_linkedin_min': 'social_shares_count.linkedin.min',
                    'social_shares_count_linkedin_max': 'social_shares_count.linkedin.max',
                    'social_shares_count_reddit_min': 'social_shares_count.reddit.min',
                    'social_shares_count_reddit_max': 'social_shares_count.reddit.max',
                    'clusters': 'clusters[]',
                    'aql': 'aql',
                    'aql_default_field': 'aql_default_field',
                    'query': 'query',
                    'interval_start': 'interval.start',
                    'interval_end': 'interval.end',
                    'interval_width': 'interval.width',
                    'field': 'field',
                },
                'location_map': {
                    'id': 'query',
                    'not_id': 'query',
                    'title': 'query',
                    'body': 'query',
                    'text': 'query',
                    'translations_en_title': 'query',
                    'translations_en_body': 'query',
                    'translations_en_text': 'query',
                    'links_permalink': 'query',
                    'not_links_permalink': 'query',
                    'language': 'query',
                    'not_language': 'query',
                    'published_at_start': 'query',
                    'published_at_end': 'query',
                    'categories_taxonomy': 'query',
                    'categories_confident': 'query',
                    'categories_id': 'query',
                    'not_categories_id': 'query',
                    'categories_label': 'query',
                    'not_categories_label': 'query',
                    'categories_level': 'query',
                    'not_categories_level': 'query',
                    'entities_id': 'query',
                    'not_entities_id': 'query',
                    'entities_links_wikipedia': 'query',
                    'not_entities_links_wikipedia': 'query',
                    'entities_links_wikidata': 'query',
                    'not_entities_links_wikidata': 'query',
                    'entities_types': 'query',
                    'not_entities_types': 'query',
                    'entities_stock_tickers': 'query',
                    'entities_body_stock_tickers': 'query',
                    'entities_body_surface_forms_text': 'query',
                    'entities_surface_forms_text': 'query',
                    'entities_title_id': 'query',
                    'not_entities_title_id': 'query',
                    'entities_title_surface_forms_text': 'query',
                    'not_entities_title_surface_forms_text': 'query',
                    'entities_title_text': 'query',
                    'not_entities_title_text': 'query',
                    'entities_title_type': 'query',
                    'not_entities_title_type': 'query',
                    'entities_title_stock_ticker': 'query',
                    'not_entities_title_stock_ticker': 'query',
                    'entities_title_links_dbpedia': 'query',
                    'not_entities_title_links_dbpedia': 'query',
                    'entities_title_links_wikipedia': 'query',
                    'not_entities_title_links_wikipedia': 'query',
                    'entities_title_links_wikidata': 'query',
                    'not_entities_title_links_wikidata': 'query',
                    'entities_body_id': 'query',
                    'not_entities_body_id': 'query',
                    'not_entities_body_surface_forms_text': 'query',
                    'entities_body_text': 'query',
                    'not_entities_body_text': 'query',
                    'entities_body_type': 'query',
                    'not_entities_body_type': 'query',
                    'entities_body_stock_ticker': 'query',
                    'not_entities_body_stock_ticker': 'query',
                    'entities_body_links_dbpedia': 'query',
                    'not_entities_body_links_dbpedia': 'query',
                    'entities_body_links_wikipedia': 'query',
                    'not_entities_body_links_wikipedia': 'query',
                    'entities_body_links_wikidata': 'query',
                    'not_entities_body_links_wikidata': 'query',
                    'sentiment_title_polarity': 'query',
                    'not_sentiment_title_polarity': 'query',
                    'sentiment_body_polarity': 'query',
                    'not_sentiment_body_polarity': 'query',
                    'media_images_count_min': 'query',
                    'media_images_count_max': 'query',
                    'media_images_width_min': 'query',
                    'media_images_width_max': 'query',
                    'media_images_height_min': 'query',
                    'media_images_height_max': 'query',
                    'media_images_content_length_min': 'query',
                    'media_images_content_length_max': 'query',
                    'media_images_format': 'query',
                    'not_media_images_format': 'query',
                    'media_videos_count_min': 'query',
                    'media_videos_count_max': 'query',
                    'author_id': 'query',
                    'not_author_id': 'query',
                    'author_name': 'query',
                    'not_author_name': 'query',
                    'source_id': 'query',
                    'not_source_id': 'query',
                    'source_name': 'query',
                    'not_source_name': 'query',
                    'source_domain': 'query',
                    'not_source_domain': 'query',
                    'source_locations_country': 'query',
                    'not_source_locations_country': 'query',
                    'source_locations_state': 'query',
                    'not_source_locations_state': 'query',
                    'source_locations_city': 'query',
                    'not_source_locations_city': 'query',
                    'source_scopes_country': 'query',
                    'not_source_scopes_country': 'query',
                    'source_scopes_state': 'query',
                    'not_source_scopes_state': 'query',
                    'source_scopes_city': 'query',
                    'not_source_scopes_city': 'query',
                    'source_scopes_level': 'query',
                    'not_source_scopes_level': 'query',
                    'source_links_in_count_min': 'query',
                    'source_links_in_count_max': 'query',
                    'source_rankings_alexa_rank_min': 'query',
                    'source_rankings_alexa_rank_max': 'query',
                    'source_rankings_alexa_country': 'query',
                    'social_shares_count_facebook_min': 'query',
                    'social_shares_count_facebook_max': 'query',
                    'social_shares_count_google_plus_min': 'query',
                    'social_shares_count_google_plus_max': 'query',
                    'social_shares_count_linkedin_min': 'query',
                    'social_shares_count_linkedin_max': 'query',
                    'social_shares_count_reddit_min': 'query',
                    'social_shares_count_reddit_max': 'query',
                    'clusters': 'query',
                    'aql': 'query',
                    'aql_default_field': 'query',
                    'query': 'query',
                    'interval_start': 'query',
                    'interval_end': 'query',
                    'interval_width': 'query',
                    'field': 'query',
                },
                'collection_format_map': {
                    'id': 'multi',
                    'not_id': 'multi',
                    'links_permalink': 'multi',
                    'not_links_permalink': 'multi',
                    'language': 'multi',
                    'not_language': 'multi',
                    'categories_id': 'multi',
                    'not_categories_id': 'multi',
                    'categories_label': 'multi',
                    'not_categories_label': 'multi',
                    'categories_level': 'multi',
                    'not_categories_level': 'multi',
                    'entities_id': 'multi',
                    'not_entities_id': 'multi',
                    'entities_links_wikipedia': 'multi',
                    'not_entities_links_wikipedia': 'multi',
                    'entities_links_wikidata': 'multi',
                    'not_entities_links_wikidata': 'multi',
                    'entities_types': 'multi',
                    'not_entities_types': 'multi',
                    'entities_stock_tickers': 'multi',
                    'entities_body_stock_tickers': 'multi',
                    'entities_body_surface_forms_text': 'multi',
                    'entities_surface_forms_text': 'multi',
                    'entities_title_id': 'multi',
                    'not_entities_title_id': 'multi',
                    'not_entities_title_surface_forms_text': 'multi',
                    'entities_title_text': 'multi',
                    'not_entities_title_text': 'multi',
                    'entities_title_type': 'multi',
                    'not_entities_title_type': 'multi',
                    'entities_title_stock_ticker': 'multi',
                    'not_entities_title_stock_ticker': 'multi',
                    'entities_title_links_dbpedia': 'multi',
                    'not_entities_title_links_dbpedia': 'multi',
                    'entities_title_links_wikipedia': 'multi',
                    'not_entities_title_links_wikipedia': 'multi',
                    'entities_title_links_wikidata': 'multi',
                    'not_entities_title_links_wikidata': 'multi',
                    'entities_body_id': 'multi',
                    'not_entities_body_id': 'multi',
                    'not_entities_body_surface_forms_text': 'multi',
                    'entities_body_text': 'multi',
                    'not_entities_body_text': 'multi',
                    'entities_body_type': 'multi',
                    'not_entities_body_type': 'multi',
                    'entities_body_stock_ticker': 'multi',
                    'not_entities_body_stock_ticker': 'multi',
                    'entities_body_links_dbpedia': 'multi',
                    'not_entities_body_links_dbpedia': 'multi',
                    'entities_body_links_wikipedia': 'multi',
                    'not_entities_body_links_wikipedia': 'multi',
                    'entities_body_links_wikidata': 'multi',
                    'not_entities_body_links_wikidata': 'multi',
                    'media_images_format': 'multi',
                    'not_media_images_format': 'multi',
                    'author_id': 'multi',
                    'not_author_id': 'multi',
                    'source_id': 'multi',
                    'not_source_id': 'multi',
                    'source_name': 'multi',
                    'not_source_name': 'multi',
                    'source_domain': 'multi',
                    'not_source_domain': 'multi',
                    'source_locations_country': 'multi',
                    'not_source_locations_country': 'multi',
                    'source_locations_state': 'multi',
                    'not_source_locations_state': 'multi',
                    'source_locations_city': 'multi',
                    'not_source_locations_city': 'multi',
                    'source_scopes_country': 'multi',
                    'not_source_scopes_country': 'multi',
                    'source_scopes_state': 'multi',
                    'not_source_scopes_state': 'multi',
                    'source_scopes_city': 'multi',
                    'not_source_scopes_city': 'multi',
                    'source_scopes_level': 'multi',
                    'not_source_scopes_level': 'multi',
                    'source_rankings_alexa_country': 'multi',
                    'clusters': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_histograms
        )

        def __list_related_stories_get(
            self,
            **kwargs
        ):
            """list_related_stories_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_related_stories_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                id ([int], none_type): This parameter is used for finding stories by story id. . [optional]
                not_id ([int], none_type): This parameter is used for excluding stories by story id. . [optional]
                title (str, none_type): This parameter is used for finding stories whose title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                body (str, none_type): This parameter is used for finding stories whose body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                text (str, none_type): This parameter is used for finding stories whose title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                translations_en_title (str, none_type): This parameter is used for finding stories whose translation title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                translations_en_body (str, none_type): This parameter is used for finding stories whose translation body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                translations_en_text (str, none_type): This parameter is used for finding stories whose translation title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                links_permalink ([str], none_type): This parameter is used to find stories based on their url. . [optional]
                not_links_permalink ([str], none_type): This parameter is used to exclude stories based on their url. . [optional]
                language ([str], none_type): This parameter is used for finding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes. . [optional]
                not_language ([str], none_type): This parameter is used for excluding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes. . [optional]
                published_at_start (str, none_type): This parameter is used for finding stories whose published at time is greater than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). . [optional]
                published_at_end (str, none_type): This parameter is used for finding stories whose published at time is less than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). . [optional]
                categories_taxonomy (str, none_type): This parameter is used for defining the type of the taxonomy for the rest of the categories queries. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                categories_confident (bool, none_type): This parameter is used for finding stories whose categories are confident. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional] if omitted the server will use the default value of True
                categories_id ([str], none_type): This parameter is used for finding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                not_categories_id ([str], none_type): This parameter is used for excluding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                categories_label ([str], none_type): This parameter is used for finding stories by categories label. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                not_categories_label ([str], none_type): This parameter is used for excluding stories by categories label. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                categories_level ([int], none_type): This parameter is used for finding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                not_categories_level ([int], none_type): This parameter is used for excluding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                entities_id ([str], none_type): This parameter is used to find stories based on the specified entities `id`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_id ([str], none_type): This parameter is used to exclude stories based on the specified entity's `id`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_links_wikipedia ([str], none_type): This parameter is used to find stories based on the specified entities wikipedia URL. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_links_wikipedia ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikipedia URL. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_links_wikidata ([str], none_type): This parameter is used to find stories based on the specified entities wikidata URL. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_links_wikidata ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikidata URL. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_types ([str], none_type): This parameter is used to find stories based on the specified entities `types`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_types ([str], none_type): This parameter is used to exclude stories based on the specified entity's `types`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_stock_tickers ([str], none_type): This parameter is used to find stories based on the specified entities `stock_tickers`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_stock_tickers ([str], none_type): This parameter is used to exclude stories based on the specified entity's `stock_tickers` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_surface_forms_text ([str], none_type): This parameter is used to find stories based on the specified entities `surface_form` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_surface_forms_text ([str], none_type): This parameter is used to exclude stories based on the specified entity's `surface_form`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_id ([str], none_type): This parameter is used to find stories based on the specified entities `id` in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_id ([str], none_type): This parameter is used to exclude stories based on the specified entity's `id` in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_surface_forms_text (str, none_type): This parameter is used to find stories based on the specified entities `surface_form` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_surface_forms_text ([str], none_type): This parameter is used to exclude stories based on the specified entity's `surface_form` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_text ([str], none_type): This parameter is used to find stories based on the specified entities `text` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_text ([str], none_type): This parameter is used to exclude stories based on the specified entities `text` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_type ([str], none_type): This parameter is used to find stories based on the specified entities `type` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_type ([str], none_type): This parameter is used to exclude stories based on the specified entities `type` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_stock_ticker ([str], none_type): This parameter is used to find stories based on the specified entities `stock_ticker` in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_stock_ticker ([str], none_type): This parameter is used to exclude stories based on the specified entity's `stock_ticker` in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_links_dbpedia ([str], none_type): This parameter is used to find stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_links_dbpedia ([str], none_type): This parameter is used to exclude stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_links_wikipedia ([str], none_type): This parameter is used to find stories based on the specified entities wikipedia URL in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_links_wikipedia ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikipedia URL in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_links_wikidata ([str], none_type): This parameter is used to find stories based on the specified entities wikidata URL in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_links_wikidata ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikidata URL in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_id ([str], none_type): This parameter is used to find stories based on the specified entities `id` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_id ([str], none_type): This parameter is used to exclude stories based on the specified entity's `id` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_surface_forms_text ([str], none_type): This parameter is used to exclude stories based on the specified entity's `surface_form` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_text ([str], none_type): This parameter is used to find stories based on the specified entities `text` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_text ([str], none_type): This parameter is used to exclude stories based on the specified entities `text` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_type ([str], none_type): This parameter is used to find stories based on the specified entities `type` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_type ([str], none_type): This parameter is used to exclude stories based on the specified entities `type` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_stock_ticker ([str], none_type): This parameter is used to find stories based on the specified entities `stock_ticker` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_stock_ticker ([str], none_type): This parameter is used to exclude stories based on the specified entity's `stock_ticker` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_links_dbpedia ([str], none_type): This parameter is used to find stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_links_dbpedia ([str], none_type): This parameter is used to exclude stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_links_wikipedia ([str], none_type): This parameter is used to find stories based on the specified entities wikipedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_links_wikipedia ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikipedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_links_wikidata ([str], none_type): This parameter is used to find stories based on the specified entities wikidata URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_links_wikidata ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikidata URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                sentiment_title_polarity (str, none_type): This parameter is used for finding stories whose title sentiment is the specified value. . [optional]
                not_sentiment_title_polarity (str, none_type): This parameter is used for excluding stories whose title sentiment is the specified value. . [optional]
                sentiment_body_polarity (str, none_type): This parameter is used for finding stories whose body sentiment is the specified value. . [optional]
                not_sentiment_body_polarity (str, none_type): This parameter is used for excluding stories whose body sentiment is the specified value. . [optional]
                media_images_count_min (int, none_type): This parameter is used for finding stories whose number of images is greater than or equal to the specified value. . [optional]
                media_images_count_max (int, none_type): This parameter is used for finding stories whose number of images is less than or equal to the specified value. . [optional]
                media_images_width_min (int, none_type): This parameter is used for finding stories whose width of images are greater than or equal to the specified value. . [optional]
                media_images_width_max (int, none_type): This parameter is used for finding stories whose width of images are less than or equal to the specified value. . [optional]
                media_images_height_min (int, none_type): This parameter is used for finding stories whose height of images are greater than or equal to the specified value. . [optional]
                media_images_height_max (int, none_type): This parameter is used for finding stories whose height of images are less than or equal to the specified value. . [optional]
                media_images_content_length_min (int, none_type): This parameter is used for finding stories whose images content length are greater than or equal to the specified value. . [optional]
                media_images_content_length_max (int, none_type): This parameter is used for finding stories whose images content length are less than or equal to the specified value. . [optional]
                media_images_format ([str], none_type): This parameter is used for finding stories whose images format are the specified value. . [optional]
                not_media_images_format ([str], none_type): This parameter is used for excluding stories whose images format are the specified value. . [optional]
                media_videos_count_min (int, none_type): This parameter is used for finding stories whose number of videos is greater than or equal to the specified value. . [optional]
                media_videos_count_max (int, none_type): This parameter is used for finding stories whose number of videos is less than or equal to the specified value. . [optional]
                author_id ([int], none_type): This parameter is used for finding stories whose author id is the specified value. . [optional]
                not_author_id ([int], none_type): This parameter is used for excluding stories whose author id is the specified value. . [optional]
                author_name (str, none_type): This parameter is used for finding stories whose author full name contains the specified value. . [optional]
                not_author_name (str, none_type): This parameter is used for excluding stories whose author full name contains the specified value. . [optional]
                source_id ([int], none_type): This parameter is used for finding stories whose source id is the specified value. . [optional]
                not_source_id ([int], none_type): This parameter is used for excluding stories whose source id is the specified value. . [optional]
                source_name ([str], none_type): This parameter is used for finding stories whose source name contains the specified value. . [optional]
                not_source_name ([str], none_type): This parameter is used for excluding stories whose source name contains the specified value. . [optional]
                source_domain ([str], none_type): This parameter is used for finding stories whose source domain is the specified value. . [optional]
                not_source_domain ([str], none_type): This parameter is used for excluding stories whose source domain is the specified value. . [optional]
                source_locations_country ([str], none_type): This parameter is used for finding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_locations_country ([str], none_type): This parameter is used for excluding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_locations_state ([str], none_type): This parameter is used for finding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_locations_state ([str], none_type): This parameter is used for excluding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_locations_city ([str], none_type): This parameter is used for finding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_locations_city ([str], none_type): This parameter is used for excluding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_scopes_country ([str], none_type): This parameter is used for finding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_scopes_country ([str], none_type): This parameter is used for excluding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_scopes_state ([str], none_type): This parameter is used for finding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_scopes_state ([str], none_type): This parameter is used for excluding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_scopes_city ([str], none_type): This parameter is used for finding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_scopes_city ([str], none_type): This parameter is used for excluding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_scopes_level ([str], none_type): This parameter is used for finding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_scopes_level ([str], none_type): This parameter is used for excluding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_links_in_count_min (int, none_type): This parameter is used for finding stories from sources whose Links in count is greater than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count). . [optional]
                source_links_in_count_max (int, none_type): This parameter is used for finding stories from sources whose Links in count is less than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count). . [optional]
                source_rankings_alexa_rank_min (int, none_type): This parameter is used for finding stories from sources whose Alexa rank is greater than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks). . [optional]
                source_rankings_alexa_rank_max (int, none_type): This parameter is used for finding stories from sources whose Alexa rank is less than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks). . [optional]
                source_rankings_alexa_country ([str], none_type): This parameter is used for finding stories from sources whose Alexa rank is in the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks). . [optional]
                social_shares_count_facebook_min (int, none_type): This parameter is used for finding stories whose Facebook social shares count is greater than or equal to the specified value. . [optional]
                social_shares_count_facebook_max (int, none_type): This parameter is used for finding stories whose Facebook social shares count is less than or equal to the specified value. . [optional]
                social_shares_count_google_plus_min (int, none_type): This parameter is used for finding stories whose Google+ social shares count is greater than or equal to the specified value. . [optional]
                social_shares_count_google_plus_max (int, none_type): This parameter is used for finding stories whose Google+ social shares count is less than or equal to the specified value. . [optional]
                social_shares_count_linkedin_min (int, none_type): This parameter is used for finding stories whose LinkedIn social shares count is greater than or equal to the specified value. . [optional]
                social_shares_count_linkedin_max (int, none_type): This parameter is used for finding stories whose LinkedIn social shares count is less than or equal to the specified value. . [optional]
                social_shares_count_reddit_min (int, none_type): This parameter is used for finding stories whose Reddit social shares count is greater than or equal to the specified value. . [optional]
                social_shares_count_reddit_max (int, none_type): This parameter is used for finding stories whose Reddit social shares count is less than or equal to the specified value. . [optional]
                clusters ([str], none_type): This parameter is used for finding stories with belonging to one of clusters in a specific set of clusters You can read more about working with clustering [here](https://newsapi.aylien.com/docs/working-with-clustering). . [optional]
                _return ([str], none_type): This parameter is used for specifying return fields.. [optional]
                story_id (int, none_type): A story id. [optional]
                story_url (str, none_type): An article or webpage. [optional]
                story_title (str, none_type): Title of the article. [optional]
                story_body (str, none_type): Body of the article. [optional]
                aql (str, none_type): This parameter is used to supply a query in AYLIEN Query Language. . [optional]
                aql_default_field (str, none_type): This parameter is used to supply an optional default field name used in the AQL query. . [optional] if omitted the server will use the default value of "text"
                query (str, none_type): This parameter is used to make an advanced query using $and, $or, $not logical operators and $eq for exact match, $text for a text search and $lt, $gt, $lte, $gte for range queries. value must be a json string. . [optional]
                boost_by (str, none_type): This parameter is used for boosting the result by the specified value. . [optional]
                story_language (str, none_type): This parameter is used for setting the language of the story. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes. . [optional] if omitted the server will use the default value of "auto"
                per_page (int, none_type): This parameter is used for specifying number of items in each page. . [optional] if omitted the server will use the default value of 3
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                dict
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.list_related_stories_get = _Endpoint(
            settings={
                'response_type': (dict,),
                'auth': [
                    'app_id',
                    'app_key'
                ],
                'endpoint_path': '/related_stories',
                'operation_id': 'list_related_stories_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'not_id',
                    'title',
                    'body',
                    'text',
                    'translations_en_title',
                    'translations_en_body',
                    'translations_en_text',
                    'links_permalink',
                    'not_links_permalink',
                    'language',
                    'not_language',
                    'published_at_start',
                    'published_at_end',
                    'categories_taxonomy',
                    'categories_confident',
                    'categories_id',
                    'not_categories_id',
                    'categories_label',
                    'not_categories_label',
                    'categories_level',
                    'not_categories_level',
                    'entities_id',
                    'not_entities_id',
                    'entities_links_wikipedia',
                    'not_entities_links_wikipedia',
                    'entities_links_wikidata',
                    'not_entities_links_wikidata',
                    'entities_types',
                    'not_entities_types',
                    'entities_stock_tickers',
                    'entities_body_stock_tickers',
                    'entities_body_surface_forms_text',
                    'entities_surface_forms_text',
                    'entities_title_id',
                    'not_entities_title_id',
                    'entities_title_surface_forms_text',
                    'not_entities_title_surface_forms_text',
                    'entities_title_text',
                    'not_entities_title_text',
                    'entities_title_type',
                    'not_entities_title_type',
                    'entities_title_stock_ticker',
                    'not_entities_title_stock_ticker',
                    'entities_title_links_dbpedia',
                    'not_entities_title_links_dbpedia',
                    'entities_title_links_wikipedia',
                    'not_entities_title_links_wikipedia',
                    'entities_title_links_wikidata',
                    'not_entities_title_links_wikidata',
                    'entities_body_id',
                    'not_entities_body_id',
                    'not_entities_body_surface_forms_text',
                    'entities_body_text',
                    'not_entities_body_text',
                    'entities_body_type',
                    'not_entities_body_type',
                    'entities_body_stock_ticker',
                    'not_entities_body_stock_ticker',
                    'entities_body_links_dbpedia',
                    'not_entities_body_links_dbpedia',
                    'entities_body_links_wikipedia',
                    'not_entities_body_links_wikipedia',
                    'entities_body_links_wikidata',
                    'not_entities_body_links_wikidata',
                    'sentiment_title_polarity',
                    'not_sentiment_title_polarity',
                    'sentiment_body_polarity',
                    'not_sentiment_body_polarity',
                    'media_images_count_min',
                    'media_images_count_max',
                    'media_images_width_min',
                    'media_images_width_max',
                    'media_images_height_min',
                    'media_images_height_max',
                    'media_images_content_length_min',
                    'media_images_content_length_max',
                    'media_images_format',
                    'not_media_images_format',
                    'media_videos_count_min',
                    'media_videos_count_max',
                    'author_id',
                    'not_author_id',
                    'author_name',
                    'not_author_name',
                    'source_id',
                    'not_source_id',
                    'source_name',
                    'not_source_name',
                    'source_domain',
                    'not_source_domain',
                    'source_locations_country',
                    'not_source_locations_country',
                    'source_locations_state',
                    'not_source_locations_state',
                    'source_locations_city',
                    'not_source_locations_city',
                    'source_scopes_country',
                    'not_source_scopes_country',
                    'source_scopes_state',
                    'not_source_scopes_state',
                    'source_scopes_city',
                    'not_source_scopes_city',
                    'source_scopes_level',
                    'not_source_scopes_level',
                    'source_links_in_count_min',
                    'source_links_in_count_max',
                    'source_rankings_alexa_rank_min',
                    'source_rankings_alexa_rank_max',
                    'source_rankings_alexa_country',
                    'social_shares_count_facebook_min',
                    'social_shares_count_facebook_max',
                    'social_shares_count_google_plus_min',
                    'social_shares_count_google_plus_max',
                    'social_shares_count_linkedin_min',
                    'social_shares_count_linkedin_max',
                    'social_shares_count_reddit_min',
                    'social_shares_count_reddit_max',
                    'clusters',
                    '_return',
                    'story_id',
                    'story_url',
                    'story_title',
                    'story_body',
                    'aql',
                    'aql_default_field',
                    'query',
                    'boost_by',
                    'story_language',
                    'per_page',
                ],
                'required': [],
                'nullable': [
                    'id',
                    'not_id',
                    'title',
                    'body',
                    'text',
                    'translations_en_title',
                    'translations_en_body',
                    'translations_en_text',
                    'links_permalink',
                    'not_links_permalink',
                    'language',
                    'not_language',
                    'published_at_start',
                    'published_at_end',
                    'categories_taxonomy',
                    'categories_confident',
                    'categories_id',
                    'not_categories_id',
                    'categories_label',
                    'not_categories_label',
                    'categories_level',
                    'not_categories_level',
                    'entities_id',
                    'not_entities_id',
                    'entities_links_wikipedia',
                    'not_entities_links_wikipedia',
                    'entities_links_wikidata',
                    'not_entities_links_wikidata',
                    'entities_types',
                    'not_entities_types',
                    'entities_stock_tickers',
                    'entities_body_stock_tickers',
                    'entities_body_surface_forms_text',
                    'entities_surface_forms_text',
                    'entities_title_id',
                    'not_entities_title_id',
                    'entities_title_surface_forms_text',
                    'not_entities_title_surface_forms_text',
                    'entities_title_text',
                    'not_entities_title_text',
                    'entities_title_type',
                    'not_entities_title_type',
                    'entities_title_stock_ticker',
                    'not_entities_title_stock_ticker',
                    'entities_title_links_dbpedia',
                    'not_entities_title_links_dbpedia',
                    'entities_title_links_wikipedia',
                    'not_entities_title_links_wikipedia',
                    'entities_title_links_wikidata',
                    'not_entities_title_links_wikidata',
                    'entities_body_id',
                    'not_entities_body_id',
                    'not_entities_body_surface_forms_text',
                    'entities_body_text',
                    'not_entities_body_text',
                    'entities_body_type',
                    'not_entities_body_type',
                    'entities_body_stock_ticker',
                    'not_entities_body_stock_ticker',
                    'entities_body_links_dbpedia',
                    'not_entities_body_links_dbpedia',
                    'entities_body_links_wikipedia',
                    'not_entities_body_links_wikipedia',
                    'entities_body_links_wikidata',
                    'not_entities_body_links_wikidata',
                    'sentiment_title_polarity',
                    'not_sentiment_title_polarity',
                    'sentiment_body_polarity',
                    'not_sentiment_body_polarity',
                    'media_images_count_min',
                    'media_images_count_max',
                    'media_images_width_min',
                    'media_images_width_max',
                    'media_images_height_min',
                    'media_images_height_max',
                    'media_images_content_length_min',
                    'media_images_content_length_max',
                    'media_images_format',
                    'not_media_images_format',
                    'media_videos_count_min',
                    'media_videos_count_max',
                    'author_id',
                    'not_author_id',
                    'author_name',
                    'not_author_name',
                    'source_id',
                    'not_source_id',
                    'source_name',
                    'not_source_name',
                    'source_domain',
                    'not_source_domain',
                    'source_locations_country',
                    'not_source_locations_country',
                    'source_locations_state',
                    'not_source_locations_state',
                    'source_locations_city',
                    'not_source_locations_city',
                    'source_scopes_country',
                    'not_source_scopes_country',
                    'source_scopes_state',
                    'not_source_scopes_state',
                    'source_scopes_city',
                    'not_source_scopes_city',
                    'source_scopes_level',
                    'not_source_scopes_level',
                    'source_links_in_count_min',
                    'source_links_in_count_max',
                    'source_rankings_alexa_rank_min',
                    'source_rankings_alexa_rank_max',
                    'source_rankings_alexa_country',
                    'social_shares_count_facebook_min',
                    'social_shares_count_facebook_max',
                    'social_shares_count_google_plus_min',
                    'social_shares_count_google_plus_max',
                    'social_shares_count_linkedin_min',
                    'social_shares_count_linkedin_max',
                    'social_shares_count_reddit_min',
                    'social_shares_count_reddit_max',
                    'clusters',
                    '_return',
                    'story_id',
                    'story_url',
                    'story_title',
                    'story_body',
                    'aql',
                    'aql_default_field',
                    'query',
                    'boost_by',
                    'story_language',
                    'per_page',
                ],
                'enum': [
                    'language',
                    'not_language',
                    'categories_taxonomy',
                    'sentiment_title_polarity',
                    'not_sentiment_title_polarity',
                    'sentiment_body_polarity',
                    'not_sentiment_body_polarity',
                    'media_images_format',
                    'not_media_images_format',
                    'source_scopes_level',
                    'not_source_scopes_level',
                    '_return',
                    'boost_by',
                    'story_language',
                ],
                'validation': [
                    'media_images_count_min',
                    'media_images_count_max',
                    'media_images_width_min',
                    'media_images_width_max',
                    'media_images_height_min',
                    'media_images_height_max',
                    'media_images_content_length_min',
                    'media_images_content_length_max',
                    'media_videos_count_min',
                    'media_videos_count_max',
                    'source_links_in_count_min',
                    'source_links_in_count_max',
                    'source_rankings_alexa_rank_min',
                    'source_rankings_alexa_rank_max',
                    'social_shares_count_facebook_min',
                    'social_shares_count_facebook_max',
                    'social_shares_count_google_plus_min',
                    'social_shares_count_google_plus_max',
                    'social_shares_count_linkedin_min',
                    'social_shares_count_linkedin_max',
                    'social_shares_count_reddit_min',
                    'social_shares_count_reddit_max',
                    'per_page',
                ]
            },
            root_map={
                'validations': {
                    ('media_images_count_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_count_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_width_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_width_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_height_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_height_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_content_length_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_content_length_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_videos_count_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_videos_count_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('source_links_in_count_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('source_links_in_count_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('source_rankings_alexa_rank_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('source_rankings_alexa_rank_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_facebook_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_facebook_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_google_plus_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_google_plus_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_linkedin_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_linkedin_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_reddit_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_reddit_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('per_page',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('language',): {
                        'None': None,
                        "EN": "en",
                        "DE": "de",
                        "FR": "fr",
                        "IT": "it",
                        "ES": "es",
                        "PT": "pt"
                    },
                    ('not_language',): {
                        'None': None,
                        "EN": "en",
                        "DE": "de",
                        "FR": "fr",
                        "IT": "it",
                        "ES": "es",
                        "PT": "pt"
                    },
                    ('categories_taxonomy',): {
                        'None': None,
                        "IAB-QAG": "iab-qag",
                        "IPTC-SUBJECTCODE": "iptc-subjectcode"
                    },
                    ('sentiment_title_polarity',): {
                        'None': None,
                        "POSITIVE": "positive",
                        "NEUTRAL": "neutral",
                        "NEGATIVE": "negative"
                    },
                    ('not_sentiment_title_polarity',): {
                        'None': None,
                        "POSITIVE": "positive",
                        "NEUTRAL": "neutral",
                        "NEGATIVE": "negative"
                    },
                    ('sentiment_body_polarity',): {
                        'None': None,
                        "POSITIVE": "positive",
                        "NEUTRAL": "neutral",
                        "NEGATIVE": "negative"
                    },
                    ('not_sentiment_body_polarity',): {
                        'None': None,
                        "POSITIVE": "positive",
                        "NEUTRAL": "neutral",
                        "NEGATIVE": "negative"
                    },
                    ('media_images_format',): {
                        'None': None,
                        "BMP": "BMP",
                        "GIF": "GIF",
                        "JPEG": "JPEG",
                        "PNG": "PNG",
                        "TIFF": "TIFF",
                        "PSD": "PSD",
                        "ICO": "ICO",
                        "CUR": "CUR",
                        "WEBP": "WEBP",
                        "SVG": "SVG"
                    },
                    ('not_media_images_format',): {
                        'None': None,
                        "BMP": "BMP",
                        "GIF": "GIF",
                        "JPEG": "JPEG",
                        "PNG": "PNG",
                        "TIFF": "TIFF",
                        "PSD": "PSD",
                        "ICO": "ICO",
                        "CUR": "CUR",
                        "WEBP": "WEBP",
                        "SVG": "SVG"
                    },
                    ('source_scopes_level',): {
                        'None': None,
                        "INTERNATIONAL": "international",
                        "NATIONAL": "national",
                        "LOCAL": "local"
                    },
                    ('not_source_scopes_level',): {
                        'None': None,
                        "INTERNATIONAL": "international",
                        "NATIONAL": "national",
                        "LOCAL": "local"
                    },
                    ('_return',): {
                        'None': None,
                        "ID": "id",
                        "TITLE": "title",
                        "BODY": "body",
                        "SUMMARY": "summary",
                        "SOURCE": "source",
                        "AUTHOR": "author",
                        "ENTITIES": "entities",
                        "KEYWORDS": "keywords",
                        "HASHTAGS": "hashtags",
                        "CHARACTERS_COUNT": "characters_count",
                        "WORDS_COUNT": "words_count",
                        "SENTENCES_COUNT": "sentences_count",
                        "PARAGRAPHS_COUNT": "paragraphs_count",
                        "CATEGORIES": "categories",
                        "SOCIAL_SHARES_COUNT": "social_shares_count",
                        "MEDIA": "media",
                        "SENTIMENT": "sentiment",
                        "LANGUAGE": "language",
                        "PUBLISHED_AT": "published_at",
                        "LINKS": "links"
                    },
                    ('boost_by',): {
                        'None': None,
                        "RECENCY": "recency",
                        "POPULARITY": "popularity"
                    },
                    ('story_language',): {
                        'None': None,
                        "AUTO": "auto",
                        "EN": "en",
                        "DE": "de",
                        "FR": "fr",
                        "IT": "it",
                        "ES": "es",
                        "PT": "pt"
                    },
                },
                'openapi_types': {
                    'id':
                        ([int], none_type,),
                    'not_id':
                        ([int], none_type,),
                    'title':
                        (str, none_type,),
                    'body':
                        (str, none_type,),
                    'text':
                        (str, none_type,),
                    'translations_en_title':
                        (str, none_type,),
                    'translations_en_body':
                        (str, none_type,),
                    'translations_en_text':
                        (str, none_type,),
                    'links_permalink':
                        ([str], none_type,),
                    'not_links_permalink':
                        ([str], none_type,),
                    'language':
                        ([str], none_type,),
                    'not_language':
                        ([str], none_type,),
                    'published_at_start':
                        (str, none_type,),
                    'published_at_end':
                        (str, none_type,),
                    'categories_taxonomy':
                        (str, none_type,),
                    'categories_confident':
                        (bool, none_type,),
                    'categories_id':
                        ([str], none_type,),
                    'not_categories_id':
                        ([str], none_type,),
                    'categories_label':
                        ([str], none_type,),
                    'not_categories_label':
                        ([str], none_type,),
                    'categories_level':
                        ([int], none_type,),
                    'not_categories_level':
                        ([int], none_type,),
                    'entities_id':
                        ([str], none_type,),
                    'not_entities_id':
                        ([str], none_type,),
                    'entities_links_wikipedia':
                        ([str], none_type,),
                    'not_entities_links_wikipedia':
                        ([str], none_type,),
                    'entities_links_wikidata':
                        ([str], none_type,),
                    'not_entities_links_wikidata':
                        ([str], none_type,),
                    'entities_types':
                        ([str], none_type,),
                    'not_entities_types':
                        ([str], none_type,),
                    'entities_stock_tickers':
                        ([str], none_type,),
                    'entities_body_stock_tickers':
                        ([str], none_type,),
                    'entities_body_surface_forms_text':
                        ([str], none_type,),
                    'entities_surface_forms_text':
                        ([str], none_type,),
                    'entities_title_id':
                        ([str], none_type,),
                    'not_entities_title_id':
                        ([str], none_type,),
                    'entities_title_surface_forms_text':
                        (str, none_type,),
                    'not_entities_title_surface_forms_text':
                        ([str], none_type,),
                    'entities_title_text':
                        ([str], none_type,),
                    'not_entities_title_text':
                        ([str], none_type,),
                    'entities_title_type':
                        ([str], none_type,),
                    'not_entities_title_type':
                        ([str], none_type,),
                    'entities_title_stock_ticker':
                        ([str], none_type,),
                    'not_entities_title_stock_ticker':
                        ([str], none_type,),
                    'entities_title_links_dbpedia':
                        ([str], none_type,),
                    'not_entities_title_links_dbpedia':
                        ([str], none_type,),
                    'entities_title_links_wikipedia':
                        ([str], none_type,),
                    'not_entities_title_links_wikipedia':
                        ([str], none_type,),
                    'entities_title_links_wikidata':
                        ([str], none_type,),
                    'not_entities_title_links_wikidata':
                        ([str], none_type,),
                    'entities_body_id':
                        ([str], none_type,),
                    'not_entities_body_id':
                        ([str], none_type,),
                    'not_entities_body_surface_forms_text':
                        ([str], none_type,),
                    'entities_body_text':
                        ([str], none_type,),
                    'not_entities_body_text':
                        ([str], none_type,),
                    'entities_body_type':
                        ([str], none_type,),
                    'not_entities_body_type':
                        ([str], none_type,),
                    'entities_body_stock_ticker':
                        ([str], none_type,),
                    'not_entities_body_stock_ticker':
                        ([str], none_type,),
                    'entities_body_links_dbpedia':
                        ([str], none_type,),
                    'not_entities_body_links_dbpedia':
                        ([str], none_type,),
                    'entities_body_links_wikipedia':
                        ([str], none_type,),
                    'not_entities_body_links_wikipedia':
                        ([str], none_type,),
                    'entities_body_links_wikidata':
                        ([str], none_type,),
                    'not_entities_body_links_wikidata':
                        ([str], none_type,),
                    'sentiment_title_polarity':
                        (str, none_type,),
                    'not_sentiment_title_polarity':
                        (str, none_type,),
                    'sentiment_body_polarity':
                        (str, none_type,),
                    'not_sentiment_body_polarity':
                        (str, none_type,),
                    'media_images_count_min':
                        (int, none_type,),
                    'media_images_count_max':
                        (int, none_type,),
                    'media_images_width_min':
                        (int, none_type,),
                    'media_images_width_max':
                        (int, none_type,),
                    'media_images_height_min':
                        (int, none_type,),
                    'media_images_height_max':
                        (int, none_type,),
                    'media_images_content_length_min':
                        (int, none_type,),
                    'media_images_content_length_max':
                        (int, none_type,),
                    'media_images_format':
                        ([str], none_type,),
                    'not_media_images_format':
                        ([str], none_type,),
                    'media_videos_count_min':
                        (int, none_type,),
                    'media_videos_count_max':
                        (int, none_type,),
                    'author_id':
                        ([int], none_type,),
                    'not_author_id':
                        ([int], none_type,),
                    'author_name':
                        (str, none_type,),
                    'not_author_name':
                        (str, none_type,),
                    'source_id':
                        ([int], none_type,),
                    'not_source_id':
                        ([int], none_type,),
                    'source_name':
                        ([str], none_type,),
                    'not_source_name':
                        ([str], none_type,),
                    'source_domain':
                        ([str], none_type,),
                    'not_source_domain':
                        ([str], none_type,),
                    'source_locations_country':
                        ([str], none_type,),
                    'not_source_locations_country':
                        ([str], none_type,),
                    'source_locations_state':
                        ([str], none_type,),
                    'not_source_locations_state':
                        ([str], none_type,),
                    'source_locations_city':
                        ([str], none_type,),
                    'not_source_locations_city':
                        ([str], none_type,),
                    'source_scopes_country':
                        ([str], none_type,),
                    'not_source_scopes_country':
                        ([str], none_type,),
                    'source_scopes_state':
                        ([str], none_type,),
                    'not_source_scopes_state':
                        ([str], none_type,),
                    'source_scopes_city':
                        ([str], none_type,),
                    'not_source_scopes_city':
                        ([str], none_type,),
                    'source_scopes_level':
                        ([str], none_type,),
                    'not_source_scopes_level':
                        ([str], none_type,),
                    'source_links_in_count_min':
                        (int, none_type,),
                    'source_links_in_count_max':
                        (int, none_type,),
                    'source_rankings_alexa_rank_min':
                        (int, none_type,),
                    'source_rankings_alexa_rank_max':
                        (int, none_type,),
                    'source_rankings_alexa_country':
                        ([str], none_type,),
                    'social_shares_count_facebook_min':
                        (int, none_type,),
                    'social_shares_count_facebook_max':
                        (int, none_type,),
                    'social_shares_count_google_plus_min':
                        (int, none_type,),
                    'social_shares_count_google_plus_max':
                        (int, none_type,),
                    'social_shares_count_linkedin_min':
                        (int, none_type,),
                    'social_shares_count_linkedin_max':
                        (int, none_type,),
                    'social_shares_count_reddit_min':
                        (int, none_type,),
                    'social_shares_count_reddit_max':
                        (int, none_type,),
                    'clusters':
                        ([str], none_type,),
                    '_return':
                        ([str], none_type,),
                    'story_id':
                        (int, none_type,),
                    'story_url':
                        (str, none_type,),
                    'story_title':
                        (str, none_type,),
                    'story_body':
                        (str, none_type,),
                    'aql':
                        (str, none_type,),
                    'aql_default_field':
                        (str, none_type,),
                    'query':
                        (str, none_type,),
                    'boost_by':
                        (str, none_type,),
                    'story_language':
                        (str, none_type,),
                    'per_page':
                        (int, none_type,),
                },
                'attribute_map': {
                    'id': 'id[]',
                    'not_id': '!id[]',
                    'title': 'title',
                    'body': 'body',
                    'text': 'text',
                    'translations_en_title': 'translations.en.title',
                    'translations_en_body': 'translations.en.body',
                    'translations_en_text': 'translations.en.text',
                    'links_permalink': 'links.permalink[]',
                    'not_links_permalink': '!links.permalink[]',
                    'language': 'language[]',
                    'not_language': '!language[]',
                    'published_at_start': 'published_at.start',
                    'published_at_end': 'published_at.end',
                    'categories_taxonomy': 'categories.taxonomy',
                    'categories_confident': 'categories.confident',
                    'categories_id': 'categories.id[]',
                    'not_categories_id': '!categories.id[]',
                    'categories_label': 'categories.label[]',
                    'not_categories_label': '!categories.label[]',
                    'categories_level': 'categories.level[]',
                    'not_categories_level': '!categories.level[]',
                    'entities_id': 'entities.id[]',
                    'not_entities_id': '!entities.id[]',
                    'entities_links_wikipedia': 'entities.links.wikipedia[]',
                    'not_entities_links_wikipedia': '!entities.links.wikipedia[]',
                    'entities_links_wikidata': 'entities.links.wikidata[]',
                    'not_entities_links_wikidata': '!entities.links.wikidata[]',
                    'entities_types': 'entities.types[]',
                    'not_entities_types': '!entities.types[]',
                    'entities_stock_tickers': 'entities.stock_tickers[]',
                    'entities_body_stock_tickers': '!entities.body.stock_tickers[]',
                    'entities_body_surface_forms_text': 'entities.body.surface_forms.text[]',
                    'entities_surface_forms_text': '!entities.surface_forms.text[]',
                    'entities_title_id': 'entities.title.id[]',
                    'not_entities_title_id': '!entities.title.id[]',
                    'entities_title_surface_forms_text': 'entities.title.surface_forms.text[]',
                    'not_entities_title_surface_forms_text': '!entities.title.surface_forms.text[]',
                    'entities_title_text': 'entities.title.text[]',
                    'not_entities_title_text': '!entities.title.text[]',
                    'entities_title_type': 'entities.title.type[]',
                    'not_entities_title_type': '!entities.title.type[]',
                    'entities_title_stock_ticker': 'entities.title.stock_ticker[]',
                    'not_entities_title_stock_ticker': '!entities.title.stock_ticker[]',
                    'entities_title_links_dbpedia': 'entities.title.links.dbpedia[]',
                    'not_entities_title_links_dbpedia': '!entities.title.links.dbpedia[]',
                    'entities_title_links_wikipedia': 'entities.title.links.wikipedia[]',
                    'not_entities_title_links_wikipedia': '!entities.title.links.wikipedia[]',
                    'entities_title_links_wikidata': 'entities.title.links.wikidata[]',
                    'not_entities_title_links_wikidata': '!entities.title.links.wikidata[]',
                    'entities_body_id': 'entities.body.id[]',
                    'not_entities_body_id': '!entities.body.id[]',
                    'not_entities_body_surface_forms_text': '!entities.body.surface_forms.text[]',
                    'entities_body_text': 'entities.body.text[]',
                    'not_entities_body_text': '!entities.body.text[]',
                    'entities_body_type': 'entities.body.type[]',
                    'not_entities_body_type': '!entities.body.type[]',
                    'entities_body_stock_ticker': 'entities.body.stock_ticker[]',
                    'not_entities_body_stock_ticker': '!entities.body.stock_ticker[]',
                    'entities_body_links_dbpedia': 'entities.body.links.dbpedia[]',
                    'not_entities_body_links_dbpedia': '!entities.body.links.dbpedia[]',
                    'entities_body_links_wikipedia': 'entities.body.links.wikipedia[]',
                    'not_entities_body_links_wikipedia': '!entities.body.links.wikipedia[]',
                    'entities_body_links_wikidata': 'entities.body.links.wikidata[]',
                    'not_entities_body_links_wikidata': '!entities.body.links.wikidata[]',
                    'sentiment_title_polarity': 'sentiment.title.polarity',
                    'not_sentiment_title_polarity': '!sentiment.title.polarity',
                    'sentiment_body_polarity': 'sentiment.body.polarity',
                    'not_sentiment_body_polarity': '!sentiment.body.polarity',
                    'media_images_count_min': 'media.images.count.min',
                    'media_images_count_max': 'media.images.count.max',
                    'media_images_width_min': 'media.images.width.min',
                    'media_images_width_max': 'media.images.width.max',
                    'media_images_height_min': 'media.images.height.min',
                    'media_images_height_max': 'media.images.height.max',
                    'media_images_content_length_min': 'media.images.content_length.min',
                    'media_images_content_length_max': 'media.images.content_length.max',
                    'media_images_format': 'media.images.format[]',
                    'not_media_images_format': '!media.images.format[]',
                    'media_videos_count_min': 'media.videos.count.min',
                    'media_videos_count_max': 'media.videos.count.max',
                    'author_id': 'author.id[]',
                    'not_author_id': '!author.id[]',
                    'author_name': 'author.name',
                    'not_author_name': '!author.name',
                    'source_id': 'source.id[]',
                    'not_source_id': '!source.id[]',
                    'source_name': 'source.name[]',
                    'not_source_name': '!source.name[]',
                    'source_domain': 'source.domain[]',
                    'not_source_domain': '!source.domain[]',
                    'source_locations_country': 'source.locations.country[]',
                    'not_source_locations_country': '!source.locations.country[]',
                    'source_locations_state': 'source.locations.state[]',
                    'not_source_locations_state': '!source.locations.state[]',
                    'source_locations_city': 'source.locations.city[]',
                    'not_source_locations_city': '!source.locations.city[]',
                    'source_scopes_country': 'source.scopes.country[]',
                    'not_source_scopes_country': '!source.scopes.country[]',
                    'source_scopes_state': 'source.scopes.state[]',
                    'not_source_scopes_state': '!source.scopes.state[]',
                    'source_scopes_city': 'source.scopes.city[]',
                    'not_source_scopes_city': '!source.scopes.city[]',
                    'source_scopes_level': 'source.scopes.level[]',
                    'not_source_scopes_level': '!source.scopes.level[]',
                    'source_links_in_count_min': 'source.links_in_count.min',
                    'source_links_in_count_max': 'source.links_in_count.max',
                    'source_rankings_alexa_rank_min': 'source.rankings.alexa.rank.min',
                    'source_rankings_alexa_rank_max': 'source.rankings.alexa.rank.max',
                    'source_rankings_alexa_country': 'source.rankings.alexa.country[]',
                    'social_shares_count_facebook_min': 'social_shares_count.facebook.min',
                    'social_shares_count_facebook_max': 'social_shares_count.facebook.max',
                    'social_shares_count_google_plus_min': 'social_shares_count.google_plus.min',
                    'social_shares_count_google_plus_max': 'social_shares_count.google_plus.max',
                    'social_shares_count_linkedin_min': 'social_shares_count.linkedin.min',
                    'social_shares_count_linkedin_max': 'social_shares_count.linkedin.max',
                    'social_shares_count_reddit_min': 'social_shares_count.reddit.min',
                    'social_shares_count_reddit_max': 'social_shares_count.reddit.max',
                    'clusters': 'clusters[]',
                    '_return': 'return[]',
                    'story_id': 'story_id',
                    'story_url': 'story_url',
                    'story_title': 'story_title',
                    'story_body': 'story_body',
                    'aql': 'aql',
                    'aql_default_field': 'aql_default_field',
                    'query': 'query',
                    'boost_by': 'boost_by',
                    'story_language': 'story_language',
                    'per_page': 'per_page',
                },
                'location_map': {
                    'id': 'query',
                    'not_id': 'query',
                    'title': 'query',
                    'body': 'query',
                    'text': 'query',
                    'translations_en_title': 'query',
                    'translations_en_body': 'query',
                    'translations_en_text': 'query',
                    'links_permalink': 'query',
                    'not_links_permalink': 'query',
                    'language': 'query',
                    'not_language': 'query',
                    'published_at_start': 'query',
                    'published_at_end': 'query',
                    'categories_taxonomy': 'query',
                    'categories_confident': 'query',
                    'categories_id': 'query',
                    'not_categories_id': 'query',
                    'categories_label': 'query',
                    'not_categories_label': 'query',
                    'categories_level': 'query',
                    'not_categories_level': 'query',
                    'entities_id': 'query',
                    'not_entities_id': 'query',
                    'entities_links_wikipedia': 'query',
                    'not_entities_links_wikipedia': 'query',
                    'entities_links_wikidata': 'query',
                    'not_entities_links_wikidata': 'query',
                    'entities_types': 'query',
                    'not_entities_types': 'query',
                    'entities_stock_tickers': 'query',
                    'entities_body_stock_tickers': 'query',
                    'entities_body_surface_forms_text': 'query',
                    'entities_surface_forms_text': 'query',
                    'entities_title_id': 'query',
                    'not_entities_title_id': 'query',
                    'entities_title_surface_forms_text': 'query',
                    'not_entities_title_surface_forms_text': 'query',
                    'entities_title_text': 'query',
                    'not_entities_title_text': 'query',
                    'entities_title_type': 'query',
                    'not_entities_title_type': 'query',
                    'entities_title_stock_ticker': 'query',
                    'not_entities_title_stock_ticker': 'query',
                    'entities_title_links_dbpedia': 'query',
                    'not_entities_title_links_dbpedia': 'query',
                    'entities_title_links_wikipedia': 'query',
                    'not_entities_title_links_wikipedia': 'query',
                    'entities_title_links_wikidata': 'query',
                    'not_entities_title_links_wikidata': 'query',
                    'entities_body_id': 'query',
                    'not_entities_body_id': 'query',
                    'not_entities_body_surface_forms_text': 'query',
                    'entities_body_text': 'query',
                    'not_entities_body_text': 'query',
                    'entities_body_type': 'query',
                    'not_entities_body_type': 'query',
                    'entities_body_stock_ticker': 'query',
                    'not_entities_body_stock_ticker': 'query',
                    'entities_body_links_dbpedia': 'query',
                    'not_entities_body_links_dbpedia': 'query',
                    'entities_body_links_wikipedia': 'query',
                    'not_entities_body_links_wikipedia': 'query',
                    'entities_body_links_wikidata': 'query',
                    'not_entities_body_links_wikidata': 'query',
                    'sentiment_title_polarity': 'query',
                    'not_sentiment_title_polarity': 'query',
                    'sentiment_body_polarity': 'query',
                    'not_sentiment_body_polarity': 'query',
                    'media_images_count_min': 'query',
                    'media_images_count_max': 'query',
                    'media_images_width_min': 'query',
                    'media_images_width_max': 'query',
                    'media_images_height_min': 'query',
                    'media_images_height_max': 'query',
                    'media_images_content_length_min': 'query',
                    'media_images_content_length_max': 'query',
                    'media_images_format': 'query',
                    'not_media_images_format': 'query',
                    'media_videos_count_min': 'query',
                    'media_videos_count_max': 'query',
                    'author_id': 'query',
                    'not_author_id': 'query',
                    'author_name': 'query',
                    'not_author_name': 'query',
                    'source_id': 'query',
                    'not_source_id': 'query',
                    'source_name': 'query',
                    'not_source_name': 'query',
                    'source_domain': 'query',
                    'not_source_domain': 'query',
                    'source_locations_country': 'query',
                    'not_source_locations_country': 'query',
                    'source_locations_state': 'query',
                    'not_source_locations_state': 'query',
                    'source_locations_city': 'query',
                    'not_source_locations_city': 'query',
                    'source_scopes_country': 'query',
                    'not_source_scopes_country': 'query',
                    'source_scopes_state': 'query',
                    'not_source_scopes_state': 'query',
                    'source_scopes_city': 'query',
                    'not_source_scopes_city': 'query',
                    'source_scopes_level': 'query',
                    'not_source_scopes_level': 'query',
                    'source_links_in_count_min': 'query',
                    'source_links_in_count_max': 'query',
                    'source_rankings_alexa_rank_min': 'query',
                    'source_rankings_alexa_rank_max': 'query',
                    'source_rankings_alexa_country': 'query',
                    'social_shares_count_facebook_min': 'query',
                    'social_shares_count_facebook_max': 'query',
                    'social_shares_count_google_plus_min': 'query',
                    'social_shares_count_google_plus_max': 'query',
                    'social_shares_count_linkedin_min': 'query',
                    'social_shares_count_linkedin_max': 'query',
                    'social_shares_count_reddit_min': 'query',
                    'social_shares_count_reddit_max': 'query',
                    'clusters': 'query',
                    '_return': 'query',
                    'story_id': 'query',
                    'story_url': 'query',
                    'story_title': 'query',
                    'story_body': 'query',
                    'aql': 'query',
                    'aql_default_field': 'query',
                    'query': 'query',
                    'boost_by': 'query',
                    'story_language': 'query',
                    'per_page': 'query',
                },
                'collection_format_map': {
                    'id': 'multi',
                    'not_id': 'multi',
                    'links_permalink': 'multi',
                    'not_links_permalink': 'multi',
                    'language': 'multi',
                    'not_language': 'multi',
                    'categories_id': 'multi',
                    'not_categories_id': 'multi',
                    'categories_label': 'multi',
                    'not_categories_label': 'multi',
                    'categories_level': 'multi',
                    'not_categories_level': 'multi',
                    'entities_id': 'multi',
                    'not_entities_id': 'multi',
                    'entities_links_wikipedia': 'multi',
                    'not_entities_links_wikipedia': 'multi',
                    'entities_links_wikidata': 'multi',
                    'not_entities_links_wikidata': 'multi',
                    'entities_types': 'multi',
                    'not_entities_types': 'multi',
                    'entities_stock_tickers': 'multi',
                    'entities_body_stock_tickers': 'multi',
                    'entities_body_surface_forms_text': 'multi',
                    'entities_surface_forms_text': 'multi',
                    'entities_title_id': 'multi',
                    'not_entities_title_id': 'multi',
                    'not_entities_title_surface_forms_text': 'multi',
                    'entities_title_text': 'multi',
                    'not_entities_title_text': 'multi',
                    'entities_title_type': 'multi',
                    'not_entities_title_type': 'multi',
                    'entities_title_stock_ticker': 'multi',
                    'not_entities_title_stock_ticker': 'multi',
                    'entities_title_links_dbpedia': 'multi',
                    'not_entities_title_links_dbpedia': 'multi',
                    'entities_title_links_wikipedia': 'multi',
                    'not_entities_title_links_wikipedia': 'multi',
                    'entities_title_links_wikidata': 'multi',
                    'not_entities_title_links_wikidata': 'multi',
                    'entities_body_id': 'multi',
                    'not_entities_body_id': 'multi',
                    'not_entities_body_surface_forms_text': 'multi',
                    'entities_body_text': 'multi',
                    'not_entities_body_text': 'multi',
                    'entities_body_type': 'multi',
                    'not_entities_body_type': 'multi',
                    'entities_body_stock_ticker': 'multi',
                    'not_entities_body_stock_ticker': 'multi',
                    'entities_body_links_dbpedia': 'multi',
                    'not_entities_body_links_dbpedia': 'multi',
                    'entities_body_links_wikipedia': 'multi',
                    'not_entities_body_links_wikipedia': 'multi',
                    'entities_body_links_wikidata': 'multi',
                    'not_entities_body_links_wikidata': 'multi',
                    'media_images_format': 'multi',
                    'not_media_images_format': 'multi',
                    'author_id': 'multi',
                    'not_author_id': 'multi',
                    'source_id': 'multi',
                    'not_source_id': 'multi',
                    'source_name': 'multi',
                    'not_source_name': 'multi',
                    'source_domain': 'multi',
                    'not_source_domain': 'multi',
                    'source_locations_country': 'multi',
                    'not_source_locations_country': 'multi',
                    'source_locations_state': 'multi',
                    'not_source_locations_state': 'multi',
                    'source_locations_city': 'multi',
                    'not_source_locations_city': 'multi',
                    'source_scopes_country': 'multi',
                    'not_source_scopes_country': 'multi',
                    'source_scopes_state': 'multi',
                    'not_source_scopes_state': 'multi',
                    'source_scopes_city': 'multi',
                    'not_source_scopes_city': 'multi',
                    'source_scopes_level': 'multi',
                    'not_source_scopes_level': 'multi',
                    'source_rankings_alexa_country': 'multi',
                    'clusters': 'multi',
                    '_return': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_related_stories_get
        )

        def __list_related_stories_post(
            self,
            **kwargs
        ):
            """list_related_stories_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_related_stories_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                id ([int], none_type): This parameter is used for finding stories by story id. . [optional]
                not_id ([int], none_type): This parameter is used for excluding stories by story id. . [optional]
                title (str, none_type): This parameter is used for finding stories whose title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                body (str, none_type): This parameter is used for finding stories whose body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                text (str, none_type): This parameter is used for finding stories whose title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                translations_en_title (str, none_type): This parameter is used for finding stories whose translation title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                translations_en_body (str, none_type): This parameter is used for finding stories whose translation body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                translations_en_text (str, none_type): This parameter is used for finding stories whose translation title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                links_permalink ([str], none_type): This parameter is used to find stories based on their url. . [optional]
                not_links_permalink ([str], none_type): This parameter is used to exclude stories based on their url. . [optional]
                language ([str], none_type): This parameter is used for finding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes. . [optional]
                not_language ([str], none_type): This parameter is used for excluding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes. . [optional]
                published_at_start (str, none_type): This parameter is used for finding stories whose published at time is greater than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). . [optional]
                published_at_end (str, none_type): This parameter is used for finding stories whose published at time is less than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). . [optional]
                categories_taxonomy (str, none_type): This parameter is used for defining the type of the taxonomy for the rest of the categories queries. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                categories_confident (bool, none_type): This parameter is used for finding stories whose categories are confident. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional] if omitted the server will use the default value of True
                categories_id ([str], none_type): This parameter is used for finding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                not_categories_id ([str], none_type): This parameter is used for excluding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                categories_label ([str], none_type): This parameter is used for finding stories by categories label. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                not_categories_label ([str], none_type): This parameter is used for excluding stories by categories label. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                categories_level ([int], none_type): This parameter is used for finding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                not_categories_level ([int], none_type): This parameter is used for excluding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                entities_id ([str], none_type): This parameter is used to find stories based on the specified entities `id`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_id ([str], none_type): This parameter is used to exclude stories based on the specified entity's `id`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_links_wikipedia ([str], none_type): This parameter is used to find stories based on the specified entities wikipedia URL. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_links_wikipedia ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikipedia URL. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_links_wikidata ([str], none_type): This parameter is used to find stories based on the specified entities wikidata URL. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_links_wikidata ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikidata URL. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_types ([str], none_type): This parameter is used to find stories based on the specified entities `types`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_types ([str], none_type): This parameter is used to exclude stories based on the specified entity's `types`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_stock_tickers ([str], none_type): This parameter is used to find stories based on the specified entities `stock_tickers`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_stock_tickers ([str], none_type): This parameter is used to exclude stories based on the specified entity's `stock_tickers` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_surface_forms_text ([str], none_type): This parameter is used to find stories based on the specified entities `surface_form` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_surface_forms_text ([str], none_type): This parameter is used to exclude stories based on the specified entity's `surface_form`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_id ([str], none_type): This parameter is used to find stories based on the specified entities `id` in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_id ([str], none_type): This parameter is used to exclude stories based on the specified entity's `id` in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_surface_forms_text (str, none_type): This parameter is used to find stories based on the specified entities `surface_form` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_surface_forms_text ([str], none_type): This parameter is used to exclude stories based on the specified entity's `surface_form` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_text ([str], none_type): This parameter is used to find stories based on the specified entities `text` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_text ([str], none_type): This parameter is used to exclude stories based on the specified entities `text` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_type ([str], none_type): This parameter is used to find stories based on the specified entities `type` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_type ([str], none_type): This parameter is used to exclude stories based on the specified entities `type` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_stock_ticker ([str], none_type): This parameter is used to find stories based on the specified entities `stock_ticker` in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_stock_ticker ([str], none_type): This parameter is used to exclude stories based on the specified entity's `stock_ticker` in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_links_dbpedia ([str], none_type): This parameter is used to find stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_links_dbpedia ([str], none_type): This parameter is used to exclude stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_links_wikipedia ([str], none_type): This parameter is used to find stories based on the specified entities wikipedia URL in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_links_wikipedia ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikipedia URL in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_links_wikidata ([str], none_type): This parameter is used to find stories based on the specified entities wikidata URL in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_links_wikidata ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikidata URL in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_id ([str], none_type): This parameter is used to find stories based on the specified entities `id` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_id ([str], none_type): This parameter is used to exclude stories based on the specified entity's `id` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_surface_forms_text ([str], none_type): This parameter is used to exclude stories based on the specified entity's `surface_form` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_text ([str], none_type): This parameter is used to find stories based on the specified entities `text` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_text ([str], none_type): This parameter is used to exclude stories based on the specified entities `text` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_type ([str], none_type): This parameter is used to find stories based on the specified entities `type` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_type ([str], none_type): This parameter is used to exclude stories based on the specified entities `type` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_stock_ticker ([str], none_type): This parameter is used to find stories based on the specified entities `stock_ticker` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_stock_ticker ([str], none_type): This parameter is used to exclude stories based on the specified entity's `stock_ticker` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_links_dbpedia ([str], none_type): This parameter is used to find stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_links_dbpedia ([str], none_type): This parameter is used to exclude stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_links_wikipedia ([str], none_type): This parameter is used to find stories based on the specified entities wikipedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_links_wikipedia ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikipedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_links_wikidata ([str], none_type): This parameter is used to find stories based on the specified entities wikidata URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_links_wikidata ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikidata URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                sentiment_title_polarity (str, none_type): This parameter is used for finding stories whose title sentiment is the specified value. . [optional]
                not_sentiment_title_polarity (str, none_type): This parameter is used for excluding stories whose title sentiment is the specified value. . [optional]
                sentiment_body_polarity (str, none_type): This parameter is used for finding stories whose body sentiment is the specified value. . [optional]
                not_sentiment_body_polarity (str, none_type): This parameter is used for excluding stories whose body sentiment is the specified value. . [optional]
                media_images_count_min (int, none_type): This parameter is used for finding stories whose number of images is greater than or equal to the specified value. . [optional]
                media_images_count_max (int, none_type): This parameter is used for finding stories whose number of images is less than or equal to the specified value. . [optional]
                media_images_width_min (int, none_type): This parameter is used for finding stories whose width of images are greater than or equal to the specified value. . [optional]
                media_images_width_max (int, none_type): This parameter is used for finding stories whose width of images are less than or equal to the specified value. . [optional]
                media_images_height_min (int, none_type): This parameter is used for finding stories whose height of images are greater than or equal to the specified value. . [optional]
                media_images_height_max (int, none_type): This parameter is used for finding stories whose height of images are less than or equal to the specified value. . [optional]
                media_images_content_length_min (int, none_type): This parameter is used for finding stories whose images content length are greater than or equal to the specified value. . [optional]
                media_images_content_length_max (int, none_type): This parameter is used for finding stories whose images content length are less than or equal to the specified value. . [optional]
                media_images_format ([str], none_type): This parameter is used for finding stories whose images format are the specified value. . [optional]
                not_media_images_format ([str], none_type): This parameter is used for excluding stories whose images format are the specified value. . [optional]
                media_videos_count_min (int, none_type): This parameter is used for finding stories whose number of videos is greater than or equal to the specified value. . [optional]
                media_videos_count_max (int, none_type): This parameter is used for finding stories whose number of videos is less than or equal to the specified value. . [optional]
                author_id ([int], none_type): This parameter is used for finding stories whose author id is the specified value. . [optional]
                not_author_id ([int], none_type): This parameter is used for excluding stories whose author id is the specified value. . [optional]
                author_name (str, none_type): This parameter is used for finding stories whose author full name contains the specified value. . [optional]
                not_author_name (str, none_type): This parameter is used for excluding stories whose author full name contains the specified value. . [optional]
                source_id ([int], none_type): This parameter is used for finding stories whose source id is the specified value. . [optional]
                not_source_id ([int], none_type): This parameter is used for excluding stories whose source id is the specified value. . [optional]
                source_name ([str], none_type): This parameter is used for finding stories whose source name contains the specified value. . [optional]
                not_source_name ([str], none_type): This parameter is used for excluding stories whose source name contains the specified value. . [optional]
                source_domain ([str], none_type): This parameter is used for finding stories whose source domain is the specified value. . [optional]
                not_source_domain ([str], none_type): This parameter is used for excluding stories whose source domain is the specified value. . [optional]
                source_locations_country ([str], none_type): This parameter is used for finding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_locations_country ([str], none_type): This parameter is used for excluding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_locations_state ([str], none_type): This parameter is used for finding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_locations_state ([str], none_type): This parameter is used for excluding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_locations_city ([str], none_type): This parameter is used for finding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_locations_city ([str], none_type): This parameter is used for excluding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_scopes_country ([str], none_type): This parameter is used for finding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_scopes_country ([str], none_type): This parameter is used for excluding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_scopes_state ([str], none_type): This parameter is used for finding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_scopes_state ([str], none_type): This parameter is used for excluding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_scopes_city ([str], none_type): This parameter is used for finding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_scopes_city ([str], none_type): This parameter is used for excluding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_scopes_level ([str], none_type): This parameter is used for finding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_scopes_level ([str], none_type): This parameter is used for excluding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_links_in_count_min (int, none_type): This parameter is used for finding stories from sources whose Links in count is greater than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count). . [optional]
                source_links_in_count_max (int, none_type): This parameter is used for finding stories from sources whose Links in count is less than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count). . [optional]
                source_rankings_alexa_rank_min (int, none_type): This parameter is used for finding stories from sources whose Alexa rank is greater than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks). . [optional]
                source_rankings_alexa_rank_max (int, none_type): This parameter is used for finding stories from sources whose Alexa rank is less than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks). . [optional]
                source_rankings_alexa_country ([str], none_type): This parameter is used for finding stories from sources whose Alexa rank is in the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks). . [optional]
                social_shares_count_facebook_min (int, none_type): This parameter is used for finding stories whose Facebook social shares count is greater than or equal to the specified value. . [optional]
                social_shares_count_facebook_max (int, none_type): This parameter is used for finding stories whose Facebook social shares count is less than or equal to the specified value. . [optional]
                social_shares_count_google_plus_min (int, none_type): This parameter is used for finding stories whose Google+ social shares count is greater than or equal to the specified value. . [optional]
                social_shares_count_google_plus_max (int, none_type): This parameter is used for finding stories whose Google+ social shares count is less than or equal to the specified value. . [optional]
                social_shares_count_linkedin_min (int, none_type): This parameter is used for finding stories whose LinkedIn social shares count is greater than or equal to the specified value. . [optional]
                social_shares_count_linkedin_max (int, none_type): This parameter is used for finding stories whose LinkedIn social shares count is less than or equal to the specified value. . [optional]
                social_shares_count_reddit_min (int, none_type): This parameter is used for finding stories whose Reddit social shares count is greater than or equal to the specified value. . [optional]
                social_shares_count_reddit_max (int, none_type): This parameter is used for finding stories whose Reddit social shares count is less than or equal to the specified value. . [optional]
                clusters ([str], none_type): This parameter is used for finding stories with belonging to one of clusters in a specific set of clusters You can read more about working with clustering [here](https://newsapi.aylien.com/docs/working-with-clustering). . [optional]
                _return ([str], none_type): This parameter is used for specifying return fields.. [optional]
                story_id (int, none_type): A story id. [optional]
                story_url (str, none_type): An article or webpage. [optional]
                story_title (str, none_type): Title of the article. [optional]
                story_body (str, none_type): Body of the article. [optional]
                aql (str, none_type): This parameter is used to supply a query in AYLIEN Query Language. . [optional]
                aql_default_field (str, none_type): This parameter is used to supply an optional default field name used in the AQL query. . [optional] if omitted the server will use the default value of "text"
                query (str, none_type): This parameter is used to make an advanced query using $and, $or, $not logical operators and $eq for exact match, $text for a text search and $lt, $gt, $lte, $gte for range queries. value must be a json string. . [optional]
                boost_by (str, none_type): This parameter is used for boosting the result by the specified value. . [optional]
                story_language (str, none_type): This parameter is used for setting the language of the story. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes. . [optional] if omitted the server will use the default value of "auto"
                per_page (int, none_type): This parameter is used for specifying number of items in each page. . [optional] if omitted the server will use the default value of 3
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                dict
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.list_related_stories_post = _Endpoint(
            settings={
                'response_type': (dict,),
                'auth': [
                    'app_id',
                    'app_key'
                ],
                'endpoint_path': '/related_stories',
                'operation_id': 'list_related_stories_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'not_id',
                    'title',
                    'body',
                    'text',
                    'translations_en_title',
                    'translations_en_body',
                    'translations_en_text',
                    'links_permalink',
                    'not_links_permalink',
                    'language',
                    'not_language',
                    'published_at_start',
                    'published_at_end',
                    'categories_taxonomy',
                    'categories_confident',
                    'categories_id',
                    'not_categories_id',
                    'categories_label',
                    'not_categories_label',
                    'categories_level',
                    'not_categories_level',
                    'entities_id',
                    'not_entities_id',
                    'entities_links_wikipedia',
                    'not_entities_links_wikipedia',
                    'entities_links_wikidata',
                    'not_entities_links_wikidata',
                    'entities_types',
                    'not_entities_types',
                    'entities_stock_tickers',
                    'entities_body_stock_tickers',
                    'entities_body_surface_forms_text',
                    'entities_surface_forms_text',
                    'entities_title_id',
                    'not_entities_title_id',
                    'entities_title_surface_forms_text',
                    'not_entities_title_surface_forms_text',
                    'entities_title_text',
                    'not_entities_title_text',
                    'entities_title_type',
                    'not_entities_title_type',
                    'entities_title_stock_ticker',
                    'not_entities_title_stock_ticker',
                    'entities_title_links_dbpedia',
                    'not_entities_title_links_dbpedia',
                    'entities_title_links_wikipedia',
                    'not_entities_title_links_wikipedia',
                    'entities_title_links_wikidata',
                    'not_entities_title_links_wikidata',
                    'entities_body_id',
                    'not_entities_body_id',
                    'not_entities_body_surface_forms_text',
                    'entities_body_text',
                    'not_entities_body_text',
                    'entities_body_type',
                    'not_entities_body_type',
                    'entities_body_stock_ticker',
                    'not_entities_body_stock_ticker',
                    'entities_body_links_dbpedia',
                    'not_entities_body_links_dbpedia',
                    'entities_body_links_wikipedia',
                    'not_entities_body_links_wikipedia',
                    'entities_body_links_wikidata',
                    'not_entities_body_links_wikidata',
                    'sentiment_title_polarity',
                    'not_sentiment_title_polarity',
                    'sentiment_body_polarity',
                    'not_sentiment_body_polarity',
                    'media_images_count_min',
                    'media_images_count_max',
                    'media_images_width_min',
                    'media_images_width_max',
                    'media_images_height_min',
                    'media_images_height_max',
                    'media_images_content_length_min',
                    'media_images_content_length_max',
                    'media_images_format',
                    'not_media_images_format',
                    'media_videos_count_min',
                    'media_videos_count_max',
                    'author_id',
                    'not_author_id',
                    'author_name',
                    'not_author_name',
                    'source_id',
                    'not_source_id',
                    'source_name',
                    'not_source_name',
                    'source_domain',
                    'not_source_domain',
                    'source_locations_country',
                    'not_source_locations_country',
                    'source_locations_state',
                    'not_source_locations_state',
                    'source_locations_city',
                    'not_source_locations_city',
                    'source_scopes_country',
                    'not_source_scopes_country',
                    'source_scopes_state',
                    'not_source_scopes_state',
                    'source_scopes_city',
                    'not_source_scopes_city',
                    'source_scopes_level',
                    'not_source_scopes_level',
                    'source_links_in_count_min',
                    'source_links_in_count_max',
                    'source_rankings_alexa_rank_min',
                    'source_rankings_alexa_rank_max',
                    'source_rankings_alexa_country',
                    'social_shares_count_facebook_min',
                    'social_shares_count_facebook_max',
                    'social_shares_count_google_plus_min',
                    'social_shares_count_google_plus_max',
                    'social_shares_count_linkedin_min',
                    'social_shares_count_linkedin_max',
                    'social_shares_count_reddit_min',
                    'social_shares_count_reddit_max',
                    'clusters',
                    '_return',
                    'story_id',
                    'story_url',
                    'story_title',
                    'story_body',
                    'aql',
                    'aql_default_field',
                    'query',
                    'boost_by',
                    'story_language',
                    'per_page',
                ],
                'required': [],
                'nullable': [
                    'id',
                    'not_id',
                    'title',
                    'body',
                    'text',
                    'translations_en_title',
                    'translations_en_body',
                    'translations_en_text',
                    'links_permalink',
                    'not_links_permalink',
                    'language',
                    'not_language',
                    'published_at_start',
                    'published_at_end',
                    'categories_taxonomy',
                    'categories_confident',
                    'categories_id',
                    'not_categories_id',
                    'categories_label',
                    'not_categories_label',
                    'categories_level',
                    'not_categories_level',
                    'entities_id',
                    'not_entities_id',
                    'entities_links_wikipedia',
                    'not_entities_links_wikipedia',
                    'entities_links_wikidata',
                    'not_entities_links_wikidata',
                    'entities_types',
                    'not_entities_types',
                    'entities_stock_tickers',
                    'entities_body_stock_tickers',
                    'entities_body_surface_forms_text',
                    'entities_surface_forms_text',
                    'entities_title_id',
                    'not_entities_title_id',
                    'entities_title_surface_forms_text',
                    'not_entities_title_surface_forms_text',
                    'entities_title_text',
                    'not_entities_title_text',
                    'entities_title_type',
                    'not_entities_title_type',
                    'entities_title_stock_ticker',
                    'not_entities_title_stock_ticker',
                    'entities_title_links_dbpedia',
                    'not_entities_title_links_dbpedia',
                    'entities_title_links_wikipedia',
                    'not_entities_title_links_wikipedia',
                    'entities_title_links_wikidata',
                    'not_entities_title_links_wikidata',
                    'entities_body_id',
                    'not_entities_body_id',
                    'not_entities_body_surface_forms_text',
                    'entities_body_text',
                    'not_entities_body_text',
                    'entities_body_type',
                    'not_entities_body_type',
                    'entities_body_stock_ticker',
                    'not_entities_body_stock_ticker',
                    'entities_body_links_dbpedia',
                    'not_entities_body_links_dbpedia',
                    'entities_body_links_wikipedia',
                    'not_entities_body_links_wikipedia',
                    'entities_body_links_wikidata',
                    'not_entities_body_links_wikidata',
                    'sentiment_title_polarity',
                    'not_sentiment_title_polarity',
                    'sentiment_body_polarity',
                    'not_sentiment_body_polarity',
                    'media_images_count_min',
                    'media_images_count_max',
                    'media_images_width_min',
                    'media_images_width_max',
                    'media_images_height_min',
                    'media_images_height_max',
                    'media_images_content_length_min',
                    'media_images_content_length_max',
                    'media_images_format',
                    'not_media_images_format',
                    'media_videos_count_min',
                    'media_videos_count_max',
                    'author_id',
                    'not_author_id',
                    'author_name',
                    'not_author_name',
                    'source_id',
                    'not_source_id',
                    'source_name',
                    'not_source_name',
                    'source_domain',
                    'not_source_domain',
                    'source_locations_country',
                    'not_source_locations_country',
                    'source_locations_state',
                    'not_source_locations_state',
                    'source_locations_city',
                    'not_source_locations_city',
                    'source_scopes_country',
                    'not_source_scopes_country',
                    'source_scopes_state',
                    'not_source_scopes_state',
                    'source_scopes_city',
                    'not_source_scopes_city',
                    'source_scopes_level',
                    'not_source_scopes_level',
                    'source_links_in_count_min',
                    'source_links_in_count_max',
                    'source_rankings_alexa_rank_min',
                    'source_rankings_alexa_rank_max',
                    'source_rankings_alexa_country',
                    'social_shares_count_facebook_min',
                    'social_shares_count_facebook_max',
                    'social_shares_count_google_plus_min',
                    'social_shares_count_google_plus_max',
                    'social_shares_count_linkedin_min',
                    'social_shares_count_linkedin_max',
                    'social_shares_count_reddit_min',
                    'social_shares_count_reddit_max',
                    'clusters',
                    '_return',
                    'story_id',
                    'story_url',
                    'story_title',
                    'story_body',
                    'aql',
                    'aql_default_field',
                    'query',
                    'boost_by',
                    'story_language',
                    'per_page',
                ],
                'enum': [
                    'language',
                    'not_language',
                    'categories_taxonomy',
                    'sentiment_title_polarity',
                    'not_sentiment_title_polarity',
                    'sentiment_body_polarity',
                    'not_sentiment_body_polarity',
                    'media_images_format',
                    'not_media_images_format',
                    'source_scopes_level',
                    'not_source_scopes_level',
                    '_return',
                    'boost_by',
                    'story_language',
                ],
                'validation': [
                    'media_images_count_min',
                    'media_images_count_max',
                    'media_images_width_min',
                    'media_images_width_max',
                    'media_images_height_min',
                    'media_images_height_max',
                    'media_images_content_length_min',
                    'media_images_content_length_max',
                    'media_videos_count_min',
                    'media_videos_count_max',
                    'source_links_in_count_min',
                    'source_links_in_count_max',
                    'source_rankings_alexa_rank_min',
                    'source_rankings_alexa_rank_max',
                    'social_shares_count_facebook_min',
                    'social_shares_count_facebook_max',
                    'social_shares_count_google_plus_min',
                    'social_shares_count_google_plus_max',
                    'social_shares_count_linkedin_min',
                    'social_shares_count_linkedin_max',
                    'social_shares_count_reddit_min',
                    'social_shares_count_reddit_max',
                    'per_page',
                ]
            },
            root_map={
                'validations': {
                    ('media_images_count_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_count_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_width_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_width_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_height_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_height_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_content_length_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_content_length_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_videos_count_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_videos_count_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('source_links_in_count_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('source_links_in_count_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('source_rankings_alexa_rank_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('source_rankings_alexa_rank_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_facebook_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_facebook_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_google_plus_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_google_plus_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_linkedin_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_linkedin_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_reddit_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_reddit_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('per_page',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('language',): {
                        'None': None,
                        "EN": "en",
                        "DE": "de",
                        "FR": "fr",
                        "IT": "it",
                        "ES": "es",
                        "PT": "pt"
                    },
                    ('not_language',): {
                        'None': None,
                        "EN": "en",
                        "DE": "de",
                        "FR": "fr",
                        "IT": "it",
                        "ES": "es",
                        "PT": "pt"
                    },
                    ('categories_taxonomy',): {
                        'None': None,
                        "IAB-QAG": "iab-qag",
                        "IPTC-SUBJECTCODE": "iptc-subjectcode"
                    },
                    ('sentiment_title_polarity',): {
                        'None': None,
                        "POSITIVE": "positive",
                        "NEUTRAL": "neutral",
                        "NEGATIVE": "negative"
                    },
                    ('not_sentiment_title_polarity',): {
                        'None': None,
                        "POSITIVE": "positive",
                        "NEUTRAL": "neutral",
                        "NEGATIVE": "negative"
                    },
                    ('sentiment_body_polarity',): {
                        'None': None,
                        "POSITIVE": "positive",
                        "NEUTRAL": "neutral",
                        "NEGATIVE": "negative"
                    },
                    ('not_sentiment_body_polarity',): {
                        'None': None,
                        "POSITIVE": "positive",
                        "NEUTRAL": "neutral",
                        "NEGATIVE": "negative"
                    },
                    ('media_images_format',): {
                        'None': None,
                        "BMP": "BMP",
                        "GIF": "GIF",
                        "JPEG": "JPEG",
                        "PNG": "PNG",
                        "TIFF": "TIFF",
                        "PSD": "PSD",
                        "ICO": "ICO",
                        "CUR": "CUR",
                        "WEBP": "WEBP",
                        "SVG": "SVG"
                    },
                    ('not_media_images_format',): {
                        'None': None,
                        "BMP": "BMP",
                        "GIF": "GIF",
                        "JPEG": "JPEG",
                        "PNG": "PNG",
                        "TIFF": "TIFF",
                        "PSD": "PSD",
                        "ICO": "ICO",
                        "CUR": "CUR",
                        "WEBP": "WEBP",
                        "SVG": "SVG"
                    },
                    ('source_scopes_level',): {
                        'None': None,
                        "INTERNATIONAL": "international",
                        "NATIONAL": "national",
                        "LOCAL": "local"
                    },
                    ('not_source_scopes_level',): {
                        'None': None,
                        "INTERNATIONAL": "international",
                        "NATIONAL": "national",
                        "LOCAL": "local"
                    },
                    ('_return',): {
                        'None': None,
                        "ID": "id",
                        "TITLE": "title",
                        "BODY": "body",
                        "SUMMARY": "summary",
                        "SOURCE": "source",
                        "AUTHOR": "author",
                        "ENTITIES": "entities",
                        "KEYWORDS": "keywords",
                        "HASHTAGS": "hashtags",
                        "CHARACTERS_COUNT": "characters_count",
                        "WORDS_COUNT": "words_count",
                        "SENTENCES_COUNT": "sentences_count",
                        "PARAGRAPHS_COUNT": "paragraphs_count",
                        "CATEGORIES": "categories",
                        "SOCIAL_SHARES_COUNT": "social_shares_count",
                        "MEDIA": "media",
                        "SENTIMENT": "sentiment",
                        "LANGUAGE": "language",
                        "PUBLISHED_AT": "published_at",
                        "LINKS": "links"
                    },
                    ('boost_by',): {
                        'None': None,
                        "RECENCY": "recency",
                        "POPULARITY": "popularity"
                    },
                    ('story_language',): {
                        'None': None,
                        "AUTO": "auto",
                        "EN": "en",
                        "DE": "de",
                        "FR": "fr",
                        "IT": "it",
                        "ES": "es",
                        "PT": "pt"
                    },
                },
                'openapi_types': {
                    'id':
                        ([int], none_type,),
                    'not_id':
                        ([int], none_type,),
                    'title':
                        (str, none_type,),
                    'body':
                        (str, none_type,),
                    'text':
                        (str, none_type,),
                    'translations_en_title':
                        (str, none_type,),
                    'translations_en_body':
                        (str, none_type,),
                    'translations_en_text':
                        (str, none_type,),
                    'links_permalink':
                        ([str], none_type,),
                    'not_links_permalink':
                        ([str], none_type,),
                    'language':
                        ([str], none_type,),
                    'not_language':
                        ([str], none_type,),
                    'published_at_start':
                        (str, none_type,),
                    'published_at_end':
                        (str, none_type,),
                    'categories_taxonomy':
                        (str, none_type,),
                    'categories_confident':
                        (bool, none_type,),
                    'categories_id':
                        ([str], none_type,),
                    'not_categories_id':
                        ([str], none_type,),
                    'categories_label':
                        ([str], none_type,),
                    'not_categories_label':
                        ([str], none_type,),
                    'categories_level':
                        ([int], none_type,),
                    'not_categories_level':
                        ([int], none_type,),
                    'entities_id':
                        ([str], none_type,),
                    'not_entities_id':
                        ([str], none_type,),
                    'entities_links_wikipedia':
                        ([str], none_type,),
                    'not_entities_links_wikipedia':
                        ([str], none_type,),
                    'entities_links_wikidata':
                        ([str], none_type,),
                    'not_entities_links_wikidata':
                        ([str], none_type,),
                    'entities_types':
                        ([str], none_type,),
                    'not_entities_types':
                        ([str], none_type,),
                    'entities_stock_tickers':
                        ([str], none_type,),
                    'entities_body_stock_tickers':
                        ([str], none_type,),
                    'entities_body_surface_forms_text':
                        ([str], none_type,),
                    'entities_surface_forms_text':
                        ([str], none_type,),
                    'entities_title_id':
                        ([str], none_type,),
                    'not_entities_title_id':
                        ([str], none_type,),
                    'entities_title_surface_forms_text':
                        (str, none_type,),
                    'not_entities_title_surface_forms_text':
                        ([str], none_type,),
                    'entities_title_text':
                        ([str], none_type,),
                    'not_entities_title_text':
                        ([str], none_type,),
                    'entities_title_type':
                        ([str], none_type,),
                    'not_entities_title_type':
                        ([str], none_type,),
                    'entities_title_stock_ticker':
                        ([str], none_type,),
                    'not_entities_title_stock_ticker':
                        ([str], none_type,),
                    'entities_title_links_dbpedia':
                        ([str], none_type,),
                    'not_entities_title_links_dbpedia':
                        ([str], none_type,),
                    'entities_title_links_wikipedia':
                        ([str], none_type,),
                    'not_entities_title_links_wikipedia':
                        ([str], none_type,),
                    'entities_title_links_wikidata':
                        ([str], none_type,),
                    'not_entities_title_links_wikidata':
                        ([str], none_type,),
                    'entities_body_id':
                        ([str], none_type,),
                    'not_entities_body_id':
                        ([str], none_type,),
                    'not_entities_body_surface_forms_text':
                        ([str], none_type,),
                    'entities_body_text':
                        ([str], none_type,),
                    'not_entities_body_text':
                        ([str], none_type,),
                    'entities_body_type':
                        ([str], none_type,),
                    'not_entities_body_type':
                        ([str], none_type,),
                    'entities_body_stock_ticker':
                        ([str], none_type,),
                    'not_entities_body_stock_ticker':
                        ([str], none_type,),
                    'entities_body_links_dbpedia':
                        ([str], none_type,),
                    'not_entities_body_links_dbpedia':
                        ([str], none_type,),
                    'entities_body_links_wikipedia':
                        ([str], none_type,),
                    'not_entities_body_links_wikipedia':
                        ([str], none_type,),
                    'entities_body_links_wikidata':
                        ([str], none_type,),
                    'not_entities_body_links_wikidata':
                        ([str], none_type,),
                    'sentiment_title_polarity':
                        (str, none_type,),
                    'not_sentiment_title_polarity':
                        (str, none_type,),
                    'sentiment_body_polarity':
                        (str, none_type,),
                    'not_sentiment_body_polarity':
                        (str, none_type,),
                    'media_images_count_min':
                        (int, none_type,),
                    'media_images_count_max':
                        (int, none_type,),
                    'media_images_width_min':
                        (int, none_type,),
                    'media_images_width_max':
                        (int, none_type,),
                    'media_images_height_min':
                        (int, none_type,),
                    'media_images_height_max':
                        (int, none_type,),
                    'media_images_content_length_min':
                        (int, none_type,),
                    'media_images_content_length_max':
                        (int, none_type,),
                    'media_images_format':
                        ([str], none_type,),
                    'not_media_images_format':
                        ([str], none_type,),
                    'media_videos_count_min':
                        (int, none_type,),
                    'media_videos_count_max':
                        (int, none_type,),
                    'author_id':
                        ([int], none_type,),
                    'not_author_id':
                        ([int], none_type,),
                    'author_name':
                        (str, none_type,),
                    'not_author_name':
                        (str, none_type,),
                    'source_id':
                        ([int], none_type,),
                    'not_source_id':
                        ([int], none_type,),
                    'source_name':
                        ([str], none_type,),
                    'not_source_name':
                        ([str], none_type,),
                    'source_domain':
                        ([str], none_type,),
                    'not_source_domain':
                        ([str], none_type,),
                    'source_locations_country':
                        ([str], none_type,),
                    'not_source_locations_country':
                        ([str], none_type,),
                    'source_locations_state':
                        ([str], none_type,),
                    'not_source_locations_state':
                        ([str], none_type,),
                    'source_locations_city':
                        ([str], none_type,),
                    'not_source_locations_city':
                        ([str], none_type,),
                    'source_scopes_country':
                        ([str], none_type,),
                    'not_source_scopes_country':
                        ([str], none_type,),
                    'source_scopes_state':
                        ([str], none_type,),
                    'not_source_scopes_state':
                        ([str], none_type,),
                    'source_scopes_city':
                        ([str], none_type,),
                    'not_source_scopes_city':
                        ([str], none_type,),
                    'source_scopes_level':
                        ([str], none_type,),
                    'not_source_scopes_level':
                        ([str], none_type,),
                    'source_links_in_count_min':
                        (int, none_type,),
                    'source_links_in_count_max':
                        (int, none_type,),
                    'source_rankings_alexa_rank_min':
                        (int, none_type,),
                    'source_rankings_alexa_rank_max':
                        (int, none_type,),
                    'source_rankings_alexa_country':
                        ([str], none_type,),
                    'social_shares_count_facebook_min':
                        (int, none_type,),
                    'social_shares_count_facebook_max':
                        (int, none_type,),
                    'social_shares_count_google_plus_min':
                        (int, none_type,),
                    'social_shares_count_google_plus_max':
                        (int, none_type,),
                    'social_shares_count_linkedin_min':
                        (int, none_type,),
                    'social_shares_count_linkedin_max':
                        (int, none_type,),
                    'social_shares_count_reddit_min':
                        (int, none_type,),
                    'social_shares_count_reddit_max':
                        (int, none_type,),
                    'clusters':
                        ([str], none_type,),
                    '_return':
                        ([str], none_type,),
                    'story_id':
                        (int, none_type,),
                    'story_url':
                        (str, none_type,),
                    'story_title':
                        (str, none_type,),
                    'story_body':
                        (str, none_type,),
                    'aql':
                        (str, none_type,),
                    'aql_default_field':
                        (str, none_type,),
                    'query':
                        (str, none_type,),
                    'boost_by':
                        (str, none_type,),
                    'story_language':
                        (str, none_type,),
                    'per_page':
                        (int, none_type,),
                },
                'attribute_map': {
                    'id': 'id[]',
                    'not_id': '!id[]',
                    'title': 'title',
                    'body': 'body',
                    'text': 'text',
                    'translations_en_title': 'translations.en.title',
                    'translations_en_body': 'translations.en.body',
                    'translations_en_text': 'translations.en.text',
                    'links_permalink': 'links.permalink[]',
                    'not_links_permalink': '!links.permalink[]',
                    'language': 'language[]',
                    'not_language': '!language[]',
                    'published_at_start': 'published_at.start',
                    'published_at_end': 'published_at.end',
                    'categories_taxonomy': 'categories.taxonomy',
                    'categories_confident': 'categories.confident',
                    'categories_id': 'categories.id[]',
                    'not_categories_id': '!categories.id[]',
                    'categories_label': 'categories.label[]',
                    'not_categories_label': '!categories.label[]',
                    'categories_level': 'categories.level[]',
                    'not_categories_level': '!categories.level[]',
                    'entities_id': 'entities.id[]',
                    'not_entities_id': '!entities.id[]',
                    'entities_links_wikipedia': 'entities.links.wikipedia[]',
                    'not_entities_links_wikipedia': '!entities.links.wikipedia[]',
                    'entities_links_wikidata': 'entities.links.wikidata[]',
                    'not_entities_links_wikidata': '!entities.links.wikidata[]',
                    'entities_types': 'entities.types[]',
                    'not_entities_types': '!entities.types[]',
                    'entities_stock_tickers': 'entities.stock_tickers[]',
                    'entities_body_stock_tickers': '!entities.body.stock_tickers[]',
                    'entities_body_surface_forms_text': 'entities.body.surface_forms.text[]',
                    'entities_surface_forms_text': '!entities.surface_forms.text[]',
                    'entities_title_id': 'entities.title.id[]',
                    'not_entities_title_id': '!entities.title.id[]',
                    'entities_title_surface_forms_text': 'entities.title.surface_forms.text[]',
                    'not_entities_title_surface_forms_text': '!entities.title.surface_forms.text[]',
                    'entities_title_text': 'entities.title.text[]',
                    'not_entities_title_text': '!entities.title.text[]',
                    'entities_title_type': 'entities.title.type[]',
                    'not_entities_title_type': '!entities.title.type[]',
                    'entities_title_stock_ticker': 'entities.title.stock_ticker[]',
                    'not_entities_title_stock_ticker': '!entities.title.stock_ticker[]',
                    'entities_title_links_dbpedia': 'entities.title.links.dbpedia[]',
                    'not_entities_title_links_dbpedia': '!entities.title.links.dbpedia[]',
                    'entities_title_links_wikipedia': 'entities.title.links.wikipedia[]',
                    'not_entities_title_links_wikipedia': '!entities.title.links.wikipedia[]',
                    'entities_title_links_wikidata': 'entities.title.links.wikidata[]',
                    'not_entities_title_links_wikidata': '!entities.title.links.wikidata[]',
                    'entities_body_id': 'entities.body.id[]',
                    'not_entities_body_id': '!entities.body.id[]',
                    'not_entities_body_surface_forms_text': '!entities.body.surface_forms.text[]',
                    'entities_body_text': 'entities.body.text[]',
                    'not_entities_body_text': '!entities.body.text[]',
                    'entities_body_type': 'entities.body.type[]',
                    'not_entities_body_type': '!entities.body.type[]',
                    'entities_body_stock_ticker': 'entities.body.stock_ticker[]',
                    'not_entities_body_stock_ticker': '!entities.body.stock_ticker[]',
                    'entities_body_links_dbpedia': 'entities.body.links.dbpedia[]',
                    'not_entities_body_links_dbpedia': '!entities.body.links.dbpedia[]',
                    'entities_body_links_wikipedia': 'entities.body.links.wikipedia[]',
                    'not_entities_body_links_wikipedia': '!entities.body.links.wikipedia[]',
                    'entities_body_links_wikidata': 'entities.body.links.wikidata[]',
                    'not_entities_body_links_wikidata': '!entities.body.links.wikidata[]',
                    'sentiment_title_polarity': 'sentiment.title.polarity',
                    'not_sentiment_title_polarity': '!sentiment.title.polarity',
                    'sentiment_body_polarity': 'sentiment.body.polarity',
                    'not_sentiment_body_polarity': '!sentiment.body.polarity',
                    'media_images_count_min': 'media.images.count.min',
                    'media_images_count_max': 'media.images.count.max',
                    'media_images_width_min': 'media.images.width.min',
                    'media_images_width_max': 'media.images.width.max',
                    'media_images_height_min': 'media.images.height.min',
                    'media_images_height_max': 'media.images.height.max',
                    'media_images_content_length_min': 'media.images.content_length.min',
                    'media_images_content_length_max': 'media.images.content_length.max',
                    'media_images_format': 'media.images.format[]',
                    'not_media_images_format': '!media.images.format[]',
                    'media_videos_count_min': 'media.videos.count.min',
                    'media_videos_count_max': 'media.videos.count.max',
                    'author_id': 'author.id[]',
                    'not_author_id': '!author.id[]',
                    'author_name': 'author.name',
                    'not_author_name': '!author.name',
                    'source_id': 'source.id[]',
                    'not_source_id': '!source.id[]',
                    'source_name': 'source.name[]',
                    'not_source_name': '!source.name[]',
                    'source_domain': 'source.domain[]',
                    'not_source_domain': '!source.domain[]',
                    'source_locations_country': 'source.locations.country[]',
                    'not_source_locations_country': '!source.locations.country[]',
                    'source_locations_state': 'source.locations.state[]',
                    'not_source_locations_state': '!source.locations.state[]',
                    'source_locations_city': 'source.locations.city[]',
                    'not_source_locations_city': '!source.locations.city[]',
                    'source_scopes_country': 'source.scopes.country[]',
                    'not_source_scopes_country': '!source.scopes.country[]',
                    'source_scopes_state': 'source.scopes.state[]',
                    'not_source_scopes_state': '!source.scopes.state[]',
                    'source_scopes_city': 'source.scopes.city[]',
                    'not_source_scopes_city': '!source.scopes.city[]',
                    'source_scopes_level': 'source.scopes.level[]',
                    'not_source_scopes_level': '!source.scopes.level[]',
                    'source_links_in_count_min': 'source.links_in_count.min',
                    'source_links_in_count_max': 'source.links_in_count.max',
                    'source_rankings_alexa_rank_min': 'source.rankings.alexa.rank.min',
                    'source_rankings_alexa_rank_max': 'source.rankings.alexa.rank.max',
                    'source_rankings_alexa_country': 'source.rankings.alexa.country[]',
                    'social_shares_count_facebook_min': 'social_shares_count.facebook.min',
                    'social_shares_count_facebook_max': 'social_shares_count.facebook.max',
                    'social_shares_count_google_plus_min': 'social_shares_count.google_plus.min',
                    'social_shares_count_google_plus_max': 'social_shares_count.google_plus.max',
                    'social_shares_count_linkedin_min': 'social_shares_count.linkedin.min',
                    'social_shares_count_linkedin_max': 'social_shares_count.linkedin.max',
                    'social_shares_count_reddit_min': 'social_shares_count.reddit.min',
                    'social_shares_count_reddit_max': 'social_shares_count.reddit.max',
                    'clusters': 'clusters[]',
                    '_return': 'return[]',
                    'story_id': 'story_id',
                    'story_url': 'story_url',
                    'story_title': 'story_title',
                    'story_body': 'story_body',
                    'aql': 'aql',
                    'aql_default_field': 'aql_default_field',
                    'query': 'query',
                    'boost_by': 'boost_by',
                    'story_language': 'story_language',
                    'per_page': 'per_page',
                },
                'location_map': {
                    'id': 'query',
                    'not_id': 'query',
                    'title': 'query',
                    'body': 'query',
                    'text': 'query',
                    'translations_en_title': 'query',
                    'translations_en_body': 'query',
                    'translations_en_text': 'query',
                    'links_permalink': 'query',
                    'not_links_permalink': 'query',
                    'language': 'query',
                    'not_language': 'query',
                    'published_at_start': 'query',
                    'published_at_end': 'query',
                    'categories_taxonomy': 'query',
                    'categories_confident': 'query',
                    'categories_id': 'query',
                    'not_categories_id': 'query',
                    'categories_label': 'query',
                    'not_categories_label': 'query',
                    'categories_level': 'query',
                    'not_categories_level': 'query',
                    'entities_id': 'query',
                    'not_entities_id': 'query',
                    'entities_links_wikipedia': 'query',
                    'not_entities_links_wikipedia': 'query',
                    'entities_links_wikidata': 'query',
                    'not_entities_links_wikidata': 'query',
                    'entities_types': 'query',
                    'not_entities_types': 'query',
                    'entities_stock_tickers': 'query',
                    'entities_body_stock_tickers': 'query',
                    'entities_body_surface_forms_text': 'query',
                    'entities_surface_forms_text': 'query',
                    'entities_title_id': 'query',
                    'not_entities_title_id': 'query',
                    'entities_title_surface_forms_text': 'query',
                    'not_entities_title_surface_forms_text': 'query',
                    'entities_title_text': 'query',
                    'not_entities_title_text': 'query',
                    'entities_title_type': 'query',
                    'not_entities_title_type': 'query',
                    'entities_title_stock_ticker': 'query',
                    'not_entities_title_stock_ticker': 'query',
                    'entities_title_links_dbpedia': 'query',
                    'not_entities_title_links_dbpedia': 'query',
                    'entities_title_links_wikipedia': 'query',
                    'not_entities_title_links_wikipedia': 'query',
                    'entities_title_links_wikidata': 'query',
                    'not_entities_title_links_wikidata': 'query',
                    'entities_body_id': 'query',
                    'not_entities_body_id': 'query',
                    'not_entities_body_surface_forms_text': 'query',
                    'entities_body_text': 'query',
                    'not_entities_body_text': 'query',
                    'entities_body_type': 'query',
                    'not_entities_body_type': 'query',
                    'entities_body_stock_ticker': 'query',
                    'not_entities_body_stock_ticker': 'query',
                    'entities_body_links_dbpedia': 'query',
                    'not_entities_body_links_dbpedia': 'query',
                    'entities_body_links_wikipedia': 'query',
                    'not_entities_body_links_wikipedia': 'query',
                    'entities_body_links_wikidata': 'query',
                    'not_entities_body_links_wikidata': 'query',
                    'sentiment_title_polarity': 'query',
                    'not_sentiment_title_polarity': 'query',
                    'sentiment_body_polarity': 'query',
                    'not_sentiment_body_polarity': 'query',
                    'media_images_count_min': 'query',
                    'media_images_count_max': 'query',
                    'media_images_width_min': 'query',
                    'media_images_width_max': 'query',
                    'media_images_height_min': 'query',
                    'media_images_height_max': 'query',
                    'media_images_content_length_min': 'query',
                    'media_images_content_length_max': 'query',
                    'media_images_format': 'query',
                    'not_media_images_format': 'query',
                    'media_videos_count_min': 'query',
                    'media_videos_count_max': 'query',
                    'author_id': 'query',
                    'not_author_id': 'query',
                    'author_name': 'query',
                    'not_author_name': 'query',
                    'source_id': 'query',
                    'not_source_id': 'query',
                    'source_name': 'query',
                    'not_source_name': 'query',
                    'source_domain': 'query',
                    'not_source_domain': 'query',
                    'source_locations_country': 'query',
                    'not_source_locations_country': 'query',
                    'source_locations_state': 'query',
                    'not_source_locations_state': 'query',
                    'source_locations_city': 'query',
                    'not_source_locations_city': 'query',
                    'source_scopes_country': 'query',
                    'not_source_scopes_country': 'query',
                    'source_scopes_state': 'query',
                    'not_source_scopes_state': 'query',
                    'source_scopes_city': 'query',
                    'not_source_scopes_city': 'query',
                    'source_scopes_level': 'query',
                    'not_source_scopes_level': 'query',
                    'source_links_in_count_min': 'query',
                    'source_links_in_count_max': 'query',
                    'source_rankings_alexa_rank_min': 'query',
                    'source_rankings_alexa_rank_max': 'query',
                    'source_rankings_alexa_country': 'query',
                    'social_shares_count_facebook_min': 'query',
                    'social_shares_count_facebook_max': 'query',
                    'social_shares_count_google_plus_min': 'query',
                    'social_shares_count_google_plus_max': 'query',
                    'social_shares_count_linkedin_min': 'query',
                    'social_shares_count_linkedin_max': 'query',
                    'social_shares_count_reddit_min': 'query',
                    'social_shares_count_reddit_max': 'query',
                    'clusters': 'query',
                    '_return': 'query',
                    'story_id': 'query',
                    'story_url': 'query',
                    'story_title': 'query',
                    'story_body': 'query',
                    'aql': 'query',
                    'aql_default_field': 'query',
                    'query': 'query',
                    'boost_by': 'query',
                    'story_language': 'query',
                    'per_page': 'query',
                },
                'collection_format_map': {
                    'id': 'multi',
                    'not_id': 'multi',
                    'links_permalink': 'multi',
                    'not_links_permalink': 'multi',
                    'language': 'multi',
                    'not_language': 'multi',
                    'categories_id': 'multi',
                    'not_categories_id': 'multi',
                    'categories_label': 'multi',
                    'not_categories_label': 'multi',
                    'categories_level': 'multi',
                    'not_categories_level': 'multi',
                    'entities_id': 'multi',
                    'not_entities_id': 'multi',
                    'entities_links_wikipedia': 'multi',
                    'not_entities_links_wikipedia': 'multi',
                    'entities_links_wikidata': 'multi',
                    'not_entities_links_wikidata': 'multi',
                    'entities_types': 'multi',
                    'not_entities_types': 'multi',
                    'entities_stock_tickers': 'multi',
                    'entities_body_stock_tickers': 'multi',
                    'entities_body_surface_forms_text': 'multi',
                    'entities_surface_forms_text': 'multi',
                    'entities_title_id': 'multi',
                    'not_entities_title_id': 'multi',
                    'not_entities_title_surface_forms_text': 'multi',
                    'entities_title_text': 'multi',
                    'not_entities_title_text': 'multi',
                    'entities_title_type': 'multi',
                    'not_entities_title_type': 'multi',
                    'entities_title_stock_ticker': 'multi',
                    'not_entities_title_stock_ticker': 'multi',
                    'entities_title_links_dbpedia': 'multi',
                    'not_entities_title_links_dbpedia': 'multi',
                    'entities_title_links_wikipedia': 'multi',
                    'not_entities_title_links_wikipedia': 'multi',
                    'entities_title_links_wikidata': 'multi',
                    'not_entities_title_links_wikidata': 'multi',
                    'entities_body_id': 'multi',
                    'not_entities_body_id': 'multi',
                    'not_entities_body_surface_forms_text': 'multi',
                    'entities_body_text': 'multi',
                    'not_entities_body_text': 'multi',
                    'entities_body_type': 'multi',
                    'not_entities_body_type': 'multi',
                    'entities_body_stock_ticker': 'multi',
                    'not_entities_body_stock_ticker': 'multi',
                    'entities_body_links_dbpedia': 'multi',
                    'not_entities_body_links_dbpedia': 'multi',
                    'entities_body_links_wikipedia': 'multi',
                    'not_entities_body_links_wikipedia': 'multi',
                    'entities_body_links_wikidata': 'multi',
                    'not_entities_body_links_wikidata': 'multi',
                    'media_images_format': 'multi',
                    'not_media_images_format': 'multi',
                    'author_id': 'multi',
                    'not_author_id': 'multi',
                    'source_id': 'multi',
                    'not_source_id': 'multi',
                    'source_name': 'multi',
                    'not_source_name': 'multi',
                    'source_domain': 'multi',
                    'not_source_domain': 'multi',
                    'source_locations_country': 'multi',
                    'not_source_locations_country': 'multi',
                    'source_locations_state': 'multi',
                    'not_source_locations_state': 'multi',
                    'source_locations_city': 'multi',
                    'not_source_locations_city': 'multi',
                    'source_scopes_country': 'multi',
                    'not_source_scopes_country': 'multi',
                    'source_scopes_state': 'multi',
                    'not_source_scopes_state': 'multi',
                    'source_scopes_city': 'multi',
                    'not_source_scopes_city': 'multi',
                    'source_scopes_level': 'multi',
                    'not_source_scopes_level': 'multi',
                    'source_rankings_alexa_country': 'multi',
                    'clusters': 'multi',
                    '_return': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_related_stories_post
        )

        def __list_stories(
            self,
            **kwargs
        ):
            """List Stories  # noqa: E501

            The stories endpoint is used to return stories based on parameters you set in your query. The News API crawler gathers articles in near real-time and stores information about them, or metadata. Below you can see all of the query parameters, which you can use to narrow down your query.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_stories(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                id ([int], none_type): This parameter is used for finding stories by story id. . [optional]
                not_id ([int], none_type): This parameter is used for excluding stories by story id. . [optional]
                title (str, none_type): This parameter is used for finding stories whose title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                body (str, none_type): This parameter is used for finding stories whose body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                text (str, none_type): This parameter is used for finding stories whose title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                translations_en_title (str, none_type): This parameter is used for finding stories whose translation title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                translations_en_body (str, none_type): This parameter is used for finding stories whose translation body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                translations_en_text (str, none_type): This parameter is used for finding stories whose translation title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                language ([str], none_type): This parameter is used for finding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes. . [optional]
                not_language ([str], none_type): This parameter is used for excluding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes. . [optional]
                links_permalink ([str], none_type): This parameter is used to find stories based on their url. . [optional]
                not_links_permalink ([str], none_type): This parameter is used to exclude stories based on their url. . [optional]
                published_at_start (str, none_type): This parameter is used for finding stories whose published at time is greater than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). . [optional]
                published_at_end (str, none_type): This parameter is used for finding stories whose published at time is less than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). . [optional]
                categories_taxonomy (str, none_type): This parameter is used for defining the type of the taxonomy for the rest of the categories queries. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                categories_confident (bool, none_type): This parameter is used for finding stories whose categories are confident. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional] if omitted the server will use the default value of True
                categories_id ([str], none_type): This parameter is used for finding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                not_categories_id ([str], none_type): This parameter is used for excluding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                categories_label ([str], none_type): This parameter is used for finding stories by categories label. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                not_categories_label ([str], none_type): This parameter is used for excluding stories by categories label. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                categories_level ([int], none_type): This parameter is used for finding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                not_categories_level ([int], none_type): This parameter is used for excluding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                entities_id ([str], none_type): This parameter is used to find stories based on the specified entities `id`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_id ([str], none_type): This parameter is used to exclude stories based on the specified entity's `id`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_links_wikipedia ([str], none_type): This parameter is used to find stories based on the specified entities wikipedia URL. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_links_wikipedia ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikipedia URL. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_links_wikidata ([str], none_type): This parameter is used to find stories based on the specified entities wikidata URL. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_links_wikidata ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikidata URL. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_types ([str], none_type): This parameter is used to find stories based on the specified entities `types`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_types ([str], none_type): This parameter is used to exclude stories based on the specified entity's `types`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_stock_tickers ([str], none_type): This parameter is used to find stories based on the specified entities `stock_tickers`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_stock_tickers ([str], none_type): This parameter is used to exclude stories based on the specified entity's `stock_tickers` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_surface_forms_text ([str], none_type): This parameter is used to find stories based on the specified entities `surface_form` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_surface_forms_text ([str], none_type): This parameter is used to exclude stories based on the specified entity's `surface_form`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_id ([str], none_type): This parameter is used to find stories based on the specified entities `id` in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_id ([str], none_type): This parameter is used to exclude stories based on the specified entity's `id` in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_surface_forms_text (str, none_type): This parameter is used to find stories based on the specified entities `surface_form` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_surface_forms_text ([str], none_type): This parameter is used to exclude stories based on the specified entity's `surface_form` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_text ([str], none_type): This parameter is used to find stories based on the specified entities `text` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_text ([str], none_type): This parameter is used to exclude stories based on the specified entities `text` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_type ([str], none_type): This parameter is used to find stories based on the specified entities `type` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_type ([str], none_type): This parameter is used to exclude stories based on the specified entities `type` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_stock_ticker ([str], none_type): This parameter is used to find stories based on the specified entities `stock_ticker` in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_stock_ticker ([str], none_type): This parameter is used to exclude stories based on the specified entity's `stock_ticker` in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_links_dbpedia ([str], none_type): This parameter is used to find stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_links_dbpedia ([str], none_type): This parameter is used to exclude stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_links_wikipedia ([str], none_type): This parameter is used to find stories based on the specified entities wikipedia URL in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_links_wikipedia ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikipedia URL in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_links_wikidata ([str], none_type): This parameter is used to find stories based on the specified entities wikidata URL in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_links_wikidata ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikidata URL in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_id ([str], none_type): This parameter is used to find stories based on the specified entities `id` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_id ([str], none_type): This parameter is used to exclude stories based on the specified entity's `id` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_surface_forms_text ([str], none_type): This parameter is used to exclude stories based on the specified entity's `surface_form` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_text ([str], none_type): This parameter is used to find stories based on the specified entities `text` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_text ([str], none_type): This parameter is used to exclude stories based on the specified entities `text` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_type ([str], none_type): This parameter is used to find stories based on the specified entities `type` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_type ([str], none_type): This parameter is used to exclude stories based on the specified entities `type` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_stock_ticker ([str], none_type): This parameter is used to find stories based on the specified entities `stock_ticker` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_stock_ticker ([str], none_type): This parameter is used to exclude stories based on the specified entity's `stock_ticker` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_links_dbpedia ([str], none_type): This parameter is used to find stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_links_dbpedia ([str], none_type): This parameter is used to exclude stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_links_wikipedia ([str], none_type): This parameter is used to find stories based on the specified entities wikipedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_links_wikipedia ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikipedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_links_wikidata ([str], none_type): This parameter is used to find stories based on the specified entities wikidata URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_links_wikidata ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikidata URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                sentiment_title_polarity (str, none_type): This parameter is used for finding stories whose title sentiment is the specified value. . [optional]
                not_sentiment_title_polarity (str, none_type): This parameter is used for excluding stories whose title sentiment is the specified value. . [optional]
                sentiment_body_polarity (str, none_type): This parameter is used for finding stories whose body sentiment is the specified value. . [optional]
                not_sentiment_body_polarity (str, none_type): This parameter is used for excluding stories whose body sentiment is the specified value. . [optional]
                media_images_count_min (int, none_type): This parameter is used for finding stories whose number of images is greater than or equal to the specified value. . [optional]
                media_images_count_max (int, none_type): This parameter is used for finding stories whose number of images is less than or equal to the specified value. . [optional]
                media_images_width_min (int, none_type): This parameter is used for finding stories whose width of images are greater than or equal to the specified value. . [optional]
                media_images_width_max (int, none_type): This parameter is used for finding stories whose width of images are less than or equal to the specified value. . [optional]
                media_images_height_min (int, none_type): This parameter is used for finding stories whose height of images are greater than or equal to the specified value. . [optional]
                media_images_height_max (int, none_type): This parameter is used for finding stories whose height of images are less than or equal to the specified value. . [optional]
                media_images_content_length_min (int, none_type): This parameter is used for finding stories whose images content length are greater than or equal to the specified value. . [optional]
                media_images_content_length_max (int, none_type): This parameter is used for finding stories whose images content length are less than or equal to the specified value. . [optional]
                media_images_format ([str], none_type): This parameter is used for finding stories whose images format are the specified value. . [optional]
                not_media_images_format ([str], none_type): This parameter is used for excluding stories whose images format are the specified value. . [optional]
                media_videos_count_min (int, none_type): This parameter is used for finding stories whose number of videos is greater than or equal to the specified value. . [optional]
                media_videos_count_max (int, none_type): This parameter is used for finding stories whose number of videos is less than or equal to the specified value. . [optional]
                author_id ([int], none_type): This parameter is used for finding stories whose author id is the specified value. . [optional]
                not_author_id ([int], none_type): This parameter is used for excluding stories whose author id is the specified value. . [optional]
                author_name (str, none_type): This parameter is used for finding stories whose author full name contains the specified value. . [optional]
                not_author_name (str, none_type): This parameter is used for excluding stories whose author full name contains the specified value. . [optional]
                source_id ([int], none_type): This parameter is used for finding stories whose source id is the specified value. . [optional]
                not_source_id ([int], none_type): This parameter is used for excluding stories whose source id is the specified value. . [optional]
                source_name ([str], none_type): This parameter is used for finding stories whose source name contains the specified value. . [optional]
                not_source_name ([str], none_type): This parameter is used for excluding stories whose source name contains the specified value. . [optional]
                source_domain ([str], none_type): This parameter is used for finding stories whose source domain is the specified value. . [optional]
                not_source_domain ([str], none_type): This parameter is used for excluding stories whose source domain is the specified value. . [optional]
                source_locations_country ([str], none_type): This parameter is used for finding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_locations_country ([str], none_type): This parameter is used for excluding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_locations_state ([str], none_type): This parameter is used for finding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_locations_state ([str], none_type): This parameter is used for excluding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_locations_city ([str], none_type): This parameter is used for finding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_locations_city ([str], none_type): This parameter is used for excluding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_scopes_country ([str], none_type): This parameter is used for finding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_scopes_country ([str], none_type): This parameter is used for excluding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_scopes_state ([str], none_type): This parameter is used for finding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_scopes_state ([str], none_type): This parameter is used for excluding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_scopes_city ([str], none_type): This parameter is used for finding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_scopes_city ([str], none_type): This parameter is used for excluding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_scopes_level ([str], none_type): This parameter is used for finding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_scopes_level ([str], none_type): This parameter is used for excluding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_links_in_count_min (int, none_type): This parameter is used for finding stories from sources whose Links in count is greater than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count). . [optional]
                source_links_in_count_max (int, none_type): This parameter is used for finding stories from sources whose Links in count is less than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count). . [optional]
                source_rankings_alexa_rank_min (int, none_type): This parameter is used for finding stories from sources whose Alexa rank is greater than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks). . [optional]
                source_rankings_alexa_rank_max (int, none_type): This parameter is used for finding stories from sources whose Alexa rank is less than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks). . [optional]
                source_rankings_alexa_country ([str], none_type): This parameter is used for finding stories from sources whose Alexa rank is in the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks). . [optional]
                social_shares_count_facebook_min (int, none_type): This parameter is used for finding stories whose Facebook social shares count is greater than or equal to the specified value. . [optional]
                social_shares_count_facebook_max (int, none_type): This parameter is used for finding stories whose Facebook social shares count is less than or equal to the specified value. . [optional]
                social_shares_count_google_plus_min (int, none_type): This parameter is used for finding stories whose Google+ social shares count is greater than or equal to the specified value. . [optional]
                social_shares_count_google_plus_max (int, none_type): This parameter is used for finding stories whose Google+ social shares count is less than or equal to the specified value. . [optional]
                social_shares_count_linkedin_min (int, none_type): This parameter is used for finding stories whose LinkedIn social shares count is greater than or equal to the specified value. . [optional]
                social_shares_count_linkedin_max (int, none_type): This parameter is used for finding stories whose LinkedIn social shares count is less than or equal to the specified value. . [optional]
                social_shares_count_reddit_min (int, none_type): This parameter is used for finding stories whose Reddit social shares count is greater than or equal to the specified value. . [optional]
                social_shares_count_reddit_max (int, none_type): This parameter is used for finding stories whose Reddit social shares count is less than or equal to the specified value. . [optional]
                clusters ([str], none_type): This parameter is used for finding stories with belonging to one of clusters in a specific set of clusters You can read more about working with clustering [here](https://newsapi.aylien.com/docs/working-with-clustering). . [optional]
                _return ([str], none_type): This parameter is used for specifying return fields.. [optional]
                aql (str, none_type): This parameter is used to supply a query in AYLIEN Query Language. . [optional]
                aql_default_field (str, none_type): This parameter is used to supply an optional default field name used in the AQL query. . [optional] if omitted the server will use the default value of "text"
                query (str, none_type): This parameter is used to make an advanced query using $and, $or, $not logical operators and $eq for exact match, $text for a text search and $lt, $gt, $lte, $gte for range queries. value must be a json string. . [optional]
                sort_by (str, none_type): This parameter is used for changing the order column of the results. You can read about sorting results [here](https://newsapi.aylien.com/docs/sorting-results). . [optional] if omitted the server will use the default value of "published_at"
                sort_direction (str, none_type): This parameter is used for changing the order direction of the result. You can read about sorting results [here](https://newsapi.aylien.com/docs/sorting-results). . [optional] if omitted the server will use the default value of "desc"
                cursor (str, none_type): This parameter is used for finding a specific page. You can read more about pagination of results [here](https://newsapi.aylien.com/docs/pagination-of-results). . [optional] if omitted the server will use the default value of "*"
                per_page (int, none_type): This parameter is used for specifying number of items in each page You can read more about pagination of results [here](https://newsapi.aylien.com/docs/pagination-of-results) . [optional] if omitted the server will use the default value of 10
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                dict
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.list_stories = _Endpoint(
            settings={
                'response_type': (dict,),
                'auth': [
                    'app_id',
                    'app_key'
                ],
                'endpoint_path': '/stories',
                'operation_id': 'list_stories',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'not_id',
                    'title',
                    'body',
                    'text',
                    'translations_en_title',
                    'translations_en_body',
                    'translations_en_text',
                    'language',
                    'not_language',
                    'links_permalink',
                    'not_links_permalink',
                    'published_at_start',
                    'published_at_end',
                    'categories_taxonomy',
                    'categories_confident',
                    'categories_id',
                    'not_categories_id',
                    'categories_label',
                    'not_categories_label',
                    'categories_level',
                    'not_categories_level',
                    'entities_id',
                    'not_entities_id',
                    'entities_links_wikipedia',
                    'not_entities_links_wikipedia',
                    'entities_links_wikidata',
                    'not_entities_links_wikidata',
                    'entities_types',
                    'not_entities_types',
                    'entities_stock_tickers',
                    'entities_body_stock_tickers',
                    'entities_body_surface_forms_text',
                    'entities_surface_forms_text',
                    'entities_title_id',
                    'not_entities_title_id',
                    'entities_title_surface_forms_text',
                    'not_entities_title_surface_forms_text',
                    'entities_title_text',
                    'not_entities_title_text',
                    'entities_title_type',
                    'not_entities_title_type',
                    'entities_title_stock_ticker',
                    'not_entities_title_stock_ticker',
                    'entities_title_links_dbpedia',
                    'not_entities_title_links_dbpedia',
                    'entities_title_links_wikipedia',
                    'not_entities_title_links_wikipedia',
                    'entities_title_links_wikidata',
                    'not_entities_title_links_wikidata',
                    'entities_body_id',
                    'not_entities_body_id',
                    'not_entities_body_surface_forms_text',
                    'entities_body_text',
                    'not_entities_body_text',
                    'entities_body_type',
                    'not_entities_body_type',
                    'entities_body_stock_ticker',
                    'not_entities_body_stock_ticker',
                    'entities_body_links_dbpedia',
                    'not_entities_body_links_dbpedia',
                    'entities_body_links_wikipedia',
                    'not_entities_body_links_wikipedia',
                    'entities_body_links_wikidata',
                    'not_entities_body_links_wikidata',
                    'sentiment_title_polarity',
                    'not_sentiment_title_polarity',
                    'sentiment_body_polarity',
                    'not_sentiment_body_polarity',
                    'media_images_count_min',
                    'media_images_count_max',
                    'media_images_width_min',
                    'media_images_width_max',
                    'media_images_height_min',
                    'media_images_height_max',
                    'media_images_content_length_min',
                    'media_images_content_length_max',
                    'media_images_format',
                    'not_media_images_format',
                    'media_videos_count_min',
                    'media_videos_count_max',
                    'author_id',
                    'not_author_id',
                    'author_name',
                    'not_author_name',
                    'source_id',
                    'not_source_id',
                    'source_name',
                    'not_source_name',
                    'source_domain',
                    'not_source_domain',
                    'source_locations_country',
                    'not_source_locations_country',
                    'source_locations_state',
                    'not_source_locations_state',
                    'source_locations_city',
                    'not_source_locations_city',
                    'source_scopes_country',
                    'not_source_scopes_country',
                    'source_scopes_state',
                    'not_source_scopes_state',
                    'source_scopes_city',
                    'not_source_scopes_city',
                    'source_scopes_level',
                    'not_source_scopes_level',
                    'source_links_in_count_min',
                    'source_links_in_count_max',
                    'source_rankings_alexa_rank_min',
                    'source_rankings_alexa_rank_max',
                    'source_rankings_alexa_country',
                    'social_shares_count_facebook_min',
                    'social_shares_count_facebook_max',
                    'social_shares_count_google_plus_min',
                    'social_shares_count_google_plus_max',
                    'social_shares_count_linkedin_min',
                    'social_shares_count_linkedin_max',
                    'social_shares_count_reddit_min',
                    'social_shares_count_reddit_max',
                    'clusters',
                    '_return',
                    'aql',
                    'aql_default_field',
                    'query',
                    'sort_by',
                    'sort_direction',
                    'cursor',
                    'per_page',
                ],
                'required': [],
                'nullable': [
                    'id',
                    'not_id',
                    'title',
                    'body',
                    'text',
                    'translations_en_title',
                    'translations_en_body',
                    'translations_en_text',
                    'language',
                    'not_language',
                    'links_permalink',
                    'not_links_permalink',
                    'published_at_start',
                    'published_at_end',
                    'categories_taxonomy',
                    'categories_confident',
                    'categories_id',
                    'not_categories_id',
                    'categories_label',
                    'not_categories_label',
                    'categories_level',
                    'not_categories_level',
                    'entities_id',
                    'not_entities_id',
                    'entities_links_wikipedia',
                    'not_entities_links_wikipedia',
                    'entities_links_wikidata',
                    'not_entities_links_wikidata',
                    'entities_types',
                    'not_entities_types',
                    'entities_stock_tickers',
                    'entities_body_stock_tickers',
                    'entities_body_surface_forms_text',
                    'entities_surface_forms_text',
                    'entities_title_id',
                    'not_entities_title_id',
                    'entities_title_surface_forms_text',
                    'not_entities_title_surface_forms_text',
                    'entities_title_text',
                    'not_entities_title_text',
                    'entities_title_type',
                    'not_entities_title_type',
                    'entities_title_stock_ticker',
                    'not_entities_title_stock_ticker',
                    'entities_title_links_dbpedia',
                    'not_entities_title_links_dbpedia',
                    'entities_title_links_wikipedia',
                    'not_entities_title_links_wikipedia',
                    'entities_title_links_wikidata',
                    'not_entities_title_links_wikidata',
                    'entities_body_id',
                    'not_entities_body_id',
                    'not_entities_body_surface_forms_text',
                    'entities_body_text',
                    'not_entities_body_text',
                    'entities_body_type',
                    'not_entities_body_type',
                    'entities_body_stock_ticker',
                    'not_entities_body_stock_ticker',
                    'entities_body_links_dbpedia',
                    'not_entities_body_links_dbpedia',
                    'entities_body_links_wikipedia',
                    'not_entities_body_links_wikipedia',
                    'entities_body_links_wikidata',
                    'not_entities_body_links_wikidata',
                    'sentiment_title_polarity',
                    'not_sentiment_title_polarity',
                    'sentiment_body_polarity',
                    'not_sentiment_body_polarity',
                    'media_images_count_min',
                    'media_images_count_max',
                    'media_images_width_min',
                    'media_images_width_max',
                    'media_images_height_min',
                    'media_images_height_max',
                    'media_images_content_length_min',
                    'media_images_content_length_max',
                    'media_images_format',
                    'not_media_images_format',
                    'media_videos_count_min',
                    'media_videos_count_max',
                    'author_id',
                    'not_author_id',
                    'author_name',
                    'not_author_name',
                    'source_id',
                    'not_source_id',
                    'source_name',
                    'not_source_name',
                    'source_domain',
                    'not_source_domain',
                    'source_locations_country',
                    'not_source_locations_country',
                    'source_locations_state',
                    'not_source_locations_state',
                    'source_locations_city',
                    'not_source_locations_city',
                    'source_scopes_country',
                    'not_source_scopes_country',
                    'source_scopes_state',
                    'not_source_scopes_state',
                    'source_scopes_city',
                    'not_source_scopes_city',
                    'source_scopes_level',
                    'not_source_scopes_level',
                    'source_links_in_count_min',
                    'source_links_in_count_max',
                    'source_rankings_alexa_rank_min',
                    'source_rankings_alexa_rank_max',
                    'source_rankings_alexa_country',
                    'social_shares_count_facebook_min',
                    'social_shares_count_facebook_max',
                    'social_shares_count_google_plus_min',
                    'social_shares_count_google_plus_max',
                    'social_shares_count_linkedin_min',
                    'social_shares_count_linkedin_max',
                    'social_shares_count_reddit_min',
                    'social_shares_count_reddit_max',
                    'clusters',
                    '_return',
                    'aql',
                    'aql_default_field',
                    'query',
                    'sort_by',
                    'sort_direction',
                    'cursor',
                    'per_page',
                ],
                'enum': [
                    'language',
                    'not_language',
                    'categories_taxonomy',
                    'sentiment_title_polarity',
                    'not_sentiment_title_polarity',
                    'sentiment_body_polarity',
                    'not_sentiment_body_polarity',
                    'media_images_format',
                    'not_media_images_format',
                    'source_scopes_level',
                    'not_source_scopes_level',
                    '_return',
                    'sort_by',
                    'sort_direction',
                ],
                'validation': [
                    'media_images_count_min',
                    'media_images_count_max',
                    'media_images_width_min',
                    'media_images_width_max',
                    'media_images_height_min',
                    'media_images_height_max',
                    'media_images_content_length_min',
                    'media_images_content_length_max',
                    'media_videos_count_min',
                    'media_videos_count_max',
                    'source_links_in_count_min',
                    'source_links_in_count_max',
                    'source_rankings_alexa_rank_min',
                    'source_rankings_alexa_rank_max',
                    'social_shares_count_facebook_min',
                    'social_shares_count_facebook_max',
                    'social_shares_count_google_plus_min',
                    'social_shares_count_google_plus_max',
                    'social_shares_count_linkedin_min',
                    'social_shares_count_linkedin_max',
                    'social_shares_count_reddit_min',
                    'social_shares_count_reddit_max',
                    'per_page',
                ]
            },
            root_map={
                'validations': {
                    ('media_images_count_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_count_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_width_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_width_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_height_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_height_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_content_length_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_content_length_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_videos_count_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_videos_count_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('source_links_in_count_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('source_links_in_count_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('source_rankings_alexa_rank_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('source_rankings_alexa_rank_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_facebook_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_facebook_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_google_plus_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_google_plus_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_linkedin_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_linkedin_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_reddit_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_reddit_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('per_page',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('language',): {
                        'None': None,
                        "EN": "en",
                        "DE": "de",
                        "FR": "fr",
                        "IT": "it",
                        "ES": "es",
                        "PT": "pt"
                    },
                    ('not_language',): {
                        'None': None,
                        "EN": "en",
                        "DE": "de",
                        "FR": "fr",
                        "IT": "it",
                        "ES": "es",
                        "PT": "pt"
                    },
                    ('categories_taxonomy',): {
                        'None': None,
                        "IAB-QAG": "iab-qag",
                        "IPTC-SUBJECTCODE": "iptc-subjectcode"
                    },
                    ('sentiment_title_polarity',): {
                        'None': None,
                        "POSITIVE": "positive",
                        "NEUTRAL": "neutral",
                        "NEGATIVE": "negative"
                    },
                    ('not_sentiment_title_polarity',): {
                        'None': None,
                        "POSITIVE": "positive",
                        "NEUTRAL": "neutral",
                        "NEGATIVE": "negative"
                    },
                    ('sentiment_body_polarity',): {
                        'None': None,
                        "POSITIVE": "positive",
                        "NEUTRAL": "neutral",
                        "NEGATIVE": "negative"
                    },
                    ('not_sentiment_body_polarity',): {
                        'None': None,
                        "POSITIVE": "positive",
                        "NEUTRAL": "neutral",
                        "NEGATIVE": "negative"
                    },
                    ('media_images_format',): {
                        'None': None,
                        "BMP": "BMP",
                        "GIF": "GIF",
                        "JPEG": "JPEG",
                        "PNG": "PNG",
                        "TIFF": "TIFF",
                        "PSD": "PSD",
                        "ICO": "ICO",
                        "CUR": "CUR",
                        "WEBP": "WEBP",
                        "SVG": "SVG"
                    },
                    ('not_media_images_format',): {
                        'None': None,
                        "BMP": "BMP",
                        "GIF": "GIF",
                        "JPEG": "JPEG",
                        "PNG": "PNG",
                        "TIFF": "TIFF",
                        "PSD": "PSD",
                        "ICO": "ICO",
                        "CUR": "CUR",
                        "WEBP": "WEBP",
                        "SVG": "SVG"
                    },
                    ('source_scopes_level',): {
                        'None': None,
                        "INTERNATIONAL": "international",
                        "NATIONAL": "national",
                        "LOCAL": "local"
                    },
                    ('not_source_scopes_level',): {
                        'None': None,
                        "INTERNATIONAL": "international",
                        "NATIONAL": "national",
                        "LOCAL": "local"
                    },
                    ('_return',): {
                        'None': None,
                        "ID": "id",
                        "TITLE": "title",
                        "BODY": "body",
                        "SUMMARY": "summary",
                        "SOURCE": "source",
                        "AUTHOR": "author",
                        "ENTITIES": "entities",
                        "KEYWORDS": "keywords",
                        "HASHTAGS": "hashtags",
                        "CHARACTERS_COUNT": "characters_count",
                        "WORDS_COUNT": "words_count",
                        "SENTENCES_COUNT": "sentences_count",
                        "PARAGRAPHS_COUNT": "paragraphs_count",
                        "CATEGORIES": "categories",
                        "SOCIAL_SHARES_COUNT": "social_shares_count",
                        "MEDIA": "media",
                        "SENTIMENT": "sentiment",
                        "LANGUAGE": "language",
                        "PUBLISHED_AT": "published_at",
                        "LINKS": "links"
                    },
                    ('sort_by',): {
                        'None': None,
                        "RELEVANCE": "relevance",
                        "RECENCY": "recency",
                        "HOTNESS": "hotness",
                        "PUBLISHED_AT": "published_at",
                        "SOCIAL_SHARES_COUNT": "social_shares_count",
                        "SOCIAL_SHARES_COUNT.FACEBOOK": "social_shares_count.facebook",
                        "SOCIAL_SHARES_COUNT.LINKEDIN": "social_shares_count.linkedin",
                        "SOCIAL_SHARES_COUNT.GOOGLE_PLUS": "social_shares_count.google_plus",
                        "SOCIAL_SHARES_COUNT.REDDIT": "social_shares_count.reddit",
                        "MEDIA.IMAGES.COUNT": "media.images.count",
                        "MEDIA.VIDEOS.COUNT": "media.videos.count",
                        "SOURCE.LINKS_IN_COUNT": "source.links_in_count",
                        "SOURCE.RANKINGS.ALEXA.RANK": "source.rankings.alexa.rank",
                        "SOURCE.RANKINGS.ALEXA.RANK.AF": "source.rankings.alexa.rank.AF",
                        "SOURCE.RANKINGS.ALEXA.RANK.AX": "source.rankings.alexa.rank.AX",
                        "SOURCE.RANKINGS.ALEXA.RANK.AL": "source.rankings.alexa.rank.AL",
                        "SOURCE.RANKINGS.ALEXA.RANK.DZ": "source.rankings.alexa.rank.DZ",
                        "SOURCE.RANKINGS.ALEXA.RANK.AS": "source.rankings.alexa.rank.AS",
                        "SOURCE.RANKINGS.ALEXA.RANK.AD": "source.rankings.alexa.rank.AD",
                        "SOURCE.RANKINGS.ALEXA.RANK.AO": "source.rankings.alexa.rank.AO",
                        "SOURCE.RANKINGS.ALEXA.RANK.AI": "source.rankings.alexa.rank.AI",
                        "SOURCE.RANKINGS.ALEXA.RANK.AQ": "source.rankings.alexa.rank.AQ",
                        "SOURCE.RANKINGS.ALEXA.RANK.AG": "source.rankings.alexa.rank.AG",
                        "SOURCE.RANKINGS.ALEXA.RANK.AR": "source.rankings.alexa.rank.AR",
                        "SOURCE.RANKINGS.ALEXA.RANK.AM": "source.rankings.alexa.rank.AM",
                        "SOURCE.RANKINGS.ALEXA.RANK.AW": "source.rankings.alexa.rank.AW",
                        "SOURCE.RANKINGS.ALEXA.RANK.AU": "source.rankings.alexa.rank.AU",
                        "SOURCE.RANKINGS.ALEXA.RANK.AT": "source.rankings.alexa.rank.AT",
                        "SOURCE.RANKINGS.ALEXA.RANK.AZ": "source.rankings.alexa.rank.AZ",
                        "SOURCE.RANKINGS.ALEXA.RANK.BS": "source.rankings.alexa.rank.BS",
                        "SOURCE.RANKINGS.ALEXA.RANK.BH": "source.rankings.alexa.rank.BH",
                        "SOURCE.RANKINGS.ALEXA.RANK.BD": "source.rankings.alexa.rank.BD",
                        "SOURCE.RANKINGS.ALEXA.RANK.BB": "source.rankings.alexa.rank.BB",
                        "SOURCE.RANKINGS.ALEXA.RANK.BY": "source.rankings.alexa.rank.BY",
                        "SOURCE.RANKINGS.ALEXA.RANK.BE": "source.rankings.alexa.rank.BE",
                        "SOURCE.RANKINGS.ALEXA.RANK.BZ": "source.rankings.alexa.rank.BZ",
                        "SOURCE.RANKINGS.ALEXA.RANK.BJ": "source.rankings.alexa.rank.BJ",
                        "SOURCE.RANKINGS.ALEXA.RANK.BM": "source.rankings.alexa.rank.BM",
                        "SOURCE.RANKINGS.ALEXA.RANK.BT": "source.rankings.alexa.rank.BT",
                        "SOURCE.RANKINGS.ALEXA.RANK.BO": "source.rankings.alexa.rank.BO",
                        "SOURCE.RANKINGS.ALEXA.RANK.BQ": "source.rankings.alexa.rank.BQ",
                        "SOURCE.RANKINGS.ALEXA.RANK.BA": "source.rankings.alexa.rank.BA",
                        "SOURCE.RANKINGS.ALEXA.RANK.BW": "source.rankings.alexa.rank.BW",
                        "SOURCE.RANKINGS.ALEXA.RANK.BV": "source.rankings.alexa.rank.BV",
                        "SOURCE.RANKINGS.ALEXA.RANK.BR": "source.rankings.alexa.rank.BR",
                        "SOURCE.RANKINGS.ALEXA.RANK.IO": "source.rankings.alexa.rank.IO",
                        "SOURCE.RANKINGS.ALEXA.RANK.BN": "source.rankings.alexa.rank.BN",
                        "SOURCE.RANKINGS.ALEXA.RANK.BG": "source.rankings.alexa.rank.BG",
                        "SOURCE.RANKINGS.ALEXA.RANK.BF": "source.rankings.alexa.rank.BF",
                        "SOURCE.RANKINGS.ALEXA.RANK.BI": "source.rankings.alexa.rank.BI",
                        "SOURCE.RANKINGS.ALEXA.RANK.KH": "source.rankings.alexa.rank.KH",
                        "SOURCE.RANKINGS.ALEXA.RANK.CM": "source.rankings.alexa.rank.CM",
                        "SOURCE.RANKINGS.ALEXA.RANK.CA": "source.rankings.alexa.rank.CA",
                        "SOURCE.RANKINGS.ALEXA.RANK.CV": "source.rankings.alexa.rank.CV",
                        "SOURCE.RANKINGS.ALEXA.RANK.KY": "source.rankings.alexa.rank.KY",
                        "SOURCE.RANKINGS.ALEXA.RANK.CF": "source.rankings.alexa.rank.CF",
                        "SOURCE.RANKINGS.ALEXA.RANK.TD": "source.rankings.alexa.rank.TD",
                        "SOURCE.RANKINGS.ALEXA.RANK.CL": "source.rankings.alexa.rank.CL",
                        "SOURCE.RANKINGS.ALEXA.RANK.CN": "source.rankings.alexa.rank.CN",
                        "SOURCE.RANKINGS.ALEXA.RANK.CX": "source.rankings.alexa.rank.CX",
                        "SOURCE.RANKINGS.ALEXA.RANK.CC": "source.rankings.alexa.rank.CC",
                        "SOURCE.RANKINGS.ALEXA.RANK.CO": "source.rankings.alexa.rank.CO",
                        "SOURCE.RANKINGS.ALEXA.RANK.KM": "source.rankings.alexa.rank.KM",
                        "SOURCE.RANKINGS.ALEXA.RANK.CG": "source.rankings.alexa.rank.CG",
                        "SOURCE.RANKINGS.ALEXA.RANK.CD": "source.rankings.alexa.rank.CD",
                        "SOURCE.RANKINGS.ALEXA.RANK.CK": "source.rankings.alexa.rank.CK",
                        "SOURCE.RANKINGS.ALEXA.RANK.CR": "source.rankings.alexa.rank.CR",
                        "SOURCE.RANKINGS.ALEXA.RANK.CI": "source.rankings.alexa.rank.CI",
                        "SOURCE.RANKINGS.ALEXA.RANK.HR": "source.rankings.alexa.rank.HR",
                        "SOURCE.RANKINGS.ALEXA.RANK.CU": "source.rankings.alexa.rank.CU",
                        "SOURCE.RANKINGS.ALEXA.RANK.CW": "source.rankings.alexa.rank.CW",
                        "SOURCE.RANKINGS.ALEXA.RANK.CY": "source.rankings.alexa.rank.CY",
                        "SOURCE.RANKINGS.ALEXA.RANK.CZ": "source.rankings.alexa.rank.CZ",
                        "SOURCE.RANKINGS.ALEXA.RANK.DK": "source.rankings.alexa.rank.DK",
                        "SOURCE.RANKINGS.ALEXA.RANK.DJ": "source.rankings.alexa.rank.DJ",
                        "SOURCE.RANKINGS.ALEXA.RANK.DM": "source.rankings.alexa.rank.DM",
                        "SOURCE.RANKINGS.ALEXA.RANK.DO": "source.rankings.alexa.rank.DO",
                        "SOURCE.RANKINGS.ALEXA.RANK.EC": "source.rankings.alexa.rank.EC",
                        "SOURCE.RANKINGS.ALEXA.RANK.EG": "source.rankings.alexa.rank.EG",
                        "SOURCE.RANKINGS.ALEXA.RANK.SV": "source.rankings.alexa.rank.SV",
                        "SOURCE.RANKINGS.ALEXA.RANK.GQ": "source.rankings.alexa.rank.GQ",
                        "SOURCE.RANKINGS.ALEXA.RANK.ER": "source.rankings.alexa.rank.ER",
                        "SOURCE.RANKINGS.ALEXA.RANK.EE": "source.rankings.alexa.rank.EE",
                        "SOURCE.RANKINGS.ALEXA.RANK.ET": "source.rankings.alexa.rank.ET",
                        "SOURCE.RANKINGS.ALEXA.RANK.FK": "source.rankings.alexa.rank.FK",
                        "SOURCE.RANKINGS.ALEXA.RANK.FO": "source.rankings.alexa.rank.FO",
                        "SOURCE.RANKINGS.ALEXA.RANK.FJ": "source.rankings.alexa.rank.FJ",
                        "SOURCE.RANKINGS.ALEXA.RANK.FI": "source.rankings.alexa.rank.FI",
                        "SOURCE.RANKINGS.ALEXA.RANK.FR": "source.rankings.alexa.rank.FR",
                        "SOURCE.RANKINGS.ALEXA.RANK.GF": "source.rankings.alexa.rank.GF",
                        "SOURCE.RANKINGS.ALEXA.RANK.PF": "source.rankings.alexa.rank.PF",
                        "SOURCE.RANKINGS.ALEXA.RANK.TF": "source.rankings.alexa.rank.TF",
                        "SOURCE.RANKINGS.ALEXA.RANK.GA": "source.rankings.alexa.rank.GA",
                        "SOURCE.RANKINGS.ALEXA.RANK.GM": "source.rankings.alexa.rank.GM",
                        "SOURCE.RANKINGS.ALEXA.RANK.GE": "source.rankings.alexa.rank.GE",
                        "SOURCE.RANKINGS.ALEXA.RANK.DE": "source.rankings.alexa.rank.DE",
                        "SOURCE.RANKINGS.ALEXA.RANK.GH": "source.rankings.alexa.rank.GH",
                        "SOURCE.RANKINGS.ALEXA.RANK.GI": "source.rankings.alexa.rank.GI",
                        "SOURCE.RANKINGS.ALEXA.RANK.GR": "source.rankings.alexa.rank.GR",
                        "SOURCE.RANKINGS.ALEXA.RANK.GL": "source.rankings.alexa.rank.GL",
                        "SOURCE.RANKINGS.ALEXA.RANK.GD": "source.rankings.alexa.rank.GD",
                        "SOURCE.RANKINGS.ALEXA.RANK.GP": "source.rankings.alexa.rank.GP",
                        "SOURCE.RANKINGS.ALEXA.RANK.GU": "source.rankings.alexa.rank.GU",
                        "SOURCE.RANKINGS.ALEXA.RANK.GT": "source.rankings.alexa.rank.GT",
                        "SOURCE.RANKINGS.ALEXA.RANK.GG": "source.rankings.alexa.rank.GG",
                        "SOURCE.RANKINGS.ALEXA.RANK.GN": "source.rankings.alexa.rank.GN",
                        "SOURCE.RANKINGS.ALEXA.RANK.GW": "source.rankings.alexa.rank.GW",
                        "SOURCE.RANKINGS.ALEXA.RANK.GY": "source.rankings.alexa.rank.GY",
                        "SOURCE.RANKINGS.ALEXA.RANK.HT": "source.rankings.alexa.rank.HT",
                        "SOURCE.RANKINGS.ALEXA.RANK.HM": "source.rankings.alexa.rank.HM",
                        "SOURCE.RANKINGS.ALEXA.RANK.VA": "source.rankings.alexa.rank.VA",
                        "SOURCE.RANKINGS.ALEXA.RANK.HN": "source.rankings.alexa.rank.HN",
                        "SOURCE.RANKINGS.ALEXA.RANK.HK": "source.rankings.alexa.rank.HK",
                        "SOURCE.RANKINGS.ALEXA.RANK.HU": "source.rankings.alexa.rank.HU",
                        "SOURCE.RANKINGS.ALEXA.RANK.IS": "source.rankings.alexa.rank.IS",
                        "SOURCE.RANKINGS.ALEXA.RANK.IN": "source.rankings.alexa.rank.IN",
                        "SOURCE.RANKINGS.ALEXA.RANK.ID": "source.rankings.alexa.rank.ID",
                        "SOURCE.RANKINGS.ALEXA.RANK.IR": "source.rankings.alexa.rank.IR",
                        "SOURCE.RANKINGS.ALEXA.RANK.IQ": "source.rankings.alexa.rank.IQ",
                        "SOURCE.RANKINGS.ALEXA.RANK.IE": "source.rankings.alexa.rank.IE",
                        "SOURCE.RANKINGS.ALEXA.RANK.IM": "source.rankings.alexa.rank.IM",
                        "SOURCE.RANKINGS.ALEXA.RANK.IL": "source.rankings.alexa.rank.IL",
                        "SOURCE.RANKINGS.ALEXA.RANK.IT": "source.rankings.alexa.rank.IT",
                        "SOURCE.RANKINGS.ALEXA.RANK.JM": "source.rankings.alexa.rank.JM",
                        "SOURCE.RANKINGS.ALEXA.RANK.JP": "source.rankings.alexa.rank.JP",
                        "SOURCE.RANKINGS.ALEXA.RANK.JE": "source.rankings.alexa.rank.JE",
                        "SOURCE.RANKINGS.ALEXA.RANK.JO": "source.rankings.alexa.rank.JO",
                        "SOURCE.RANKINGS.ALEXA.RANK.KZ": "source.rankings.alexa.rank.KZ",
                        "SOURCE.RANKINGS.ALEXA.RANK.KE": "source.rankings.alexa.rank.KE",
                        "SOURCE.RANKINGS.ALEXA.RANK.KI": "source.rankings.alexa.rank.KI",
                        "SOURCE.RANKINGS.ALEXA.RANK.KP": "source.rankings.alexa.rank.KP",
                        "SOURCE.RANKINGS.ALEXA.RANK.KR": "source.rankings.alexa.rank.KR",
                        "SOURCE.RANKINGS.ALEXA.RANK.KW": "source.rankings.alexa.rank.KW",
                        "SOURCE.RANKINGS.ALEXA.RANK.KG": "source.rankings.alexa.rank.KG",
                        "SOURCE.RANKINGS.ALEXA.RANK.LA": "source.rankings.alexa.rank.LA",
                        "SOURCE.RANKINGS.ALEXA.RANK.LV": "source.rankings.alexa.rank.LV",
                        "SOURCE.RANKINGS.ALEXA.RANK.LB": "source.rankings.alexa.rank.LB",
                        "SOURCE.RANKINGS.ALEXA.RANK.LS": "source.rankings.alexa.rank.LS",
                        "SOURCE.RANKINGS.ALEXA.RANK.LR": "source.rankings.alexa.rank.LR",
                        "SOURCE.RANKINGS.ALEXA.RANK.LY": "source.rankings.alexa.rank.LY",
                        "SOURCE.RANKINGS.ALEXA.RANK.LI": "source.rankings.alexa.rank.LI",
                        "SOURCE.RANKINGS.ALEXA.RANK.LT": "source.rankings.alexa.rank.LT",
                        "SOURCE.RANKINGS.ALEXA.RANK.LU": "source.rankings.alexa.rank.LU",
                        "SOURCE.RANKINGS.ALEXA.RANK.MO": "source.rankings.alexa.rank.MO",
                        "SOURCE.RANKINGS.ALEXA.RANK.MK": "source.rankings.alexa.rank.MK",
                        "SOURCE.RANKINGS.ALEXA.RANK.MG": "source.rankings.alexa.rank.MG",
                        "SOURCE.RANKINGS.ALEXA.RANK.MW": "source.rankings.alexa.rank.MW",
                        "SOURCE.RANKINGS.ALEXA.RANK.MY": "source.rankings.alexa.rank.MY",
                        "SOURCE.RANKINGS.ALEXA.RANK.MV": "source.rankings.alexa.rank.MV",
                        "SOURCE.RANKINGS.ALEXA.RANK.ML": "source.rankings.alexa.rank.ML",
                        "SOURCE.RANKINGS.ALEXA.RANK.MT": "source.rankings.alexa.rank.MT",
                        "SOURCE.RANKINGS.ALEXA.RANK.MH": "source.rankings.alexa.rank.MH",
                        "SOURCE.RANKINGS.ALEXA.RANK.MQ": "source.rankings.alexa.rank.MQ",
                        "SOURCE.RANKINGS.ALEXA.RANK.MR": "source.rankings.alexa.rank.MR",
                        "SOURCE.RANKINGS.ALEXA.RANK.MU": "source.rankings.alexa.rank.MU",
                        "SOURCE.RANKINGS.ALEXA.RANK.YT": "source.rankings.alexa.rank.YT",
                        "SOURCE.RANKINGS.ALEXA.RANK.MX": "source.rankings.alexa.rank.MX",
                        "SOURCE.RANKINGS.ALEXA.RANK.FM": "source.rankings.alexa.rank.FM",
                        "SOURCE.RANKINGS.ALEXA.RANK.MD": "source.rankings.alexa.rank.MD",
                        "SOURCE.RANKINGS.ALEXA.RANK.MC": "source.rankings.alexa.rank.MC",
                        "SOURCE.RANKINGS.ALEXA.RANK.MN": "source.rankings.alexa.rank.MN",
                        "SOURCE.RANKINGS.ALEXA.RANK.ME": "source.rankings.alexa.rank.ME",
                        "SOURCE.RANKINGS.ALEXA.RANK.MS": "source.rankings.alexa.rank.MS",
                        "SOURCE.RANKINGS.ALEXA.RANK.MA": "source.rankings.alexa.rank.MA",
                        "SOURCE.RANKINGS.ALEXA.RANK.MZ": "source.rankings.alexa.rank.MZ",
                        "SOURCE.RANKINGS.ALEXA.RANK.MM": "source.rankings.alexa.rank.MM",
                        "SOURCE.RANKINGS.ALEXA.RANK.NA": "source.rankings.alexa.rank.NA",
                        "SOURCE.RANKINGS.ALEXA.RANK.NR": "source.rankings.alexa.rank.NR",
                        "SOURCE.RANKINGS.ALEXA.RANK.NP": "source.rankings.alexa.rank.NP",
                        "SOURCE.RANKINGS.ALEXA.RANK.NL": "source.rankings.alexa.rank.NL",
                        "SOURCE.RANKINGS.ALEXA.RANK.NC": "source.rankings.alexa.rank.NC",
                        "SOURCE.RANKINGS.ALEXA.RANK.NZ": "source.rankings.alexa.rank.NZ",
                        "SOURCE.RANKINGS.ALEXA.RANK.NI": "source.rankings.alexa.rank.NI",
                        "SOURCE.RANKINGS.ALEXA.RANK.NE": "source.rankings.alexa.rank.NE",
                        "SOURCE.RANKINGS.ALEXA.RANK.NG": "source.rankings.alexa.rank.NG",
                        "SOURCE.RANKINGS.ALEXA.RANK.NU": "source.rankings.alexa.rank.NU",
                        "SOURCE.RANKINGS.ALEXA.RANK.NF": "source.rankings.alexa.rank.NF",
                        "SOURCE.RANKINGS.ALEXA.RANK.MP": "source.rankings.alexa.rank.MP",
                        "SOURCE.RANKINGS.ALEXA.RANK.NO": "source.rankings.alexa.rank.NO",
                        "SOURCE.RANKINGS.ALEXA.RANK.OM": "source.rankings.alexa.rank.OM",
                        "SOURCE.RANKINGS.ALEXA.RANK.PK": "source.rankings.alexa.rank.PK",
                        "SOURCE.RANKINGS.ALEXA.RANK.PW": "source.rankings.alexa.rank.PW",
                        "SOURCE.RANKINGS.ALEXA.RANK.PS": "source.rankings.alexa.rank.PS",
                        "SOURCE.RANKINGS.ALEXA.RANK.PA": "source.rankings.alexa.rank.PA",
                        "SOURCE.RANKINGS.ALEXA.RANK.PG": "source.rankings.alexa.rank.PG",
                        "SOURCE.RANKINGS.ALEXA.RANK.PY": "source.rankings.alexa.rank.PY",
                        "SOURCE.RANKINGS.ALEXA.RANK.PE": "source.rankings.alexa.rank.PE",
                        "SOURCE.RANKINGS.ALEXA.RANK.PH": "source.rankings.alexa.rank.PH",
                        "SOURCE.RANKINGS.ALEXA.RANK.PN": "source.rankings.alexa.rank.PN",
                        "SOURCE.RANKINGS.ALEXA.RANK.PL": "source.rankings.alexa.rank.PL",
                        "SOURCE.RANKINGS.ALEXA.RANK.PT": "source.rankings.alexa.rank.PT",
                        "SOURCE.RANKINGS.ALEXA.RANK.PR": "source.rankings.alexa.rank.PR",
                        "SOURCE.RANKINGS.ALEXA.RANK.QA": "source.rankings.alexa.rank.QA",
                        "SOURCE.RANKINGS.ALEXA.RANK.RE": "source.rankings.alexa.rank.RE",
                        "SOURCE.RANKINGS.ALEXA.RANK.RO": "source.rankings.alexa.rank.RO",
                        "SOURCE.RANKINGS.ALEXA.RANK.RU": "source.rankings.alexa.rank.RU",
                        "SOURCE.RANKINGS.ALEXA.RANK.RW": "source.rankings.alexa.rank.RW",
                        "SOURCE.RANKINGS.ALEXA.RANK.BL": "source.rankings.alexa.rank.BL",
                        "SOURCE.RANKINGS.ALEXA.RANK.SH": "source.rankings.alexa.rank.SH",
                        "SOURCE.RANKINGS.ALEXA.RANK.KN": "source.rankings.alexa.rank.KN",
                        "SOURCE.RANKINGS.ALEXA.RANK.LC": "source.rankings.alexa.rank.LC",
                        "SOURCE.RANKINGS.ALEXA.RANK.MF": "source.rankings.alexa.rank.MF",
                        "SOURCE.RANKINGS.ALEXA.RANK.PM": "source.rankings.alexa.rank.PM",
                        "SOURCE.RANKINGS.ALEXA.RANK.VC": "source.rankings.alexa.rank.VC",
                        "SOURCE.RANKINGS.ALEXA.RANK.WS": "source.rankings.alexa.rank.WS",
                        "SOURCE.RANKINGS.ALEXA.RANK.SM": "source.rankings.alexa.rank.SM",
                        "SOURCE.RANKINGS.ALEXA.RANK.ST": "source.rankings.alexa.rank.ST",
                        "SOURCE.RANKINGS.ALEXA.RANK.SA": "source.rankings.alexa.rank.SA",
                        "SOURCE.RANKINGS.ALEXA.RANK.SN": "source.rankings.alexa.rank.SN",
                        "SOURCE.RANKINGS.ALEXA.RANK.RS": "source.rankings.alexa.rank.RS",
                        "SOURCE.RANKINGS.ALEXA.RANK.SC": "source.rankings.alexa.rank.SC",
                        "SOURCE.RANKINGS.ALEXA.RANK.SL": "source.rankings.alexa.rank.SL",
                        "SOURCE.RANKINGS.ALEXA.RANK.SG": "source.rankings.alexa.rank.SG",
                        "SOURCE.RANKINGS.ALEXA.RANK.SX": "source.rankings.alexa.rank.SX",
                        "SOURCE.RANKINGS.ALEXA.RANK.SK": "source.rankings.alexa.rank.SK",
                        "SOURCE.RANKINGS.ALEXA.RANK.SI": "source.rankings.alexa.rank.SI",
                        "SOURCE.RANKINGS.ALEXA.RANK.SB": "source.rankings.alexa.rank.SB",
                        "SOURCE.RANKINGS.ALEXA.RANK.SO": "source.rankings.alexa.rank.SO",
                        "SOURCE.RANKINGS.ALEXA.RANK.ZA": "source.rankings.alexa.rank.ZA",
                        "SOURCE.RANKINGS.ALEXA.RANK.GS": "source.rankings.alexa.rank.GS",
                        "SOURCE.RANKINGS.ALEXA.RANK.SS": "source.rankings.alexa.rank.SS",
                        "SOURCE.RANKINGS.ALEXA.RANK.ES": "source.rankings.alexa.rank.ES",
                        "SOURCE.RANKINGS.ALEXA.RANK.LK": "source.rankings.alexa.rank.LK",
                        "SOURCE.RANKINGS.ALEXA.RANK.SD": "source.rankings.alexa.rank.SD",
                        "SOURCE.RANKINGS.ALEXA.RANK.SR": "source.rankings.alexa.rank.SR",
                        "SOURCE.RANKINGS.ALEXA.RANK.SJ": "source.rankings.alexa.rank.SJ",
                        "SOURCE.RANKINGS.ALEXA.RANK.SZ": "source.rankings.alexa.rank.SZ",
                        "SOURCE.RANKINGS.ALEXA.RANK.SE": "source.rankings.alexa.rank.SE",
                        "SOURCE.RANKINGS.ALEXA.RANK.CH": "source.rankings.alexa.rank.CH",
                        "SOURCE.RANKINGS.ALEXA.RANK.SY": "source.rankings.alexa.rank.SY",
                        "SOURCE.RANKINGS.ALEXA.RANK.TW": "source.rankings.alexa.rank.TW",
                        "SOURCE.RANKINGS.ALEXA.RANK.TJ": "source.rankings.alexa.rank.TJ",
                        "SOURCE.RANKINGS.ALEXA.RANK.TZ": "source.rankings.alexa.rank.TZ",
                        "SOURCE.RANKINGS.ALEXA.RANK.TH": "source.rankings.alexa.rank.TH",
                        "SOURCE.RANKINGS.ALEXA.RANK.TL": "source.rankings.alexa.rank.TL",
                        "SOURCE.RANKINGS.ALEXA.RANK.TG": "source.rankings.alexa.rank.TG",
                        "SOURCE.RANKINGS.ALEXA.RANK.TK": "source.rankings.alexa.rank.TK",
                        "SOURCE.RANKINGS.ALEXA.RANK.TO": "source.rankings.alexa.rank.TO",
                        "SOURCE.RANKINGS.ALEXA.RANK.TT": "source.rankings.alexa.rank.TT",
                        "SOURCE.RANKINGS.ALEXA.RANK.TN": "source.rankings.alexa.rank.TN",
                        "SOURCE.RANKINGS.ALEXA.RANK.TR": "source.rankings.alexa.rank.TR",
                        "SOURCE.RANKINGS.ALEXA.RANK.TM": "source.rankings.alexa.rank.TM",
                        "SOURCE.RANKINGS.ALEXA.RANK.TC": "source.rankings.alexa.rank.TC",
                        "SOURCE.RANKINGS.ALEXA.RANK.TV": "source.rankings.alexa.rank.TV",
                        "SOURCE.RANKINGS.ALEXA.RANK.UG": "source.rankings.alexa.rank.UG",
                        "SOURCE.RANKINGS.ALEXA.RANK.UA": "source.rankings.alexa.rank.UA",
                        "SOURCE.RANKINGS.ALEXA.RANK.AE": "source.rankings.alexa.rank.AE",
                        "SOURCE.RANKINGS.ALEXA.RANK.GB": "source.rankings.alexa.rank.GB",
                        "SOURCE.RANKINGS.ALEXA.RANK.US": "source.rankings.alexa.rank.US",
                        "SOURCE.RANKINGS.ALEXA.RANK.UM": "source.rankings.alexa.rank.UM",
                        "SOURCE.RANKINGS.ALEXA.RANK.UY": "source.rankings.alexa.rank.UY",
                        "SOURCE.RANKINGS.ALEXA.RANK.UZ": "source.rankings.alexa.rank.UZ",
                        "SOURCE.RANKINGS.ALEXA.RANK.VU": "source.rankings.alexa.rank.VU",
                        "SOURCE.RANKINGS.ALEXA.RANK.VE": "source.rankings.alexa.rank.VE",
                        "SOURCE.RANKINGS.ALEXA.RANK.VN": "source.rankings.alexa.rank.VN",
                        "SOURCE.RANKINGS.ALEXA.RANK.VG": "source.rankings.alexa.rank.VG",
                        "SOURCE.RANKINGS.ALEXA.RANK.VI": "source.rankings.alexa.rank.VI",
                        "SOURCE.RANKINGS.ALEXA.RANK.WF": "source.rankings.alexa.rank.WF",
                        "SOURCE.RANKINGS.ALEXA.RANK.EH": "source.rankings.alexa.rank.EH",
                        "SOURCE.RANKINGS.ALEXA.RANK.YE": "source.rankings.alexa.rank.YE",
                        "SOURCE.RANKINGS.ALEXA.RANK.ZM": "source.rankings.alexa.rank.ZM",
                        "SOURCE.RANKINGS.ALEXA.RANK.ZW": "source.rankings.alexa.rank.ZW"
                    },
                    ('sort_direction',): {
                        'None': None,
                        "ASC": "asc",
                        "DESC": "desc"
                    },
                },
                'openapi_types': {
                    'id':
                        ([int], none_type,),
                    'not_id':
                        ([int], none_type,),
                    'title':
                        (str, none_type,),
                    'body':
                        (str, none_type,),
                    'text':
                        (str, none_type,),
                    'translations_en_title':
                        (str, none_type,),
                    'translations_en_body':
                        (str, none_type,),
                    'translations_en_text':
                        (str, none_type,),
                    'language':
                        ([str], none_type,),
                    'not_language':
                        ([str], none_type,),
                    'links_permalink':
                        ([str], none_type,),
                    'not_links_permalink':
                        ([str], none_type,),
                    'published_at_start':
                        (str, none_type,),
                    'published_at_end':
                        (str, none_type,),
                    'categories_taxonomy':
                        (str, none_type,),
                    'categories_confident':
                        (bool, none_type,),
                    'categories_id':
                        ([str], none_type,),
                    'not_categories_id':
                        ([str], none_type,),
                    'categories_label':
                        ([str], none_type,),
                    'not_categories_label':
                        ([str], none_type,),
                    'categories_level':
                        ([int], none_type,),
                    'not_categories_level':
                        ([int], none_type,),
                    'entities_id':
                        ([str], none_type,),
                    'not_entities_id':
                        ([str], none_type,),
                    'entities_links_wikipedia':
                        ([str], none_type,),
                    'not_entities_links_wikipedia':
                        ([str], none_type,),
                    'entities_links_wikidata':
                        ([str], none_type,),
                    'not_entities_links_wikidata':
                        ([str], none_type,),
                    'entities_types':
                        ([str], none_type,),
                    'not_entities_types':
                        ([str], none_type,),
                    'entities_stock_tickers':
                        ([str], none_type,),
                    'entities_body_stock_tickers':
                        ([str], none_type,),
                    'entities_body_surface_forms_text':
                        ([str], none_type,),
                    'entities_surface_forms_text':
                        ([str], none_type,),
                    'entities_title_id':
                        ([str], none_type,),
                    'not_entities_title_id':
                        ([str], none_type,),
                    'entities_title_surface_forms_text':
                        (str, none_type,),
                    'not_entities_title_surface_forms_text':
                        ([str], none_type,),
                    'entities_title_text':
                        ([str], none_type,),
                    'not_entities_title_text':
                        ([str], none_type,),
                    'entities_title_type':
                        ([str], none_type,),
                    'not_entities_title_type':
                        ([str], none_type,),
                    'entities_title_stock_ticker':
                        ([str], none_type,),
                    'not_entities_title_stock_ticker':
                        ([str], none_type,),
                    'entities_title_links_dbpedia':
                        ([str], none_type,),
                    'not_entities_title_links_dbpedia':
                        ([str], none_type,),
                    'entities_title_links_wikipedia':
                        ([str], none_type,),
                    'not_entities_title_links_wikipedia':
                        ([str], none_type,),
                    'entities_title_links_wikidata':
                        ([str], none_type,),
                    'not_entities_title_links_wikidata':
                        ([str], none_type,),
                    'entities_body_id':
                        ([str], none_type,),
                    'not_entities_body_id':
                        ([str], none_type,),
                    'not_entities_body_surface_forms_text':
                        ([str], none_type,),
                    'entities_body_text':
                        ([str], none_type,),
                    'not_entities_body_text':
                        ([str], none_type,),
                    'entities_body_type':
                        ([str], none_type,),
                    'not_entities_body_type':
                        ([str], none_type,),
                    'entities_body_stock_ticker':
                        ([str], none_type,),
                    'not_entities_body_stock_ticker':
                        ([str], none_type,),
                    'entities_body_links_dbpedia':
                        ([str], none_type,),
                    'not_entities_body_links_dbpedia':
                        ([str], none_type,),
                    'entities_body_links_wikipedia':
                        ([str], none_type,),
                    'not_entities_body_links_wikipedia':
                        ([str], none_type,),
                    'entities_body_links_wikidata':
                        ([str], none_type,),
                    'not_entities_body_links_wikidata':
                        ([str], none_type,),
                    'sentiment_title_polarity':
                        (str, none_type,),
                    'not_sentiment_title_polarity':
                        (str, none_type,),
                    'sentiment_body_polarity':
                        (str, none_type,),
                    'not_sentiment_body_polarity':
                        (str, none_type,),
                    'media_images_count_min':
                        (int, none_type,),
                    'media_images_count_max':
                        (int, none_type,),
                    'media_images_width_min':
                        (int, none_type,),
                    'media_images_width_max':
                        (int, none_type,),
                    'media_images_height_min':
                        (int, none_type,),
                    'media_images_height_max':
                        (int, none_type,),
                    'media_images_content_length_min':
                        (int, none_type,),
                    'media_images_content_length_max':
                        (int, none_type,),
                    'media_images_format':
                        ([str], none_type,),
                    'not_media_images_format':
                        ([str], none_type,),
                    'media_videos_count_min':
                        (int, none_type,),
                    'media_videos_count_max':
                        (int, none_type,),
                    'author_id':
                        ([int], none_type,),
                    'not_author_id':
                        ([int], none_type,),
                    'author_name':
                        (str, none_type,),
                    'not_author_name':
                        (str, none_type,),
                    'source_id':
                        ([int], none_type,),
                    'not_source_id':
                        ([int], none_type,),
                    'source_name':
                        ([str], none_type,),
                    'not_source_name':
                        ([str], none_type,),
                    'source_domain':
                        ([str], none_type,),
                    'not_source_domain':
                        ([str], none_type,),
                    'source_locations_country':
                        ([str], none_type,),
                    'not_source_locations_country':
                        ([str], none_type,),
                    'source_locations_state':
                        ([str], none_type,),
                    'not_source_locations_state':
                        ([str], none_type,),
                    'source_locations_city':
                        ([str], none_type,),
                    'not_source_locations_city':
                        ([str], none_type,),
                    'source_scopes_country':
                        ([str], none_type,),
                    'not_source_scopes_country':
                        ([str], none_type,),
                    'source_scopes_state':
                        ([str], none_type,),
                    'not_source_scopes_state':
                        ([str], none_type,),
                    'source_scopes_city':
                        ([str], none_type,),
                    'not_source_scopes_city':
                        ([str], none_type,),
                    'source_scopes_level':
                        ([str], none_type,),
                    'not_source_scopes_level':
                        ([str], none_type,),
                    'source_links_in_count_min':
                        (int, none_type,),
                    'source_links_in_count_max':
                        (int, none_type,),
                    'source_rankings_alexa_rank_min':
                        (int, none_type,),
                    'source_rankings_alexa_rank_max':
                        (int, none_type,),
                    'source_rankings_alexa_country':
                        ([str], none_type,),
                    'social_shares_count_facebook_min':
                        (int, none_type,),
                    'social_shares_count_facebook_max':
                        (int, none_type,),
                    'social_shares_count_google_plus_min':
                        (int, none_type,),
                    'social_shares_count_google_plus_max':
                        (int, none_type,),
                    'social_shares_count_linkedin_min':
                        (int, none_type,),
                    'social_shares_count_linkedin_max':
                        (int, none_type,),
                    'social_shares_count_reddit_min':
                        (int, none_type,),
                    'social_shares_count_reddit_max':
                        (int, none_type,),
                    'clusters':
                        ([str], none_type,),
                    '_return':
                        ([str], none_type,),
                    'aql':
                        (str, none_type,),
                    'aql_default_field':
                        (str, none_type,),
                    'query':
                        (str, none_type,),
                    'sort_by':
                        (str, none_type,),
                    'sort_direction':
                        (str, none_type,),
                    'cursor':
                        (str, none_type,),
                    'per_page':
                        (int, none_type,),
                },
                'attribute_map': {
                    'id': 'id[]',
                    'not_id': '!id[]',
                    'title': 'title',
                    'body': 'body',
                    'text': 'text',
                    'translations_en_title': 'translations.en.title',
                    'translations_en_body': 'translations.en.body',
                    'translations_en_text': 'translations.en.text',
                    'language': 'language[]',
                    'not_language': '!language[]',
                    'links_permalink': 'links.permalink[]',
                    'not_links_permalink': '!links.permalink[]',
                    'published_at_start': 'published_at.start',
                    'published_at_end': 'published_at.end',
                    'categories_taxonomy': 'categories.taxonomy',
                    'categories_confident': 'categories.confident',
                    'categories_id': 'categories.id[]',
                    'not_categories_id': '!categories.id[]',
                    'categories_label': 'categories.label[]',
                    'not_categories_label': '!categories.label[]',
                    'categories_level': 'categories.level[]',
                    'not_categories_level': '!categories.level[]',
                    'entities_id': 'entities.id[]',
                    'not_entities_id': '!entities.id[]',
                    'entities_links_wikipedia': 'entities.links.wikipedia[]',
                    'not_entities_links_wikipedia': '!entities.links.wikipedia[]',
                    'entities_links_wikidata': 'entities.links.wikidata[]',
                    'not_entities_links_wikidata': '!entities.links.wikidata[]',
                    'entities_types': 'entities.types[]',
                    'not_entities_types': '!entities.types[]',
                    'entities_stock_tickers': 'entities.stock_tickers[]',
                    'entities_body_stock_tickers': '!entities.body.stock_tickers[]',
                    'entities_body_surface_forms_text': 'entities.body.surface_forms.text[]',
                    'entities_surface_forms_text': '!entities.surface_forms.text[]',
                    'entities_title_id': 'entities.title.id[]',
                    'not_entities_title_id': '!entities.title.id[]',
                    'entities_title_surface_forms_text': 'entities.title.surface_forms.text[]',
                    'not_entities_title_surface_forms_text': '!entities.title.surface_forms.text[]',
                    'entities_title_text': 'entities.title.text[]',
                    'not_entities_title_text': '!entities.title.text[]',
                    'entities_title_type': 'entities.title.type[]',
                    'not_entities_title_type': '!entities.title.type[]',
                    'entities_title_stock_ticker': 'entities.title.stock_ticker[]',
                    'not_entities_title_stock_ticker': '!entities.title.stock_ticker[]',
                    'entities_title_links_dbpedia': 'entities.title.links.dbpedia[]',
                    'not_entities_title_links_dbpedia': '!entities.title.links.dbpedia[]',
                    'entities_title_links_wikipedia': 'entities.title.links.wikipedia[]',
                    'not_entities_title_links_wikipedia': '!entities.title.links.wikipedia[]',
                    'entities_title_links_wikidata': 'entities.title.links.wikidata[]',
                    'not_entities_title_links_wikidata': '!entities.title.links.wikidata[]',
                    'entities_body_id': 'entities.body.id[]',
                    'not_entities_body_id': '!entities.body.id[]',
                    'not_entities_body_surface_forms_text': '!entities.body.surface_forms.text[]',
                    'entities_body_text': 'entities.body.text[]',
                    'not_entities_body_text': '!entities.body.text[]',
                    'entities_body_type': 'entities.body.type[]',
                    'not_entities_body_type': '!entities.body.type[]',
                    'entities_body_stock_ticker': 'entities.body.stock_ticker[]',
                    'not_entities_body_stock_ticker': '!entities.body.stock_ticker[]',
                    'entities_body_links_dbpedia': 'entities.body.links.dbpedia[]',
                    'not_entities_body_links_dbpedia': '!entities.body.links.dbpedia[]',
                    'entities_body_links_wikipedia': 'entities.body.links.wikipedia[]',
                    'not_entities_body_links_wikipedia': '!entities.body.links.wikipedia[]',
                    'entities_body_links_wikidata': 'entities.body.links.wikidata[]',
                    'not_entities_body_links_wikidata': '!entities.body.links.wikidata[]',
                    'sentiment_title_polarity': 'sentiment.title.polarity',
                    'not_sentiment_title_polarity': '!sentiment.title.polarity',
                    'sentiment_body_polarity': 'sentiment.body.polarity',
                    'not_sentiment_body_polarity': '!sentiment.body.polarity',
                    'media_images_count_min': 'media.images.count.min',
                    'media_images_count_max': 'media.images.count.max',
                    'media_images_width_min': 'media.images.width.min',
                    'media_images_width_max': 'media.images.width.max',
                    'media_images_height_min': 'media.images.height.min',
                    'media_images_height_max': 'media.images.height.max',
                    'media_images_content_length_min': 'media.images.content_length.min',
                    'media_images_content_length_max': 'media.images.content_length.max',
                    'media_images_format': 'media.images.format[]',
                    'not_media_images_format': '!media.images.format[]',
                    'media_videos_count_min': 'media.videos.count.min',
                    'media_videos_count_max': 'media.videos.count.max',
                    'author_id': 'author.id[]',
                    'not_author_id': '!author.id[]',
                    'author_name': 'author.name',
                    'not_author_name': '!author.name',
                    'source_id': 'source.id[]',
                    'not_source_id': '!source.id[]',
                    'source_name': 'source.name[]',
                    'not_source_name': '!source.name[]',
                    'source_domain': 'source.domain[]',
                    'not_source_domain': '!source.domain[]',
                    'source_locations_country': 'source.locations.country[]',
                    'not_source_locations_country': '!source.locations.country[]',
                    'source_locations_state': 'source.locations.state[]',
                    'not_source_locations_state': '!source.locations.state[]',
                    'source_locations_city': 'source.locations.city[]',
                    'not_source_locations_city': '!source.locations.city[]',
                    'source_scopes_country': 'source.scopes.country[]',
                    'not_source_scopes_country': '!source.scopes.country[]',
                    'source_scopes_state': 'source.scopes.state[]',
                    'not_source_scopes_state': '!source.scopes.state[]',
                    'source_scopes_city': 'source.scopes.city[]',
                    'not_source_scopes_city': '!source.scopes.city[]',
                    'source_scopes_level': 'source.scopes.level[]',
                    'not_source_scopes_level': '!source.scopes.level[]',
                    'source_links_in_count_min': 'source.links_in_count.min',
                    'source_links_in_count_max': 'source.links_in_count.max',
                    'source_rankings_alexa_rank_min': 'source.rankings.alexa.rank.min',
                    'source_rankings_alexa_rank_max': 'source.rankings.alexa.rank.max',
                    'source_rankings_alexa_country': 'source.rankings.alexa.country[]',
                    'social_shares_count_facebook_min': 'social_shares_count.facebook.min',
                    'social_shares_count_facebook_max': 'social_shares_count.facebook.max',
                    'social_shares_count_google_plus_min': 'social_shares_count.google_plus.min',
                    'social_shares_count_google_plus_max': 'social_shares_count.google_plus.max',
                    'social_shares_count_linkedin_min': 'social_shares_count.linkedin.min',
                    'social_shares_count_linkedin_max': 'social_shares_count.linkedin.max',
                    'social_shares_count_reddit_min': 'social_shares_count.reddit.min',
                    'social_shares_count_reddit_max': 'social_shares_count.reddit.max',
                    'clusters': 'clusters[]',
                    '_return': 'return[]',
                    'aql': 'aql',
                    'aql_default_field': 'aql_default_field',
                    'query': 'query',
                    'sort_by': 'sort_by',
                    'sort_direction': 'sort_direction',
                    'cursor': 'cursor',
                    'per_page': 'per_page',
                },
                'location_map': {
                    'id': 'query',
                    'not_id': 'query',
                    'title': 'query',
                    'body': 'query',
                    'text': 'query',
                    'translations_en_title': 'query',
                    'translations_en_body': 'query',
                    'translations_en_text': 'query',
                    'language': 'query',
                    'not_language': 'query',
                    'links_permalink': 'query',
                    'not_links_permalink': 'query',
                    'published_at_start': 'query',
                    'published_at_end': 'query',
                    'categories_taxonomy': 'query',
                    'categories_confident': 'query',
                    'categories_id': 'query',
                    'not_categories_id': 'query',
                    'categories_label': 'query',
                    'not_categories_label': 'query',
                    'categories_level': 'query',
                    'not_categories_level': 'query',
                    'entities_id': 'query',
                    'not_entities_id': 'query',
                    'entities_links_wikipedia': 'query',
                    'not_entities_links_wikipedia': 'query',
                    'entities_links_wikidata': 'query',
                    'not_entities_links_wikidata': 'query',
                    'entities_types': 'query',
                    'not_entities_types': 'query',
                    'entities_stock_tickers': 'query',
                    'entities_body_stock_tickers': 'query',
                    'entities_body_surface_forms_text': 'query',
                    'entities_surface_forms_text': 'query',
                    'entities_title_id': 'query',
                    'not_entities_title_id': 'query',
                    'entities_title_surface_forms_text': 'query',
                    'not_entities_title_surface_forms_text': 'query',
                    'entities_title_text': 'query',
                    'not_entities_title_text': 'query',
                    'entities_title_type': 'query',
                    'not_entities_title_type': 'query',
                    'entities_title_stock_ticker': 'query',
                    'not_entities_title_stock_ticker': 'query',
                    'entities_title_links_dbpedia': 'query',
                    'not_entities_title_links_dbpedia': 'query',
                    'entities_title_links_wikipedia': 'query',
                    'not_entities_title_links_wikipedia': 'query',
                    'entities_title_links_wikidata': 'query',
                    'not_entities_title_links_wikidata': 'query',
                    'entities_body_id': 'query',
                    'not_entities_body_id': 'query',
                    'not_entities_body_surface_forms_text': 'query',
                    'entities_body_text': 'query',
                    'not_entities_body_text': 'query',
                    'entities_body_type': 'query',
                    'not_entities_body_type': 'query',
                    'entities_body_stock_ticker': 'query',
                    'not_entities_body_stock_ticker': 'query',
                    'entities_body_links_dbpedia': 'query',
                    'not_entities_body_links_dbpedia': 'query',
                    'entities_body_links_wikipedia': 'query',
                    'not_entities_body_links_wikipedia': 'query',
                    'entities_body_links_wikidata': 'query',
                    'not_entities_body_links_wikidata': 'query',
                    'sentiment_title_polarity': 'query',
                    'not_sentiment_title_polarity': 'query',
                    'sentiment_body_polarity': 'query',
                    'not_sentiment_body_polarity': 'query',
                    'media_images_count_min': 'query',
                    'media_images_count_max': 'query',
                    'media_images_width_min': 'query',
                    'media_images_width_max': 'query',
                    'media_images_height_min': 'query',
                    'media_images_height_max': 'query',
                    'media_images_content_length_min': 'query',
                    'media_images_content_length_max': 'query',
                    'media_images_format': 'query',
                    'not_media_images_format': 'query',
                    'media_videos_count_min': 'query',
                    'media_videos_count_max': 'query',
                    'author_id': 'query',
                    'not_author_id': 'query',
                    'author_name': 'query',
                    'not_author_name': 'query',
                    'source_id': 'query',
                    'not_source_id': 'query',
                    'source_name': 'query',
                    'not_source_name': 'query',
                    'source_domain': 'query',
                    'not_source_domain': 'query',
                    'source_locations_country': 'query',
                    'not_source_locations_country': 'query',
                    'source_locations_state': 'query',
                    'not_source_locations_state': 'query',
                    'source_locations_city': 'query',
                    'not_source_locations_city': 'query',
                    'source_scopes_country': 'query',
                    'not_source_scopes_country': 'query',
                    'source_scopes_state': 'query',
                    'not_source_scopes_state': 'query',
                    'source_scopes_city': 'query',
                    'not_source_scopes_city': 'query',
                    'source_scopes_level': 'query',
                    'not_source_scopes_level': 'query',
                    'source_links_in_count_min': 'query',
                    'source_links_in_count_max': 'query',
                    'source_rankings_alexa_rank_min': 'query',
                    'source_rankings_alexa_rank_max': 'query',
                    'source_rankings_alexa_country': 'query',
                    'social_shares_count_facebook_min': 'query',
                    'social_shares_count_facebook_max': 'query',
                    'social_shares_count_google_plus_min': 'query',
                    'social_shares_count_google_plus_max': 'query',
                    'social_shares_count_linkedin_min': 'query',
                    'social_shares_count_linkedin_max': 'query',
                    'social_shares_count_reddit_min': 'query',
                    'social_shares_count_reddit_max': 'query',
                    'clusters': 'query',
                    '_return': 'query',
                    'aql': 'query',
                    'aql_default_field': 'query',
                    'query': 'query',
                    'sort_by': 'query',
                    'sort_direction': 'query',
                    'cursor': 'query',
                    'per_page': 'query',
                },
                'collection_format_map': {
                    'id': 'multi',
                    'not_id': 'multi',
                    'language': 'multi',
                    'not_language': 'multi',
                    'links_permalink': 'multi',
                    'not_links_permalink': 'multi',
                    'categories_id': 'multi',
                    'not_categories_id': 'multi',
                    'categories_label': 'multi',
                    'not_categories_label': 'multi',
                    'categories_level': 'multi',
                    'not_categories_level': 'multi',
                    'entities_id': 'multi',
                    'not_entities_id': 'multi',
                    'entities_links_wikipedia': 'multi',
                    'not_entities_links_wikipedia': 'multi',
                    'entities_links_wikidata': 'multi',
                    'not_entities_links_wikidata': 'multi',
                    'entities_types': 'multi',
                    'not_entities_types': 'multi',
                    'entities_stock_tickers': 'multi',
                    'entities_body_stock_tickers': 'multi',
                    'entities_body_surface_forms_text': 'multi',
                    'entities_surface_forms_text': 'multi',
                    'entities_title_id': 'multi',
                    'not_entities_title_id': 'multi',
                    'not_entities_title_surface_forms_text': 'multi',
                    'entities_title_text': 'multi',
                    'not_entities_title_text': 'multi',
                    'entities_title_type': 'multi',
                    'not_entities_title_type': 'multi',
                    'entities_title_stock_ticker': 'multi',
                    'not_entities_title_stock_ticker': 'multi',
                    'entities_title_links_dbpedia': 'multi',
                    'not_entities_title_links_dbpedia': 'multi',
                    'entities_title_links_wikipedia': 'multi',
                    'not_entities_title_links_wikipedia': 'multi',
                    'entities_title_links_wikidata': 'multi',
                    'not_entities_title_links_wikidata': 'multi',
                    'entities_body_id': 'multi',
                    'not_entities_body_id': 'multi',
                    'not_entities_body_surface_forms_text': 'multi',
                    'entities_body_text': 'multi',
                    'not_entities_body_text': 'multi',
                    'entities_body_type': 'multi',
                    'not_entities_body_type': 'multi',
                    'entities_body_stock_ticker': 'multi',
                    'not_entities_body_stock_ticker': 'multi',
                    'entities_body_links_dbpedia': 'multi',
                    'not_entities_body_links_dbpedia': 'multi',
                    'entities_body_links_wikipedia': 'multi',
                    'not_entities_body_links_wikipedia': 'multi',
                    'entities_body_links_wikidata': 'multi',
                    'not_entities_body_links_wikidata': 'multi',
                    'media_images_format': 'multi',
                    'not_media_images_format': 'multi',
                    'author_id': 'multi',
                    'not_author_id': 'multi',
                    'source_id': 'multi',
                    'not_source_id': 'multi',
                    'source_name': 'multi',
                    'not_source_name': 'multi',
                    'source_domain': 'multi',
                    'not_source_domain': 'multi',
                    'source_locations_country': 'multi',
                    'not_source_locations_country': 'multi',
                    'source_locations_state': 'multi',
                    'not_source_locations_state': 'multi',
                    'source_locations_city': 'multi',
                    'not_source_locations_city': 'multi',
                    'source_scopes_country': 'multi',
                    'not_source_scopes_country': 'multi',
                    'source_scopes_state': 'multi',
                    'not_source_scopes_state': 'multi',
                    'source_scopes_city': 'multi',
                    'not_source_scopes_city': 'multi',
                    'source_scopes_level': 'multi',
                    'not_source_scopes_level': 'multi',
                    'source_rankings_alexa_country': 'multi',
                    'clusters': 'multi',
                    '_return': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_stories
        )

        def __list_time_series(
            self,
            **kwargs
        ):
            """List time series  # noqa: E501

            The time series endpoint allows you to track information contained in stories over time. This information can be anything from mentions of a topic or entities, sentiment about a topic, or the volume of stories published by a source, to name but a few. The full list of parameters is given below. Using the [Date Math Syntax](https://newsapi.aylien.com/docs/working-with-dates), you can easily set your query to return information from any time period, from the current point in time to when the News API started collecting stories. The returned information can be rounded to a time also specified by you, for example by setting the results into hourly, daily, or weekly data points.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_time_series(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                id ([int], none_type): This parameter is used for finding stories by story id. . [optional]
                not_id ([int], none_type): This parameter is used for excluding stories by story id. . [optional]
                title (str, none_type): This parameter is used for finding stories whose title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                body (str, none_type): This parameter is used for finding stories whose body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                text (str, none_type): This parameter is used for finding stories whose title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                translations_en_title (str, none_type): This parameter is used for finding stories whose translation title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                translations_en_body (str, none_type): This parameter is used for finding stories whose translation body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                translations_en_text (str, none_type): This parameter is used for finding stories whose translation title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                language ([str], none_type): This parameter is used for finding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes. . [optional]
                not_language ([str], none_type): This parameter is used for excluding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes. . [optional]
                categories_taxonomy (str, none_type): This parameter is used for defining the type of the taxonomy for the rest of the categories queries. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                categories_confident (bool, none_type): This parameter is used for finding stories whose categories are confident. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional] if omitted the server will use the default value of True
                categories_id ([str], none_type): This parameter is used for finding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                not_categories_id ([str], none_type): This parameter is used for excluding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                categories_label ([str], none_type): This parameter is used for finding stories by categories label. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                not_categories_label ([str], none_type): This parameter is used for excluding stories by categories label. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                categories_level ([int], none_type): This parameter is used for finding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                not_categories_level ([int], none_type): This parameter is used for excluding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                entities_id ([str], none_type): This parameter is used to find stories based on the specified entities `id`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_id ([str], none_type): This parameter is used to exclude stories based on the specified entity's `id`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_links_wikipedia ([str], none_type): This parameter is used to find stories based on the specified entities wikipedia URL. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_links_wikipedia ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikipedia URL. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_links_wikidata ([str], none_type): This parameter is used to find stories based on the specified entities wikidata URL. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_links_wikidata ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikidata URL. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_types ([str], none_type): This parameter is used to find stories based on the specified entities `types`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_types ([str], none_type): This parameter is used to exclude stories based on the specified entity's `types`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_stock_tickers ([str], none_type): This parameter is used to find stories based on the specified entities `stock_tickers`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_stock_tickers ([str], none_type): This parameter is used to exclude stories based on the specified entity's `stock_tickers` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_surface_forms_text ([str], none_type): This parameter is used to find stories based on the specified entities `surface_form` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_surface_forms_text ([str], none_type): This parameter is used to exclude stories based on the specified entity's `surface_form`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_id ([str], none_type): This parameter is used to find stories based on the specified entities `id` in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_id ([str], none_type): This parameter is used to exclude stories based on the specified entity's `id` in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_surface_forms_text (str, none_type): This parameter is used to find stories based on the specified entities `surface_form` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_surface_forms_text ([str], none_type): This parameter is used to exclude stories based on the specified entity's `surface_form` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_text ([str], none_type): This parameter is used to find stories based on the specified entities `text` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_text ([str], none_type): This parameter is used to exclude stories based on the specified entities `text` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_type ([str], none_type): This parameter is used to find stories based on the specified entities `type` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_type ([str], none_type): This parameter is used to exclude stories based on the specified entities `type` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_stock_ticker ([str], none_type): This parameter is used to find stories based on the specified entities `stock_ticker` in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_stock_ticker ([str], none_type): This parameter is used to exclude stories based on the specified entity's `stock_ticker` in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_links_dbpedia ([str], none_type): This parameter is used to find stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_links_dbpedia ([str], none_type): This parameter is used to exclude stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_links_wikipedia ([str], none_type): This parameter is used to find stories based on the specified entities wikipedia URL in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_links_wikipedia ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikipedia URL in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_links_wikidata ([str], none_type): This parameter is used to find stories based on the specified entities wikidata URL in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_links_wikidata ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikidata URL in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_id ([str], none_type): This parameter is used to find stories based on the specified entities `id` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_id ([str], none_type): This parameter is used to exclude stories based on the specified entity's `id` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_surface_forms_text ([str], none_type): This parameter is used to exclude stories based on the specified entity's `surface_form` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_text ([str], none_type): This parameter is used to find stories based on the specified entities `text` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_text ([str], none_type): This parameter is used to exclude stories based on the specified entities `text` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_type ([str], none_type): This parameter is used to find stories based on the specified entities `type` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_type ([str], none_type): This parameter is used to exclude stories based on the specified entities `type` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_stock_ticker ([str], none_type): This parameter is used to find stories based on the specified entities `stock_ticker` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_stock_ticker ([str], none_type): This parameter is used to exclude stories based on the specified entity's `stock_ticker` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_links_dbpedia ([str], none_type): This parameter is used to find stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_links_dbpedia ([str], none_type): This parameter is used to exclude stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_links_wikipedia ([str], none_type): This parameter is used to find stories based on the specified entities wikipedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_links_wikipedia ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikipedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_links_wikidata ([str], none_type): This parameter is used to find stories based on the specified entities wikidata URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_links_wikidata ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikidata URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                sentiment_title_polarity (str, none_type): This parameter is used for finding stories whose title sentiment is the specified value. . [optional]
                not_sentiment_title_polarity (str, none_type): This parameter is used for excluding stories whose title sentiment is the specified value. . [optional]
                sentiment_body_polarity (str, none_type): This parameter is used for finding stories whose body sentiment is the specified value. . [optional]
                not_sentiment_body_polarity (str, none_type): This parameter is used for excluding stories whose body sentiment is the specified value. . [optional]
                media_images_count_min (int, none_type): This parameter is used for finding stories whose number of images is greater than or equal to the specified value. . [optional]
                media_images_count_max (int, none_type): This parameter is used for finding stories whose number of images is less than or equal to the specified value. . [optional]
                media_images_width_min (int, none_type): This parameter is used for finding stories whose width of images are greater than or equal to the specified value. . [optional]
                media_images_width_max (int, none_type): This parameter is used for finding stories whose width of images are less than or equal to the specified value. . [optional]
                media_images_height_min (int, none_type): This parameter is used for finding stories whose height of images are greater than or equal to the specified value. . [optional]
                media_images_height_max (int, none_type): This parameter is used for finding stories whose height of images are less than or equal to the specified value. . [optional]
                media_images_content_length_min (int, none_type): This parameter is used for finding stories whose images content length are greater than or equal to the specified value. . [optional]
                media_images_content_length_max (int, none_type): This parameter is used for finding stories whose images content length are less than or equal to the specified value. . [optional]
                media_images_format ([str], none_type): This parameter is used for finding stories whose images format are the specified value. . [optional]
                not_media_images_format ([str], none_type): This parameter is used for excluding stories whose images format are the specified value. . [optional]
                media_videos_count_min (int, none_type): This parameter is used for finding stories whose number of videos is greater than or equal to the specified value. . [optional]
                media_videos_count_max (int, none_type): This parameter is used for finding stories whose number of videos is less than or equal to the specified value. . [optional]
                author_id ([int], none_type): This parameter is used for finding stories whose author id is the specified value. . [optional]
                not_author_id ([int], none_type): This parameter is used for excluding stories whose author id is the specified value. . [optional]
                author_name (str, none_type): This parameter is used for finding stories whose author full name contains the specified value. . [optional]
                not_author_name (str, none_type): This parameter is used for excluding stories whose author full name contains the specified value. . [optional]
                source_id ([int], none_type): This parameter is used for finding stories whose source id is the specified value. . [optional]
                not_source_id ([int], none_type): This parameter is used for excluding stories whose source id is the specified value. . [optional]
                source_name ([str], none_type): This parameter is used for finding stories whose source name contains the specified value. . [optional]
                not_source_name ([str], none_type): This parameter is used for excluding stories whose source name contains the specified value. . [optional]
                source_domain ([str], none_type): This parameter is used for finding stories whose source domain is the specified value. . [optional]
                not_source_domain ([str], none_type): This parameter is used for excluding stories whose source domain is the specified value. . [optional]
                source_locations_country ([str], none_type): This parameter is used for finding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_locations_country ([str], none_type): This parameter is used for excluding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_locations_state ([str], none_type): This parameter is used for finding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_locations_state ([str], none_type): This parameter is used for excluding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_locations_city ([str], none_type): This parameter is used for finding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_locations_city ([str], none_type): This parameter is used for excluding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_scopes_country ([str], none_type): This parameter is used for finding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_scopes_country ([str], none_type): This parameter is used for excluding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_scopes_state ([str], none_type): This parameter is used for finding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_scopes_state ([str], none_type): This parameter is used for excluding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_scopes_city ([str], none_type): This parameter is used for finding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_scopes_city ([str], none_type): This parameter is used for excluding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_scopes_level ([str], none_type): This parameter is used for finding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_scopes_level ([str], none_type): This parameter is used for excluding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_links_in_count_min (int, none_type): This parameter is used for finding stories from sources whose Links in count is greater than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count). . [optional]
                source_links_in_count_max (int, none_type): This parameter is used for finding stories from sources whose Links in count is less than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count). . [optional]
                source_rankings_alexa_rank_min (int, none_type): This parameter is used for finding stories from sources whose Alexa rank is greater than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks). . [optional]
                source_rankings_alexa_rank_max (int, none_type): This parameter is used for finding stories from sources whose Alexa rank is less than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks). . [optional]
                source_rankings_alexa_country ([str], none_type): This parameter is used for finding stories from sources whose Alexa rank is in the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks). . [optional]
                social_shares_count_facebook_min (int, none_type): This parameter is used for finding stories whose Facebook social shares count is greater than or equal to the specified value. . [optional]
                social_shares_count_facebook_max (int, none_type): This parameter is used for finding stories whose Facebook social shares count is less than or equal to the specified value. . [optional]
                social_shares_count_google_plus_min (int, none_type): This parameter is used for finding stories whose Google+ social shares count is greater than or equal to the specified value. . [optional]
                social_shares_count_google_plus_max (int, none_type): This parameter is used for finding stories whose Google+ social shares count is less than or equal to the specified value. . [optional]
                social_shares_count_linkedin_min (int, none_type): This parameter is used for finding stories whose LinkedIn social shares count is greater than or equal to the specified value. . [optional]
                social_shares_count_linkedin_max (int, none_type): This parameter is used for finding stories whose LinkedIn social shares count is less than or equal to the specified value. . [optional]
                social_shares_count_reddit_min (int, none_type): This parameter is used for finding stories whose Reddit social shares count is greater than or equal to the specified value. . [optional]
                social_shares_count_reddit_max (int, none_type): This parameter is used for finding stories whose Reddit social shares count is less than or equal to the specified value. . [optional]
                clusters ([str], none_type): This parameter is used for finding stories with belonging to one of clusters in a specific set of clusters You can read more about working with clustering [here](https://newsapi.aylien.com/docs/working-with-clustering). . [optional]
                aql (str, none_type): This parameter is used to supply a query in AYLIEN Query Language. . [optional]
                aql_default_field (str, none_type): This parameter is used to supply an optional default field name used in the AQL query. . [optional] if omitted the server will use the default value of "text"
                query (str, none_type): This parameter is used to make an advanced query using $and, $or, $not logical operators and $eq for exact match, $text for a text search and $lt, $gt, $lte, $gte for range queries. value must be a json string. . [optional]
                published_at_start (str, none_type): This parameter is used for finding stories whose published at time is less than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). . [optional] if omitted the server will use the default value of "NOW-7DAYS/DAY"
                published_at_end (str, none_type): This parameter is used for finding stories whose published at time is greater than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). . [optional] if omitted the server will use the default value of "NOW/DAY"
                period (str, none_type): The size of each date range is expressed as an interval to be added to the lower bound. It supports Date Math Syntax. Valid options are `+` following an integer number greater than 0 and one of the Date Math keywords. e.g. `+1DAY`, `+2MINUTES` and `+1MONTH`. Here are [Supported keywords](https://newsapi.aylien.com/docs/working-with-dates#date-math). . [optional] if omitted the server will use the default value of "+1DAY"
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TimeSeriesList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.list_time_series = _Endpoint(
            settings={
                'response_type': (TimeSeriesList,),
                'auth': [
                    'app_id',
                    'app_key'
                ],
                'endpoint_path': '/time_series',
                'operation_id': 'list_time_series',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'not_id',
                    'title',
                    'body',
                    'text',
                    'translations_en_title',
                    'translations_en_body',
                    'translations_en_text',
                    'language',
                    'not_language',
                    'categories_taxonomy',
                    'categories_confident',
                    'categories_id',
                    'not_categories_id',
                    'categories_label',
                    'not_categories_label',
                    'categories_level',
                    'not_categories_level',
                    'entities_id',
                    'not_entities_id',
                    'entities_links_wikipedia',
                    'not_entities_links_wikipedia',
                    'entities_links_wikidata',
                    'not_entities_links_wikidata',
                    'entities_types',
                    'not_entities_types',
                    'entities_stock_tickers',
                    'entities_body_stock_tickers',
                    'entities_body_surface_forms_text',
                    'entities_surface_forms_text',
                    'entities_title_id',
                    'not_entities_title_id',
                    'entities_title_surface_forms_text',
                    'not_entities_title_surface_forms_text',
                    'entities_title_text',
                    'not_entities_title_text',
                    'entities_title_type',
                    'not_entities_title_type',
                    'entities_title_stock_ticker',
                    'not_entities_title_stock_ticker',
                    'entities_title_links_dbpedia',
                    'not_entities_title_links_dbpedia',
                    'entities_title_links_wikipedia',
                    'not_entities_title_links_wikipedia',
                    'entities_title_links_wikidata',
                    'not_entities_title_links_wikidata',
                    'entities_body_id',
                    'not_entities_body_id',
                    'not_entities_body_surface_forms_text',
                    'entities_body_text',
                    'not_entities_body_text',
                    'entities_body_type',
                    'not_entities_body_type',
                    'entities_body_stock_ticker',
                    'not_entities_body_stock_ticker',
                    'entities_body_links_dbpedia',
                    'not_entities_body_links_dbpedia',
                    'entities_body_links_wikipedia',
                    'not_entities_body_links_wikipedia',
                    'entities_body_links_wikidata',
                    'not_entities_body_links_wikidata',
                    'sentiment_title_polarity',
                    'not_sentiment_title_polarity',
                    'sentiment_body_polarity',
                    'not_sentiment_body_polarity',
                    'media_images_count_min',
                    'media_images_count_max',
                    'media_images_width_min',
                    'media_images_width_max',
                    'media_images_height_min',
                    'media_images_height_max',
                    'media_images_content_length_min',
                    'media_images_content_length_max',
                    'media_images_format',
                    'not_media_images_format',
                    'media_videos_count_min',
                    'media_videos_count_max',
                    'author_id',
                    'not_author_id',
                    'author_name',
                    'not_author_name',
                    'source_id',
                    'not_source_id',
                    'source_name',
                    'not_source_name',
                    'source_domain',
                    'not_source_domain',
                    'source_locations_country',
                    'not_source_locations_country',
                    'source_locations_state',
                    'not_source_locations_state',
                    'source_locations_city',
                    'not_source_locations_city',
                    'source_scopes_country',
                    'not_source_scopes_country',
                    'source_scopes_state',
                    'not_source_scopes_state',
                    'source_scopes_city',
                    'not_source_scopes_city',
                    'source_scopes_level',
                    'not_source_scopes_level',
                    'source_links_in_count_min',
                    'source_links_in_count_max',
                    'source_rankings_alexa_rank_min',
                    'source_rankings_alexa_rank_max',
                    'source_rankings_alexa_country',
                    'social_shares_count_facebook_min',
                    'social_shares_count_facebook_max',
                    'social_shares_count_google_plus_min',
                    'social_shares_count_google_plus_max',
                    'social_shares_count_linkedin_min',
                    'social_shares_count_linkedin_max',
                    'social_shares_count_reddit_min',
                    'social_shares_count_reddit_max',
                    'clusters',
                    'aql',
                    'aql_default_field',
                    'query',
                    'published_at_start',
                    'published_at_end',
                    'period',
                ],
                'required': [],
                'nullable': [
                    'id',
                    'not_id',
                    'title',
                    'body',
                    'text',
                    'translations_en_title',
                    'translations_en_body',
                    'translations_en_text',
                    'language',
                    'not_language',
                    'categories_taxonomy',
                    'categories_confident',
                    'categories_id',
                    'not_categories_id',
                    'categories_label',
                    'not_categories_label',
                    'categories_level',
                    'not_categories_level',
                    'entities_id',
                    'not_entities_id',
                    'entities_links_wikipedia',
                    'not_entities_links_wikipedia',
                    'entities_links_wikidata',
                    'not_entities_links_wikidata',
                    'entities_types',
                    'not_entities_types',
                    'entities_stock_tickers',
                    'entities_body_stock_tickers',
                    'entities_body_surface_forms_text',
                    'entities_surface_forms_text',
                    'entities_title_id',
                    'not_entities_title_id',
                    'entities_title_surface_forms_text',
                    'not_entities_title_surface_forms_text',
                    'entities_title_text',
                    'not_entities_title_text',
                    'entities_title_type',
                    'not_entities_title_type',
                    'entities_title_stock_ticker',
                    'not_entities_title_stock_ticker',
                    'entities_title_links_dbpedia',
                    'not_entities_title_links_dbpedia',
                    'entities_title_links_wikipedia',
                    'not_entities_title_links_wikipedia',
                    'entities_title_links_wikidata',
                    'not_entities_title_links_wikidata',
                    'entities_body_id',
                    'not_entities_body_id',
                    'not_entities_body_surface_forms_text',
                    'entities_body_text',
                    'not_entities_body_text',
                    'entities_body_type',
                    'not_entities_body_type',
                    'entities_body_stock_ticker',
                    'not_entities_body_stock_ticker',
                    'entities_body_links_dbpedia',
                    'not_entities_body_links_dbpedia',
                    'entities_body_links_wikipedia',
                    'not_entities_body_links_wikipedia',
                    'entities_body_links_wikidata',
                    'not_entities_body_links_wikidata',
                    'sentiment_title_polarity',
                    'not_sentiment_title_polarity',
                    'sentiment_body_polarity',
                    'not_sentiment_body_polarity',
                    'media_images_count_min',
                    'media_images_count_max',
                    'media_images_width_min',
                    'media_images_width_max',
                    'media_images_height_min',
                    'media_images_height_max',
                    'media_images_content_length_min',
                    'media_images_content_length_max',
                    'media_images_format',
                    'not_media_images_format',
                    'media_videos_count_min',
                    'media_videos_count_max',
                    'author_id',
                    'not_author_id',
                    'author_name',
                    'not_author_name',
                    'source_id',
                    'not_source_id',
                    'source_name',
                    'not_source_name',
                    'source_domain',
                    'not_source_domain',
                    'source_locations_country',
                    'not_source_locations_country',
                    'source_locations_state',
                    'not_source_locations_state',
                    'source_locations_city',
                    'not_source_locations_city',
                    'source_scopes_country',
                    'not_source_scopes_country',
                    'source_scopes_state',
                    'not_source_scopes_state',
                    'source_scopes_city',
                    'not_source_scopes_city',
                    'source_scopes_level',
                    'not_source_scopes_level',
                    'source_links_in_count_min',
                    'source_links_in_count_max',
                    'source_rankings_alexa_rank_min',
                    'source_rankings_alexa_rank_max',
                    'source_rankings_alexa_country',
                    'social_shares_count_facebook_min',
                    'social_shares_count_facebook_max',
                    'social_shares_count_google_plus_min',
                    'social_shares_count_google_plus_max',
                    'social_shares_count_linkedin_min',
                    'social_shares_count_linkedin_max',
                    'social_shares_count_reddit_min',
                    'social_shares_count_reddit_max',
                    'clusters',
                    'aql',
                    'aql_default_field',
                    'query',
                    'published_at_start',
                    'published_at_end',
                    'period',
                ],
                'enum': [
                    'language',
                    'not_language',
                    'categories_taxonomy',
                    'sentiment_title_polarity',
                    'not_sentiment_title_polarity',
                    'sentiment_body_polarity',
                    'not_sentiment_body_polarity',
                    'media_images_format',
                    'not_media_images_format',
                    'source_scopes_level',
                    'not_source_scopes_level',
                ],
                'validation': [
                    'media_images_count_min',
                    'media_images_count_max',
                    'media_images_width_min',
                    'media_images_width_max',
                    'media_images_height_min',
                    'media_images_height_max',
                    'media_images_content_length_min',
                    'media_images_content_length_max',
                    'media_videos_count_min',
                    'media_videos_count_max',
                    'source_links_in_count_min',
                    'source_links_in_count_max',
                    'source_rankings_alexa_rank_min',
                    'source_rankings_alexa_rank_max',
                    'social_shares_count_facebook_min',
                    'social_shares_count_facebook_max',
                    'social_shares_count_google_plus_min',
                    'social_shares_count_google_plus_max',
                    'social_shares_count_linkedin_min',
                    'social_shares_count_linkedin_max',
                    'social_shares_count_reddit_min',
                    'social_shares_count_reddit_max',
                ]
            },
            root_map={
                'validations': {
                    ('media_images_count_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_count_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_width_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_width_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_height_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_height_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_content_length_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_content_length_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_videos_count_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_videos_count_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('source_links_in_count_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('source_links_in_count_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('source_rankings_alexa_rank_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('source_rankings_alexa_rank_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_facebook_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_facebook_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_google_plus_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_google_plus_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_linkedin_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_linkedin_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_reddit_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_reddit_max',): {

                        'exclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                    ('language',): {
                        'None': None,
                        "EN": "en",
                        "DE": "de",
                        "FR": "fr",
                        "IT": "it",
                        "ES": "es",
                        "PT": "pt"
                    },
                    ('not_language',): {
                        'None': None,
                        "EN": "en",
                        "DE": "de",
                        "FR": "fr",
                        "IT": "it",
                        "ES": "es",
                        "PT": "pt"
                    },
                    ('categories_taxonomy',): {
                        'None': None,
                        "IAB-QAG": "iab-qag",
                        "IPTC-SUBJECTCODE": "iptc-subjectcode"
                    },
                    ('sentiment_title_polarity',): {
                        'None': None,
                        "POSITIVE": "positive",
                        "NEUTRAL": "neutral",
                        "NEGATIVE": "negative"
                    },
                    ('not_sentiment_title_polarity',): {
                        'None': None,
                        "POSITIVE": "positive",
                        "NEUTRAL": "neutral",
                        "NEGATIVE": "negative"
                    },
                    ('sentiment_body_polarity',): {
                        'None': None,
                        "POSITIVE": "positive",
                        "NEUTRAL": "neutral",
                        "NEGATIVE": "negative"
                    },
                    ('not_sentiment_body_polarity',): {
                        'None': None,
                        "POSITIVE": "positive",
                        "NEUTRAL": "neutral",
                        "NEGATIVE": "negative"
                    },
                    ('media_images_format',): {
                        'None': None,
                        "BMP": "BMP",
                        "GIF": "GIF",
                        "JPEG": "JPEG",
                        "PNG": "PNG",
                        "TIFF": "TIFF",
                        "PSD": "PSD",
                        "ICO": "ICO",
                        "CUR": "CUR",
                        "WEBP": "WEBP",
                        "SVG": "SVG"
                    },
                    ('not_media_images_format',): {
                        'None': None,
                        "BMP": "BMP",
                        "GIF": "GIF",
                        "JPEG": "JPEG",
                        "PNG": "PNG",
                        "TIFF": "TIFF",
                        "PSD": "PSD",
                        "ICO": "ICO",
                        "CUR": "CUR",
                        "WEBP": "WEBP",
                        "SVG": "SVG"
                    },
                    ('source_scopes_level',): {
                        'None': None,
                        "INTERNATIONAL": "international",
                        "NATIONAL": "national",
                        "LOCAL": "local"
                    },
                    ('not_source_scopes_level',): {
                        'None': None,
                        "INTERNATIONAL": "international",
                        "NATIONAL": "national",
                        "LOCAL": "local"
                    },
                },
                'openapi_types': {
                    'id':
                        ([int], none_type,),
                    'not_id':
                        ([int], none_type,),
                    'title':
                        (str, none_type,),
                    'body':
                        (str, none_type,),
                    'text':
                        (str, none_type,),
                    'translations_en_title':
                        (str, none_type,),
                    'translations_en_body':
                        (str, none_type,),
                    'translations_en_text':
                        (str, none_type,),
                    'language':
                        ([str], none_type,),
                    'not_language':
                        ([str], none_type,),
                    'categories_taxonomy':
                        (str, none_type,),
                    'categories_confident':
                        (bool, none_type,),
                    'categories_id':
                        ([str], none_type,),
                    'not_categories_id':
                        ([str], none_type,),
                    'categories_label':
                        ([str], none_type,),
                    'not_categories_label':
                        ([str], none_type,),
                    'categories_level':
                        ([int], none_type,),
                    'not_categories_level':
                        ([int], none_type,),
                    'entities_id':
                        ([str], none_type,),
                    'not_entities_id':
                        ([str], none_type,),
                    'entities_links_wikipedia':
                        ([str], none_type,),
                    'not_entities_links_wikipedia':
                        ([str], none_type,),
                    'entities_links_wikidata':
                        ([str], none_type,),
                    'not_entities_links_wikidata':
                        ([str], none_type,),
                    'entities_types':
                        ([str], none_type,),
                    'not_entities_types':
                        ([str], none_type,),
                    'entities_stock_tickers':
                        ([str], none_type,),
                    'entities_body_stock_tickers':
                        ([str], none_type,),
                    'entities_body_surface_forms_text':
                        ([str], none_type,),
                    'entities_surface_forms_text':
                        ([str], none_type,),
                    'entities_title_id':
                        ([str], none_type,),
                    'not_entities_title_id':
                        ([str], none_type,),
                    'entities_title_surface_forms_text':
                        (str, none_type,),
                    'not_entities_title_surface_forms_text':
                        ([str], none_type,),
                    'entities_title_text':
                        ([str], none_type,),
                    'not_entities_title_text':
                        ([str], none_type,),
                    'entities_title_type':
                        ([str], none_type,),
                    'not_entities_title_type':
                        ([str], none_type,),
                    'entities_title_stock_ticker':
                        ([str], none_type,),
                    'not_entities_title_stock_ticker':
                        ([str], none_type,),
                    'entities_title_links_dbpedia':
                        ([str], none_type,),
                    'not_entities_title_links_dbpedia':
                        ([str], none_type,),
                    'entities_title_links_wikipedia':
                        ([str], none_type,),
                    'not_entities_title_links_wikipedia':
                        ([str], none_type,),
                    'entities_title_links_wikidata':
                        ([str], none_type,),
                    'not_entities_title_links_wikidata':
                        ([str], none_type,),
                    'entities_body_id':
                        ([str], none_type,),
                    'not_entities_body_id':
                        ([str], none_type,),
                    'not_entities_body_surface_forms_text':
                        ([str], none_type,),
                    'entities_body_text':
                        ([str], none_type,),
                    'not_entities_body_text':
                        ([str], none_type,),
                    'entities_body_type':
                        ([str], none_type,),
                    'not_entities_body_type':
                        ([str], none_type,),
                    'entities_body_stock_ticker':
                        ([str], none_type,),
                    'not_entities_body_stock_ticker':
                        ([str], none_type,),
                    'entities_body_links_dbpedia':
                        ([str], none_type,),
                    'not_entities_body_links_dbpedia':
                        ([str], none_type,),
                    'entities_body_links_wikipedia':
                        ([str], none_type,),
                    'not_entities_body_links_wikipedia':
                        ([str], none_type,),
                    'entities_body_links_wikidata':
                        ([str], none_type,),
                    'not_entities_body_links_wikidata':
                        ([str], none_type,),
                    'sentiment_title_polarity':
                        (str, none_type,),
                    'not_sentiment_title_polarity':
                        (str, none_type,),
                    'sentiment_body_polarity':
                        (str, none_type,),
                    'not_sentiment_body_polarity':
                        (str, none_type,),
                    'media_images_count_min':
                        (int, none_type,),
                    'media_images_count_max':
                        (int, none_type,),
                    'media_images_width_min':
                        (int, none_type,),
                    'media_images_width_max':
                        (int, none_type,),
                    'media_images_height_min':
                        (int, none_type,),
                    'media_images_height_max':
                        (int, none_type,),
                    'media_images_content_length_min':
                        (int, none_type,),
                    'media_images_content_length_max':
                        (int, none_type,),
                    'media_images_format':
                        ([str], none_type,),
                    'not_media_images_format':
                        ([str], none_type,),
                    'media_videos_count_min':
                        (int, none_type,),
                    'media_videos_count_max':
                        (int, none_type,),
                    'author_id':
                        ([int], none_type,),
                    'not_author_id':
                        ([int], none_type,),
                    'author_name':
                        (str, none_type,),
                    'not_author_name':
                        (str, none_type,),
                    'source_id':
                        ([int], none_type,),
                    'not_source_id':
                        ([int], none_type,),
                    'source_name':
                        ([str], none_type,),
                    'not_source_name':
                        ([str], none_type,),
                    'source_domain':
                        ([str], none_type,),
                    'not_source_domain':
                        ([str], none_type,),
                    'source_locations_country':
                        ([str], none_type,),
                    'not_source_locations_country':
                        ([str], none_type,),
                    'source_locations_state':
                        ([str], none_type,),
                    'not_source_locations_state':
                        ([str], none_type,),
                    'source_locations_city':
                        ([str], none_type,),
                    'not_source_locations_city':
                        ([str], none_type,),
                    'source_scopes_country':
                        ([str], none_type,),
                    'not_source_scopes_country':
                        ([str], none_type,),
                    'source_scopes_state':
                        ([str], none_type,),
                    'not_source_scopes_state':
                        ([str], none_type,),
                    'source_scopes_city':
                        ([str], none_type,),
                    'not_source_scopes_city':
                        ([str], none_type,),
                    'source_scopes_level':
                        ([str], none_type,),
                    'not_source_scopes_level':
                        ([str], none_type,),
                    'source_links_in_count_min':
                        (int, none_type,),
                    'source_links_in_count_max':
                        (int, none_type,),
                    'source_rankings_alexa_rank_min':
                        (int, none_type,),
                    'source_rankings_alexa_rank_max':
                        (int, none_type,),
                    'source_rankings_alexa_country':
                        ([str], none_type,),
                    'social_shares_count_facebook_min':
                        (int, none_type,),
                    'social_shares_count_facebook_max':
                        (int, none_type,),
                    'social_shares_count_google_plus_min':
                        (int, none_type,),
                    'social_shares_count_google_plus_max':
                        (int, none_type,),
                    'social_shares_count_linkedin_min':
                        (int, none_type,),
                    'social_shares_count_linkedin_max':
                        (int, none_type,),
                    'social_shares_count_reddit_min':
                        (int, none_type,),
                    'social_shares_count_reddit_max':
                        (int, none_type,),
                    'clusters':
                        ([str], none_type,),
                    'aql':
                        (str, none_type,),
                    'aql_default_field':
                        (str, none_type,),
                    'query':
                        (str, none_type,),
                    'published_at_start':
                        (str, none_type,),
                    'published_at_end':
                        (str, none_type,),
                    'period':
                        (str, none_type,),
                },
                'attribute_map': {
                    'id': 'id[]',
                    'not_id': '!id[]',
                    'title': 'title',
                    'body': 'body',
                    'text': 'text',
                    'translations_en_title': 'translations.en.title',
                    'translations_en_body': 'translations.en.body',
                    'translations_en_text': 'translations.en.text',
                    'language': 'language[]',
                    'not_language': '!language[]',
                    'categories_taxonomy': 'categories.taxonomy',
                    'categories_confident': 'categories.confident',
                    'categories_id': 'categories.id[]',
                    'not_categories_id': '!categories.id[]',
                    'categories_label': 'categories.label[]',
                    'not_categories_label': '!categories.label[]',
                    'categories_level': 'categories.level[]',
                    'not_categories_level': '!categories.level[]',
                    'entities_id': 'entities.id[]',
                    'not_entities_id': '!entities.id[]',
                    'entities_links_wikipedia': 'entities.links.wikipedia[]',
                    'not_entities_links_wikipedia': '!entities.links.wikipedia[]',
                    'entities_links_wikidata': 'entities.links.wikidata[]',
                    'not_entities_links_wikidata': '!entities.links.wikidata[]',
                    'entities_types': 'entities.types[]',
                    'not_entities_types': '!entities.types[]',
                    'entities_stock_tickers': 'entities.stock_tickers[]',
                    'entities_body_stock_tickers': '!entities.body.stock_tickers[]',
                    'entities_body_surface_forms_text': 'entities.body.surface_forms.text[]',
                    'entities_surface_forms_text': '!entities.surface_forms.text[]',
                    'entities_title_id': 'entities.title.id[]',
                    'not_entities_title_id': '!entities.title.id[]',
                    'entities_title_surface_forms_text': 'entities.title.surface_forms.text[]',
                    'not_entities_title_surface_forms_text': '!entities.title.surface_forms.text[]',
                    'entities_title_text': 'entities.title.text[]',
                    'not_entities_title_text': '!entities.title.text[]',
                    'entities_title_type': 'entities.title.type[]',
                    'not_entities_title_type': '!entities.title.type[]',
                    'entities_title_stock_ticker': 'entities.title.stock_ticker[]',
                    'not_entities_title_stock_ticker': '!entities.title.stock_ticker[]',
                    'entities_title_links_dbpedia': 'entities.title.links.dbpedia[]',
                    'not_entities_title_links_dbpedia': '!entities.title.links.dbpedia[]',
                    'entities_title_links_wikipedia': 'entities.title.links.wikipedia[]',
                    'not_entities_title_links_wikipedia': '!entities.title.links.wikipedia[]',
                    'entities_title_links_wikidata': 'entities.title.links.wikidata[]',
                    'not_entities_title_links_wikidata': '!entities.title.links.wikidata[]',
                    'entities_body_id': 'entities.body.id[]',
                    'not_entities_body_id': '!entities.body.id[]',
                    'not_entities_body_surface_forms_text': '!entities.body.surface_forms.text[]',
                    'entities_body_text': 'entities.body.text[]',
                    'not_entities_body_text': '!entities.body.text[]',
                    'entities_body_type': 'entities.body.type[]',
                    'not_entities_body_type': '!entities.body.type[]',
                    'entities_body_stock_ticker': 'entities.body.stock_ticker[]',
                    'not_entities_body_stock_ticker': '!entities.body.stock_ticker[]',
                    'entities_body_links_dbpedia': 'entities.body.links.dbpedia[]',
                    'not_entities_body_links_dbpedia': '!entities.body.links.dbpedia[]',
                    'entities_body_links_wikipedia': 'entities.body.links.wikipedia[]',
                    'not_entities_body_links_wikipedia': '!entities.body.links.wikipedia[]',
                    'entities_body_links_wikidata': 'entities.body.links.wikidata[]',
                    'not_entities_body_links_wikidata': '!entities.body.links.wikidata[]',
                    'sentiment_title_polarity': 'sentiment.title.polarity',
                    'not_sentiment_title_polarity': '!sentiment.title.polarity',
                    'sentiment_body_polarity': 'sentiment.body.polarity',
                    'not_sentiment_body_polarity': '!sentiment.body.polarity',
                    'media_images_count_min': 'media.images.count.min',
                    'media_images_count_max': 'media.images.count.max',
                    'media_images_width_min': 'media.images.width.min',
                    'media_images_width_max': 'media.images.width.max',
                    'media_images_height_min': 'media.images.height.min',
                    'media_images_height_max': 'media.images.height.max',
                    'media_images_content_length_min': 'media.images.content_length.min',
                    'media_images_content_length_max': 'media.images.content_length.max',
                    'media_images_format': 'media.images.format[]',
                    'not_media_images_format': '!media.images.format[]',
                    'media_videos_count_min': 'media.videos.count.min',
                    'media_videos_count_max': 'media.videos.count.max',
                    'author_id': 'author.id[]',
                    'not_author_id': '!author.id[]',
                    'author_name': 'author.name',
                    'not_author_name': '!author.name',
                    'source_id': 'source.id[]',
                    'not_source_id': '!source.id[]',
                    'source_name': 'source.name[]',
                    'not_source_name': '!source.name[]',
                    'source_domain': 'source.domain[]',
                    'not_source_domain': '!source.domain[]',
                    'source_locations_country': 'source.locations.country[]',
                    'not_source_locations_country': '!source.locations.country[]',
                    'source_locations_state': 'source.locations.state[]',
                    'not_source_locations_state': '!source.locations.state[]',
                    'source_locations_city': 'source.locations.city[]',
                    'not_source_locations_city': '!source.locations.city[]',
                    'source_scopes_country': 'source.scopes.country[]',
                    'not_source_scopes_country': '!source.scopes.country[]',
                    'source_scopes_state': 'source.scopes.state[]',
                    'not_source_scopes_state': '!source.scopes.state[]',
                    'source_scopes_city': 'source.scopes.city[]',
                    'not_source_scopes_city': '!source.scopes.city[]',
                    'source_scopes_level': 'source.scopes.level[]',
                    'not_source_scopes_level': '!source.scopes.level[]',
                    'source_links_in_count_min': 'source.links_in_count.min',
                    'source_links_in_count_max': 'source.links_in_count.max',
                    'source_rankings_alexa_rank_min': 'source.rankings.alexa.rank.min',
                    'source_rankings_alexa_rank_max': 'source.rankings.alexa.rank.max',
                    'source_rankings_alexa_country': 'source.rankings.alexa.country[]',
                    'social_shares_count_facebook_min': 'social_shares_count.facebook.min',
                    'social_shares_count_facebook_max': 'social_shares_count.facebook.max',
                    'social_shares_count_google_plus_min': 'social_shares_count.google_plus.min',
                    'social_shares_count_google_plus_max': 'social_shares_count.google_plus.max',
                    'social_shares_count_linkedin_min': 'social_shares_count.linkedin.min',
                    'social_shares_count_linkedin_max': 'social_shares_count.linkedin.max',
                    'social_shares_count_reddit_min': 'social_shares_count.reddit.min',
                    'social_shares_count_reddit_max': 'social_shares_count.reddit.max',
                    'clusters': 'clusters[]',
                    'aql': 'aql',
                    'aql_default_field': 'aql_default_field',
                    'query': 'query',
                    'published_at_start': 'published_at.start',
                    'published_at_end': 'published_at.end',
                    'period': 'period',
                },
                'location_map': {
                    'id': 'query',
                    'not_id': 'query',
                    'title': 'query',
                    'body': 'query',
                    'text': 'query',
                    'translations_en_title': 'query',
                    'translations_en_body': 'query',
                    'translations_en_text': 'query',
                    'language': 'query',
                    'not_language': 'query',
                    'categories_taxonomy': 'query',
                    'categories_confident': 'query',
                    'categories_id': 'query',
                    'not_categories_id': 'query',
                    'categories_label': 'query',
                    'not_categories_label': 'query',
                    'categories_level': 'query',
                    'not_categories_level': 'query',
                    'entities_id': 'query',
                    'not_entities_id': 'query',
                    'entities_links_wikipedia': 'query',
                    'not_entities_links_wikipedia': 'query',
                    'entities_links_wikidata': 'query',
                    'not_entities_links_wikidata': 'query',
                    'entities_types': 'query',
                    'not_entities_types': 'query',
                    'entities_stock_tickers': 'query',
                    'entities_body_stock_tickers': 'query',
                    'entities_body_surface_forms_text': 'query',
                    'entities_surface_forms_text': 'query',
                    'entities_title_id': 'query',
                    'not_entities_title_id': 'query',
                    'entities_title_surface_forms_text': 'query',
                    'not_entities_title_surface_forms_text': 'query',
                    'entities_title_text': 'query',
                    'not_entities_title_text': 'query',
                    'entities_title_type': 'query',
                    'not_entities_title_type': 'query',
                    'entities_title_stock_ticker': 'query',
                    'not_entities_title_stock_ticker': 'query',
                    'entities_title_links_dbpedia': 'query',
                    'not_entities_title_links_dbpedia': 'query',
                    'entities_title_links_wikipedia': 'query',
                    'not_entities_title_links_wikipedia': 'query',
                    'entities_title_links_wikidata': 'query',
                    'not_entities_title_links_wikidata': 'query',
                    'entities_body_id': 'query',
                    'not_entities_body_id': 'query',
                    'not_entities_body_surface_forms_text': 'query',
                    'entities_body_text': 'query',
                    'not_entities_body_text': 'query',
                    'entities_body_type': 'query',
                    'not_entities_body_type': 'query',
                    'entities_body_stock_ticker': 'query',
                    'not_entities_body_stock_ticker': 'query',
                    'entities_body_links_dbpedia': 'query',
                    'not_entities_body_links_dbpedia': 'query',
                    'entities_body_links_wikipedia': 'query',
                    'not_entities_body_links_wikipedia': 'query',
                    'entities_body_links_wikidata': 'query',
                    'not_entities_body_links_wikidata': 'query',
                    'sentiment_title_polarity': 'query',
                    'not_sentiment_title_polarity': 'query',
                    'sentiment_body_polarity': 'query',
                    'not_sentiment_body_polarity': 'query',
                    'media_images_count_min': 'query',
                    'media_images_count_max': 'query',
                    'media_images_width_min': 'query',
                    'media_images_width_max': 'query',
                    'media_images_height_min': 'query',
                    'media_images_height_max': 'query',
                    'media_images_content_length_min': 'query',
                    'media_images_content_length_max': 'query',
                    'media_images_format': 'query',
                    'not_media_images_format': 'query',
                    'media_videos_count_min': 'query',
                    'media_videos_count_max': 'query',
                    'author_id': 'query',
                    'not_author_id': 'query',
                    'author_name': 'query',
                    'not_author_name': 'query',
                    'source_id': 'query',
                    'not_source_id': 'query',
                    'source_name': 'query',
                    'not_source_name': 'query',
                    'source_domain': 'query',
                    'not_source_domain': 'query',
                    'source_locations_country': 'query',
                    'not_source_locations_country': 'query',
                    'source_locations_state': 'query',
                    'not_source_locations_state': 'query',
                    'source_locations_city': 'query',
                    'not_source_locations_city': 'query',
                    'source_scopes_country': 'query',
                    'not_source_scopes_country': 'query',
                    'source_scopes_state': 'query',
                    'not_source_scopes_state': 'query',
                    'source_scopes_city': 'query',
                    'not_source_scopes_city': 'query',
                    'source_scopes_level': 'query',
                    'not_source_scopes_level': 'query',
                    'source_links_in_count_min': 'query',
                    'source_links_in_count_max': 'query',
                    'source_rankings_alexa_rank_min': 'query',
                    'source_rankings_alexa_rank_max': 'query',
                    'source_rankings_alexa_country': 'query',
                    'social_shares_count_facebook_min': 'query',
                    'social_shares_count_facebook_max': 'query',
                    'social_shares_count_google_plus_min': 'query',
                    'social_shares_count_google_plus_max': 'query',
                    'social_shares_count_linkedin_min': 'query',
                    'social_shares_count_linkedin_max': 'query',
                    'social_shares_count_reddit_min': 'query',
                    'social_shares_count_reddit_max': 'query',
                    'clusters': 'query',
                    'aql': 'query',
                    'aql_default_field': 'query',
                    'query': 'query',
                    'published_at_start': 'query',
                    'published_at_end': 'query',
                    'period': 'query',
                },
                'collection_format_map': {
                    'id': 'multi',
                    'not_id': 'multi',
                    'language': 'multi',
                    'not_language': 'multi',
                    'categories_id': 'multi',
                    'not_categories_id': 'multi',
                    'categories_label': 'multi',
                    'not_categories_label': 'multi',
                    'categories_level': 'multi',
                    'not_categories_level': 'multi',
                    'entities_id': 'multi',
                    'not_entities_id': 'multi',
                    'entities_links_wikipedia': 'multi',
                    'not_entities_links_wikipedia': 'multi',
                    'entities_links_wikidata': 'multi',
                    'not_entities_links_wikidata': 'multi',
                    'entities_types': 'multi',
                    'not_entities_types': 'multi',
                    'entities_stock_tickers': 'multi',
                    'entities_body_stock_tickers': 'multi',
                    'entities_body_surface_forms_text': 'multi',
                    'entities_surface_forms_text': 'multi',
                    'entities_title_id': 'multi',
                    'not_entities_title_id': 'multi',
                    'not_entities_title_surface_forms_text': 'multi',
                    'entities_title_text': 'multi',
                    'not_entities_title_text': 'multi',
                    'entities_title_type': 'multi',
                    'not_entities_title_type': 'multi',
                    'entities_title_stock_ticker': 'multi',
                    'not_entities_title_stock_ticker': 'multi',
                    'entities_title_links_dbpedia': 'multi',
                    'not_entities_title_links_dbpedia': 'multi',
                    'entities_title_links_wikipedia': 'multi',
                    'not_entities_title_links_wikipedia': 'multi',
                    'entities_title_links_wikidata': 'multi',
                    'not_entities_title_links_wikidata': 'multi',
                    'entities_body_id': 'multi',
                    'not_entities_body_id': 'multi',
                    'not_entities_body_surface_forms_text': 'multi',
                    'entities_body_text': 'multi',
                    'not_entities_body_text': 'multi',
                    'entities_body_type': 'multi',
                    'not_entities_body_type': 'multi',
                    'entities_body_stock_ticker': 'multi',
                    'not_entities_body_stock_ticker': 'multi',
                    'entities_body_links_dbpedia': 'multi',
                    'not_entities_body_links_dbpedia': 'multi',
                    'entities_body_links_wikipedia': 'multi',
                    'not_entities_body_links_wikipedia': 'multi',
                    'entities_body_links_wikidata': 'multi',
                    'not_entities_body_links_wikidata': 'multi',
                    'media_images_format': 'multi',
                    'not_media_images_format': 'multi',
                    'author_id': 'multi',
                    'not_author_id': 'multi',
                    'source_id': 'multi',
                    'not_source_id': 'multi',
                    'source_name': 'multi',
                    'not_source_name': 'multi',
                    'source_domain': 'multi',
                    'not_source_domain': 'multi',
                    'source_locations_country': 'multi',
                    'not_source_locations_country': 'multi',
                    'source_locations_state': 'multi',
                    'not_source_locations_state': 'multi',
                    'source_locations_city': 'multi',
                    'not_source_locations_city': 'multi',
                    'source_scopes_country': 'multi',
                    'not_source_scopes_country': 'multi',
                    'source_scopes_state': 'multi',
                    'not_source_scopes_state': 'multi',
                    'source_scopes_city': 'multi',
                    'not_source_scopes_city': 'multi',
                    'source_scopes_level': 'multi',
                    'not_source_scopes_level': 'multi',
                    'source_rankings_alexa_country': 'multi',
                    'clusters': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_time_series
        )

        def __list_trends(
            self,
            field,
            **kwargs
        ):
            """List trends  # noqa: E501

            The trends endpoint allows you to identify the most-mentioned entities, concepts and keywords relevant to your query. For example, this endpoint allows you to set parameters like a time period, a subject category, or an entity, and your request will return the most mentioned entities or keywords that are mentioned in relation to your query.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_trends(field, async_req=True)
            >>> result = thread.get()

            Args:
                field (str): This parameter is used to specify the trend field. 

            Keyword Args:
                id ([int], none_type): This parameter is used for finding stories by story id. . [optional]
                not_id ([int], none_type): This parameter is used for excluding stories by story id. . [optional]
                title (str, none_type): This parameter is used for finding stories whose title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                body (str, none_type): This parameter is used for finding stories whose body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                text (str, none_type): This parameter is used for finding stories whose title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                translations_en_title (str, none_type): This parameter is used for finding stories whose translation title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                translations_en_body (str, none_type): This parameter is used for finding stories whose translation body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                translations_en_text (str, none_type): This parameter is used for finding stories whose translation title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). . [optional]
                links_permalink ([str], none_type): This parameter is used to find stories based on their url. . [optional]
                not_links_permalink ([str], none_type): This parameter is used to exclude stories based on their url. . [optional]
                language ([str], none_type): This parameter is used for finding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes. . [optional]
                not_language ([str], none_type): This parameter is used for excluding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes. . [optional]
                published_at_start (str, none_type): This parameter is used for finding stories whose published at time is greater than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). . [optional]
                published_at_end (str, none_type): This parameter is used for finding stories whose published at time is less than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). . [optional]
                categories_taxonomy (str, none_type): This parameter is used for defining the type of the taxonomy for the rest of the categories queries. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                categories_confident (bool, none_type): This parameter is used for finding stories whose categories are confident. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional] if omitted the server will use the default value of True
                categories_id ([str], none_type): This parameter is used for finding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                not_categories_id ([str], none_type): This parameter is used for excluding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                categories_label ([str], none_type): This parameter is used for finding stories by categories label. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                not_categories_label ([str], none_type): This parameter is used for excluding stories by categories label. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                categories_level ([int], none_type): This parameter is used for finding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                not_categories_level ([int], none_type): This parameter is used for excluding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). . [optional]
                entities_id ([str], none_type): This parameter is used to find stories based on the specified entities `id`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_id ([str], none_type): This parameter is used to exclude stories based on the specified entity's `id`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_links_wikipedia ([str], none_type): This parameter is used to find stories based on the specified entities wikipedia URL. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_links_wikipedia ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikipedia URL. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_links_wikidata ([str], none_type): This parameter is used to find stories based on the specified entities wikidata URL. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_links_wikidata ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikidata URL. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_types ([str], none_type): This parameter is used to find stories based on the specified entities `types`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_types ([str], none_type): This parameter is used to exclude stories based on the specified entity's `types`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_stock_tickers ([str], none_type): This parameter is used to find stories based on the specified entities `stock_tickers`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_stock_tickers ([str], none_type): This parameter is used to exclude stories based on the specified entity's `stock_tickers` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_surface_forms_text ([str], none_type): This parameter is used to find stories based on the specified entities `surface_form` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_surface_forms_text ([str], none_type): This parameter is used to exclude stories based on the specified entity's `surface_form`. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_id ([str], none_type): This parameter is used to find stories based on the specified entities `id` in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_id ([str], none_type): This parameter is used to exclude stories based on the specified entity's `id` in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_surface_forms_text (str, none_type): This parameter is used to find stories based on the specified entities `surface_form` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_surface_forms_text ([str], none_type): This parameter is used to exclude stories based on the specified entity's `surface_form` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_text ([str], none_type): This parameter is used to find stories based on the specified entities `text` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_text ([str], none_type): This parameter is used to exclude stories based on the specified entities `text` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_type ([str], none_type): This parameter is used to find stories based on the specified entities `type` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_type ([str], none_type): This parameter is used to exclude stories based on the specified entities `type` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_stock_ticker ([str], none_type): This parameter is used to find stories based on the specified entities `stock_ticker` in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_stock_ticker ([str], none_type): This parameter is used to exclude stories based on the specified entity's `stock_ticker` in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_links_dbpedia ([str], none_type): This parameter is used to find stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_links_dbpedia ([str], none_type): This parameter is used to exclude stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_links_wikipedia ([str], none_type): This parameter is used to find stories based on the specified entities wikipedia URL in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_links_wikipedia ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikipedia URL in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_title_links_wikidata ([str], none_type): This parameter is used to find stories based on the specified entities wikidata URL in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_title_links_wikidata ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikidata URL in the title of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_id ([str], none_type): This parameter is used to find stories based on the specified entities `id` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_id ([str], none_type): This parameter is used to exclude stories based on the specified entity's `id` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_surface_forms_text ([str], none_type): This parameter is used to exclude stories based on the specified entity's `surface_form` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_text ([str], none_type): This parameter is used to find stories based on the specified entities `text` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_text ([str], none_type): This parameter is used to exclude stories based on the specified entities `text` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_type ([str], none_type): This parameter is used to find stories based on the specified entities `type` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_type ([str], none_type): This parameter is used to exclude stories based on the specified entities `type` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_stock_ticker ([str], none_type): This parameter is used to find stories based on the specified entities `stock_ticker` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_stock_ticker ([str], none_type): This parameter is used to exclude stories based on the specified entity's `stock_ticker` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_links_dbpedia ([str], none_type): This parameter is used to find stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_links_dbpedia ([str], none_type): This parameter is used to exclude stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_links_wikipedia ([str], none_type): This parameter is used to find stories based on the specified entities wikipedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_links_wikipedia ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikipedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                entities_body_links_wikidata ([str], none_type): This parameter is used to find stories based on the specified entities wikidata URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                not_entities_body_links_wikidata ([str], none_type): This parameter is used to exclude stories based on the specified entity's Wikidata URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). . [optional]
                sentiment_title_polarity (str, none_type): This parameter is used for finding stories whose title sentiment is the specified value. . [optional]
                not_sentiment_title_polarity (str, none_type): This parameter is used for excluding stories whose title sentiment is the specified value. . [optional]
                sentiment_body_polarity (str, none_type): This parameter is used for finding stories whose body sentiment is the specified value. . [optional]
                not_sentiment_body_polarity (str, none_type): This parameter is used for excluding stories whose body sentiment is the specified value. . [optional]
                media_images_count_min (int, none_type): This parameter is used for finding stories whose number of images is greater than or equal to the specified value. . [optional]
                media_images_count_max (int, none_type): This parameter is used for finding stories whose number of images is less than or equal to the specified value. . [optional]
                media_images_width_min (int, none_type): This parameter is used for finding stories whose width of images are greater than or equal to the specified value. . [optional]
                media_images_width_max (int, none_type): This parameter is used for finding stories whose width of images are less than or equal to the specified value. . [optional]
                media_images_height_min (int, none_type): This parameter is used for finding stories whose height of images are greater than or equal to the specified value. . [optional]
                media_images_height_max (int, none_type): This parameter is used for finding stories whose height of images are less than or equal to the specified value. . [optional]
                media_images_content_length_min (int, none_type): This parameter is used for finding stories whose images content length are greater than or equal to the specified value. . [optional]
                media_images_content_length_max (int, none_type): This parameter is used for finding stories whose images content length are less than or equal to the specified value. . [optional]
                media_images_format ([str], none_type): This parameter is used for finding stories whose images format are the specified value. . [optional]
                not_media_images_format ([str], none_type): This parameter is used for excluding stories whose images format are the specified value. . [optional]
                media_videos_count_min (int, none_type): This parameter is used for finding stories whose number of videos is greater than or equal to the specified value. . [optional]
                media_videos_count_max (int, none_type): This parameter is used for finding stories whose number of videos is less than or equal to the specified value. . [optional]
                author_id ([int], none_type): This parameter is used for finding stories whose author id is the specified value. . [optional]
                not_author_id ([int], none_type): This parameter is used for excluding stories whose author id is the specified value. . [optional]
                author_name (str, none_type): This parameter is used for finding stories whose author full name contains the specified value. . [optional]
                not_author_name (str, none_type): This parameter is used for excluding stories whose author full name contains the specified value. . [optional]
                source_id ([int], none_type): This parameter is used for finding stories whose source id is the specified value. . [optional]
                not_source_id ([int], none_type): This parameter is used for excluding stories whose source id is the specified value. . [optional]
                source_name ([str], none_type): This parameter is used for finding stories whose source name contains the specified value. . [optional]
                not_source_name ([str], none_type): This parameter is used for excluding stories whose source name contains the specified value. . [optional]
                source_domain ([str], none_type): This parameter is used for finding stories whose source domain is the specified value. . [optional]
                not_source_domain ([str], none_type): This parameter is used for excluding stories whose source domain is the specified value. . [optional]
                source_locations_country ([str], none_type): This parameter is used for finding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_locations_country ([str], none_type): This parameter is used for excluding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_locations_state ([str], none_type): This parameter is used for finding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_locations_state ([str], none_type): This parameter is used for excluding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_locations_city ([str], none_type): This parameter is used for finding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_locations_city ([str], none_type): This parameter is used for excluding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_scopes_country ([str], none_type): This parameter is used for finding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_scopes_country ([str], none_type): This parameter is used for excluding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_scopes_state ([str], none_type): This parameter is used for finding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_scopes_state ([str], none_type): This parameter is used for excluding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_scopes_city ([str], none_type): This parameter is used for finding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_scopes_city ([str], none_type): This parameter is used for excluding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_scopes_level ([str], none_type): This parameter is used for finding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                not_source_scopes_level ([str], none_type): This parameter is used for excluding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). . [optional]
                source_links_in_count_min (int, none_type): This parameter is used for finding stories from sources whose Links in count is greater than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count). . [optional]
                source_links_in_count_max (int, none_type): This parameter is used for finding stories from sources whose Links in count is less than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count). . [optional]
                source_rankings_alexa_rank_min (int, none_type): This parameter is used for finding stories from sources whose Alexa rank is greater than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks). . [optional]
                source_rankings_alexa_rank_max (int, none_type): This parameter is used for finding stories from sources whose Alexa rank is less than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks). . [optional]
                source_rankings_alexa_country ([str], none_type): This parameter is used for finding stories from sources whose Alexa rank is in the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks). . [optional]
                social_shares_count_facebook_min (int, none_type): This parameter is used for finding stories whose Facebook social shares count is greater than or equal to the specified value. . [optional]
                social_shares_count_facebook_max (int, none_type): This parameter is used for finding stories whose Facebook social shares count is less than or equal to the specified value. . [optional]
                social_shares_count_google_plus_min (int, none_type): This parameter is used for finding stories whose Google+ social shares count is greater than or equal to the specified value. . [optional]
                social_shares_count_google_plus_max (int, none_type): This parameter is used for finding stories whose Google+ social shares count is less than or equal to the specified value. . [optional]
                social_shares_count_linkedin_min (int, none_type): This parameter is used for finding stories whose LinkedIn social shares count is greater than or equal to the specified value. . [optional]
                social_shares_count_linkedin_max (int, none_type): This parameter is used for finding stories whose LinkedIn social shares count is less than or equal to the specified value. . [optional]
                social_shares_count_reddit_min (int, none_type): This parameter is used for finding stories whose Reddit social shares count is greater than or equal to the specified value. . [optional]
                social_shares_count_reddit_max (int, none_type): This parameter is used for finding stories whose Reddit social shares count is less than or equal to the specified value. . [optional]
                clusters ([str], none_type): This parameter is used for finding stories with belonging to one of clusters in a specific set of clusters You can read more about working with clustering [here](https://newsapi.aylien.com/docs/working-with-clustering). . [optional]
                aql (str, none_type): This parameter is used to supply a query in AYLIEN Query Language. . [optional]
                aql_default_field (str, none_type): This parameter is used to supply an optional default field name used in the AQL query. . [optional] if omitted the server will use the default value of "text"
                query (str, none_type): This parameter is used to make an advanced query using $and, $or, $not logical operators and $eq for exact match, $text for a text search and $lt, $gt, $lte, $gte for range queries. value must be a json string. . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Trends
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['field'] = \
                field
            return self.call_with_http_info(**kwargs)

        self.list_trends = _Endpoint(
            settings={
                'response_type': (Trends,),
                'auth': [
                    'app_id',
                    'app_key'
                ],
                'endpoint_path': '/trends',
                'operation_id': 'list_trends',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'field',
                    'id',
                    'not_id',
                    'title',
                    'body',
                    'text',
                    'translations_en_title',
                    'translations_en_body',
                    'translations_en_text',
                    'links_permalink',
                    'not_links_permalink',
                    'language',
                    'not_language',
                    'published_at_start',
                    'published_at_end',
                    'categories_taxonomy',
                    'categories_confident',
                    'categories_id',
                    'not_categories_id',
                    'categories_label',
                    'not_categories_label',
                    'categories_level',
                    'not_categories_level',
                    'entities_id',
                    'not_entities_id',
                    'entities_links_wikipedia',
                    'not_entities_links_wikipedia',
                    'entities_links_wikidata',
                    'not_entities_links_wikidata',
                    'entities_types',
                    'not_entities_types',
                    'entities_stock_tickers',
                    'entities_body_stock_tickers',
                    'entities_body_surface_forms_text',
                    'entities_surface_forms_text',
                    'entities_title_id',
                    'not_entities_title_id',
                    'entities_title_surface_forms_text',
                    'not_entities_title_surface_forms_text',
                    'entities_title_text',
                    'not_entities_title_text',
                    'entities_title_type',
                    'not_entities_title_type',
                    'entities_title_stock_ticker',
                    'not_entities_title_stock_ticker',
                    'entities_title_links_dbpedia',
                    'not_entities_title_links_dbpedia',
                    'entities_title_links_wikipedia',
                    'not_entities_title_links_wikipedia',
                    'entities_title_links_wikidata',
                    'not_entities_title_links_wikidata',
                    'entities_body_id',
                    'not_entities_body_id',
                    'not_entities_body_surface_forms_text',
                    'entities_body_text',
                    'not_entities_body_text',
                    'entities_body_type',
                    'not_entities_body_type',
                    'entities_body_stock_ticker',
                    'not_entities_body_stock_ticker',
                    'entities_body_links_dbpedia',
                    'not_entities_body_links_dbpedia',
                    'entities_body_links_wikipedia',
                    'not_entities_body_links_wikipedia',
                    'entities_body_links_wikidata',
                    'not_entities_body_links_wikidata',
                    'sentiment_title_polarity',
                    'not_sentiment_title_polarity',
                    'sentiment_body_polarity',
                    'not_sentiment_body_polarity',
                    'media_images_count_min',
                    'media_images_count_max',
                    'media_images_width_min',
                    'media_images_width_max',
                    'media_images_height_min',
                    'media_images_height_max',
                    'media_images_content_length_min',
                    'media_images_content_length_max',
                    'media_images_format',
                    'not_media_images_format',
                    'media_videos_count_min',
                    'media_videos_count_max',
                    'author_id',
                    'not_author_id',
                    'author_name',
                    'not_author_name',
                    'source_id',
                    'not_source_id',
                    'source_name',
                    'not_source_name',
                    'source_domain',
                    'not_source_domain',
                    'source_locations_country',
                    'not_source_locations_country',
                    'source_locations_state',
                    'not_source_locations_state',
                    'source_locations_city',
                    'not_source_locations_city',
                    'source_scopes_country',
                    'not_source_scopes_country',
                    'source_scopes_state',
                    'not_source_scopes_state',
                    'source_scopes_city',
                    'not_source_scopes_city',
                    'source_scopes_level',
                    'not_source_scopes_level',
                    'source_links_in_count_min',
                    'source_links_in_count_max',
                    'source_rankings_alexa_rank_min',
                    'source_rankings_alexa_rank_max',
                    'source_rankings_alexa_country',
                    'social_shares_count_facebook_min',
                    'social_shares_count_facebook_max',
                    'social_shares_count_google_plus_min',
                    'social_shares_count_google_plus_max',
                    'social_shares_count_linkedin_min',
                    'social_shares_count_linkedin_max',
                    'social_shares_count_reddit_min',
                    'social_shares_count_reddit_max',
                    'clusters',
                    'aql',
                    'aql_default_field',
                    'query',
                ],
                'required': [
                    'field',
                ],
                'nullable': [
                    'id',
                    'not_id',
                    'title',
                    'body',
                    'text',
                    'translations_en_title',
                    'translations_en_body',
                    'translations_en_text',
                    'links_permalink',
                    'not_links_permalink',
                    'language',
                    'not_language',
                    'published_at_start',
                    'published_at_end',
                    'categories_taxonomy',
                    'categories_confident',
                    'categories_id',
                    'not_categories_id',
                    'categories_label',
                    'not_categories_label',
                    'categories_level',
                    'not_categories_level',
                    'entities_id',
                    'not_entities_id',
                    'entities_links_wikipedia',
                    'not_entities_links_wikipedia',
                    'entities_links_wikidata',
                    'not_entities_links_wikidata',
                    'entities_types',
                    'not_entities_types',
                    'entities_stock_tickers',
                    'entities_body_stock_tickers',
                    'entities_body_surface_forms_text',
                    'entities_surface_forms_text',
                    'entities_title_id',
                    'not_entities_title_id',
                    'entities_title_surface_forms_text',
                    'not_entities_title_surface_forms_text',
                    'entities_title_text',
                    'not_entities_title_text',
                    'entities_title_type',
                    'not_entities_title_type',
                    'entities_title_stock_ticker',
                    'not_entities_title_stock_ticker',
                    'entities_title_links_dbpedia',
                    'not_entities_title_links_dbpedia',
                    'entities_title_links_wikipedia',
                    'not_entities_title_links_wikipedia',
                    'entities_title_links_wikidata',
                    'not_entities_title_links_wikidata',
                    'entities_body_id',
                    'not_entities_body_id',
                    'not_entities_body_surface_forms_text',
                    'entities_body_text',
                    'not_entities_body_text',
                    'entities_body_type',
                    'not_entities_body_type',
                    'entities_body_stock_ticker',
                    'not_entities_body_stock_ticker',
                    'entities_body_links_dbpedia',
                    'not_entities_body_links_dbpedia',
                    'entities_body_links_wikipedia',
                    'not_entities_body_links_wikipedia',
                    'entities_body_links_wikidata',
                    'not_entities_body_links_wikidata',
                    'sentiment_title_polarity',
                    'not_sentiment_title_polarity',
                    'sentiment_body_polarity',
                    'not_sentiment_body_polarity',
                    'media_images_count_min',
                    'media_images_count_max',
                    'media_images_width_min',
                    'media_images_width_max',
                    'media_images_height_min',
                    'media_images_height_max',
                    'media_images_content_length_min',
                    'media_images_content_length_max',
                    'media_images_format',
                    'not_media_images_format',
                    'media_videos_count_min',
                    'media_videos_count_max',
                    'author_id',
                    'not_author_id',
                    'author_name',
                    'not_author_name',
                    'source_id',
                    'not_source_id',
                    'source_name',
                    'not_source_name',
                    'source_domain',
                    'not_source_domain',
                    'source_locations_country',
                    'not_source_locations_country',
                    'source_locations_state',
                    'not_source_locations_state',
                    'source_locations_city',
                    'not_source_locations_city',
                    'source_scopes_country',
                    'not_source_scopes_country',
                    'source_scopes_state',
                    'not_source_scopes_state',
                    'source_scopes_city',
                    'not_source_scopes_city',
                    'source_scopes_level',
                    'not_source_scopes_level',
                    'source_links_in_count_min',
                    'source_links_in_count_max',
                    'source_rankings_alexa_rank_min',
                    'source_rankings_alexa_rank_max',
                    'source_rankings_alexa_country',
                    'social_shares_count_facebook_min',
                    'social_shares_count_facebook_max',
                    'social_shares_count_google_plus_min',
                    'social_shares_count_google_plus_max',
                    'social_shares_count_linkedin_min',
                    'social_shares_count_linkedin_max',
                    'social_shares_count_reddit_min',
                    'social_shares_count_reddit_max',
                    'clusters',
                    'aql',
                    'aql_default_field',
                    'query',
                ],
                'enum': [
                    'field',
                    'language',
                    'not_language',
                    'categories_taxonomy',
                    'sentiment_title_polarity',
                    'not_sentiment_title_polarity',
                    'sentiment_body_polarity',
                    'not_sentiment_body_polarity',
                    'media_images_format',
                    'not_media_images_format',
                    'source_scopes_level',
                    'not_source_scopes_level',
                ],
                'validation': [
                    'media_images_count_min',
                    'media_images_count_max',
                    'media_images_width_min',
                    'media_images_width_max',
                    'media_images_height_min',
                    'media_images_height_max',
                    'media_images_content_length_min',
                    'media_images_content_length_max',
                    'media_videos_count_min',
                    'media_videos_count_max',
                    'source_links_in_count_min',
                    'source_links_in_count_max',
                    'source_rankings_alexa_rank_min',
                    'source_rankings_alexa_rank_max',
                    'social_shares_count_facebook_min',
                    'social_shares_count_facebook_max',
                    'social_shares_count_google_plus_min',
                    'social_shares_count_google_plus_max',
                    'social_shares_count_linkedin_min',
                    'social_shares_count_linkedin_max',
                    'social_shares_count_reddit_min',
                    'social_shares_count_reddit_max',
                ]
            },
            root_map={
                'validations': {
                    ('media_images_count_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_count_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_width_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_width_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_height_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_height_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_content_length_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_images_content_length_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_videos_count_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('media_videos_count_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('source_links_in_count_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('source_links_in_count_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('source_rankings_alexa_rank_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('source_rankings_alexa_rank_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_facebook_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_facebook_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_google_plus_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_google_plus_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_linkedin_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_linkedin_max',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_reddit_min',): {

                        'exclusive_minimum': 0,
                    },
                    ('social_shares_count_reddit_max',): {

                        'exclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                    ('field',): {

                        "AUTHOR.NAME": "author.name",
                        "SOURCE.NAME": "source.name",
                        "SOURCE.DOMAIN": "source.domain",
                        "KEYWORDS": "keywords",
                        "ENTITIES.ID": "entities.id",
                        "ENTITIES.SURFACE_FORMS.TEXT": "entities.surface_forms.text",
                        "ENTITIES.LINKS.WIKIPEDIA": "entities.links.wikipedia",
                        "ENTITIES.LINKS.WIKIDATA": "entities.links.wikidata",
                        "ENTITIES.TITLE.SURFACE_FORMS.TEXT": "entities.title.surface_forms.text",
                        "ENTITIES.TITLE.TEXT": "entities.title.text",
                        "ENTITIES.TITLE.TYPE": "entities.title.type",
                        "ENTITIES.TITLE.LINKS.DBPEDIA": "entities.title.links.dbpedia",
                        "ENTITIES.BODY.SURFACE_FORMS.TEXT": "entities.body.surface_forms.text",
                        "ENTITIES.BODY.TEXT": "entities.body.text",
                        "ENTITIES.BODY.TYPE": "entities.body.type",
                        "ENTITIES.BODY.LINKS.DBPEDIA": "entities.body.links.dbpedia",
                        "HASHTAGS": "hashtags",
                        "CATEGORIES.ID": "categories.id",
                        "SENTIMENT.TITLE.POLARITY": "sentiment.title.polarity",
                        "SENTIMENT.BODY.POLARITY": "sentiment.body.polarity",
                        "CLUSTERS": "clusters"
                    },
                    ('language',): {
                        'None': None,
                        "EN": "en",
                        "DE": "de",
                        "FR": "fr",
                        "IT": "it",
                        "ES": "es",
                        "PT": "pt"
                    },
                    ('not_language',): {
                        'None': None,
                        "EN": "en",
                        "DE": "de",
                        "FR": "fr",
                        "IT": "it",
                        "ES": "es",
                        "PT": "pt"
                    },
                    ('categories_taxonomy',): {
                        'None': None,
                        "IAB-QAG": "iab-qag",
                        "IPTC-SUBJECTCODE": "iptc-subjectcode"
                    },
                    ('sentiment_title_polarity',): {
                        'None': None,
                        "POSITIVE": "positive",
                        "NEUTRAL": "neutral",
                        "NEGATIVE": "negative"
                    },
                    ('not_sentiment_title_polarity',): {
                        'None': None,
                        "POSITIVE": "positive",
                        "NEUTRAL": "neutral",
                        "NEGATIVE": "negative"
                    },
                    ('sentiment_body_polarity',): {
                        'None': None,
                        "POSITIVE": "positive",
                        "NEUTRAL": "neutral",
                        "NEGATIVE": "negative"
                    },
                    ('not_sentiment_body_polarity',): {
                        'None': None,
                        "POSITIVE": "positive",
                        "NEUTRAL": "neutral",
                        "NEGATIVE": "negative"
                    },
                    ('media_images_format',): {
                        'None': None,
                        "BMP": "BMP",
                        "GIF": "GIF",
                        "JPEG": "JPEG",
                        "PNG": "PNG",
                        "TIFF": "TIFF",
                        "PSD": "PSD",
                        "ICO": "ICO",
                        "CUR": "CUR",
                        "WEBP": "WEBP",
                        "SVG": "SVG"
                    },
                    ('not_media_images_format',): {
                        'None': None,
                        "BMP": "BMP",
                        "GIF": "GIF",
                        "JPEG": "JPEG",
                        "PNG": "PNG",
                        "TIFF": "TIFF",
                        "PSD": "PSD",
                        "ICO": "ICO",
                        "CUR": "CUR",
                        "WEBP": "WEBP",
                        "SVG": "SVG"
                    },
                    ('source_scopes_level',): {
                        'None': None,
                        "INTERNATIONAL": "international",
                        "NATIONAL": "national",
                        "LOCAL": "local"
                    },
                    ('not_source_scopes_level',): {
                        'None': None,
                        "INTERNATIONAL": "international",
                        "NATIONAL": "national",
                        "LOCAL": "local"
                    },
                },
                'openapi_types': {
                    'field':
                        (str,),
                    'id':
                        ([int], none_type,),
                    'not_id':
                        ([int], none_type,),
                    'title':
                        (str, none_type,),
                    'body':
                        (str, none_type,),
                    'text':
                        (str, none_type,),
                    'translations_en_title':
                        (str, none_type,),
                    'translations_en_body':
                        (str, none_type,),
                    'translations_en_text':
                        (str, none_type,),
                    'links_permalink':
                        ([str], none_type,),
                    'not_links_permalink':
                        ([str], none_type,),
                    'language':
                        ([str], none_type,),
                    'not_language':
                        ([str], none_type,),
                    'published_at_start':
                        (str, none_type,),
                    'published_at_end':
                        (str, none_type,),
                    'categories_taxonomy':
                        (str, none_type,),
                    'categories_confident':
                        (bool, none_type,),
                    'categories_id':
                        ([str], none_type,),
                    'not_categories_id':
                        ([str], none_type,),
                    'categories_label':
                        ([str], none_type,),
                    'not_categories_label':
                        ([str], none_type,),
                    'categories_level':
                        ([int], none_type,),
                    'not_categories_level':
                        ([int], none_type,),
                    'entities_id':
                        ([str], none_type,),
                    'not_entities_id':
                        ([str], none_type,),
                    'entities_links_wikipedia':
                        ([str], none_type,),
                    'not_entities_links_wikipedia':
                        ([str], none_type,),
                    'entities_links_wikidata':
                        ([str], none_type,),
                    'not_entities_links_wikidata':
                        ([str], none_type,),
                    'entities_types':
                        ([str], none_type,),
                    'not_entities_types':
                        ([str], none_type,),
                    'entities_stock_tickers':
                        ([str], none_type,),
                    'entities_body_stock_tickers':
                        ([str], none_type,),
                    'entities_body_surface_forms_text':
                        ([str], none_type,),
                    'entities_surface_forms_text':
                        ([str], none_type,),
                    'entities_title_id':
                        ([str], none_type,),
                    'not_entities_title_id':
                        ([str], none_type,),
                    'entities_title_surface_forms_text':
                        (str, none_type,),
                    'not_entities_title_surface_forms_text':
                        ([str], none_type,),
                    'entities_title_text':
                        ([str], none_type,),
                    'not_entities_title_text':
                        ([str], none_type,),
                    'entities_title_type':
                        ([str], none_type,),
                    'not_entities_title_type':
                        ([str], none_type,),
                    'entities_title_stock_ticker':
                        ([str], none_type,),
                    'not_entities_title_stock_ticker':
                        ([str], none_type,),
                    'entities_title_links_dbpedia':
                        ([str], none_type,),
                    'not_entities_title_links_dbpedia':
                        ([str], none_type,),
                    'entities_title_links_wikipedia':
                        ([str], none_type,),
                    'not_entities_title_links_wikipedia':
                        ([str], none_type,),
                    'entities_title_links_wikidata':
                        ([str], none_type,),
                    'not_entities_title_links_wikidata':
                        ([str], none_type,),
                    'entities_body_id':
                        ([str], none_type,),
                    'not_entities_body_id':
                        ([str], none_type,),
                    'not_entities_body_surface_forms_text':
                        ([str], none_type,),
                    'entities_body_text':
                        ([str], none_type,),
                    'not_entities_body_text':
                        ([str], none_type,),
                    'entities_body_type':
                        ([str], none_type,),
                    'not_entities_body_type':
                        ([str], none_type,),
                    'entities_body_stock_ticker':
                        ([str], none_type,),
                    'not_entities_body_stock_ticker':
                        ([str], none_type,),
                    'entities_body_links_dbpedia':
                        ([str], none_type,),
                    'not_entities_body_links_dbpedia':
                        ([str], none_type,),
                    'entities_body_links_wikipedia':
                        ([str], none_type,),
                    'not_entities_body_links_wikipedia':
                        ([str], none_type,),
                    'entities_body_links_wikidata':
                        ([str], none_type,),
                    'not_entities_body_links_wikidata':
                        ([str], none_type,),
                    'sentiment_title_polarity':
                        (str, none_type,),
                    'not_sentiment_title_polarity':
                        (str, none_type,),
                    'sentiment_body_polarity':
                        (str, none_type,),
                    'not_sentiment_body_polarity':
                        (str, none_type,),
                    'media_images_count_min':
                        (int, none_type,),
                    'media_images_count_max':
                        (int, none_type,),
                    'media_images_width_min':
                        (int, none_type,),
                    'media_images_width_max':
                        (int, none_type,),
                    'media_images_height_min':
                        (int, none_type,),
                    'media_images_height_max':
                        (int, none_type,),
                    'media_images_content_length_min':
                        (int, none_type,),
                    'media_images_content_length_max':
                        (int, none_type,),
                    'media_images_format':
                        ([str], none_type,),
                    'not_media_images_format':
                        ([str], none_type,),
                    'media_videos_count_min':
                        (int, none_type,),
                    'media_videos_count_max':
                        (int, none_type,),
                    'author_id':
                        ([int], none_type,),
                    'not_author_id':
                        ([int], none_type,),
                    'author_name':
                        (str, none_type,),
                    'not_author_name':
                        (str, none_type,),
                    'source_id':
                        ([int], none_type,),
                    'not_source_id':
                        ([int], none_type,),
                    'source_name':
                        ([str], none_type,),
                    'not_source_name':
                        ([str], none_type,),
                    'source_domain':
                        ([str], none_type,),
                    'not_source_domain':
                        ([str], none_type,),
                    'source_locations_country':
                        ([str], none_type,),
                    'not_source_locations_country':
                        ([str], none_type,),
                    'source_locations_state':
                        ([str], none_type,),
                    'not_source_locations_state':
                        ([str], none_type,),
                    'source_locations_city':
                        ([str], none_type,),
                    'not_source_locations_city':
                        ([str], none_type,),
                    'source_scopes_country':
                        ([str], none_type,),
                    'not_source_scopes_country':
                        ([str], none_type,),
                    'source_scopes_state':
                        ([str], none_type,),
                    'not_source_scopes_state':
                        ([str], none_type,),
                    'source_scopes_city':
                        ([str], none_type,),
                    'not_source_scopes_city':
                        ([str], none_type,),
                    'source_scopes_level':
                        ([str], none_type,),
                    'not_source_scopes_level':
                        ([str], none_type,),
                    'source_links_in_count_min':
                        (int, none_type,),
                    'source_links_in_count_max':
                        (int, none_type,),
                    'source_rankings_alexa_rank_min':
                        (int, none_type,),
                    'source_rankings_alexa_rank_max':
                        (int, none_type,),
                    'source_rankings_alexa_country':
                        ([str], none_type,),
                    'social_shares_count_facebook_min':
                        (int, none_type,),
                    'social_shares_count_facebook_max':
                        (int, none_type,),
                    'social_shares_count_google_plus_min':
                        (int, none_type,),
                    'social_shares_count_google_plus_max':
                        (int, none_type,),
                    'social_shares_count_linkedin_min':
                        (int, none_type,),
                    'social_shares_count_linkedin_max':
                        (int, none_type,),
                    'social_shares_count_reddit_min':
                        (int, none_type,),
                    'social_shares_count_reddit_max':
                        (int, none_type,),
                    'clusters':
                        ([str], none_type,),
                    'aql':
                        (str, none_type,),
                    'aql_default_field':
                        (str, none_type,),
                    'query':
                        (str, none_type,),
                },
                'attribute_map': {
                    'field': 'field',
                    'id': 'id[]',
                    'not_id': '!id[]',
                    'title': 'title',
                    'body': 'body',
                    'text': 'text',
                    'translations_en_title': 'translations.en.title',
                    'translations_en_body': 'translations.en.body',
                    'translations_en_text': 'translations.en.text',
                    'links_permalink': 'links.permalink[]',
                    'not_links_permalink': '!links.permalink[]',
                    'language': 'language[]',
                    'not_language': '!language[]',
                    'published_at_start': 'published_at.start',
                    'published_at_end': 'published_at.end',
                    'categories_taxonomy': 'categories.taxonomy',
                    'categories_confident': 'categories.confident',
                    'categories_id': 'categories.id[]',
                    'not_categories_id': '!categories.id[]',
                    'categories_label': 'categories.label[]',
                    'not_categories_label': '!categories.label[]',
                    'categories_level': 'categories.level[]',
                    'not_categories_level': '!categories.level[]',
                    'entities_id': 'entities.id[]',
                    'not_entities_id': '!entities.id[]',
                    'entities_links_wikipedia': 'entities.links.wikipedia[]',
                    'not_entities_links_wikipedia': '!entities.links.wikipedia[]',
                    'entities_links_wikidata': 'entities.links.wikidata[]',
                    'not_entities_links_wikidata': '!entities.links.wikidata[]',
                    'entities_types': 'entities.types[]',
                    'not_entities_types': '!entities.types[]',
                    'entities_stock_tickers': 'entities.stock_tickers[]',
                    'entities_body_stock_tickers': '!entities.body.stock_tickers[]',
                    'entities_body_surface_forms_text': 'entities.body.surface_forms.text[]',
                    'entities_surface_forms_text': '!entities.surface_forms.text[]',
                    'entities_title_id': 'entities.title.id[]',
                    'not_entities_title_id': '!entities.title.id[]',
                    'entities_title_surface_forms_text': 'entities.title.surface_forms.text[]',
                    'not_entities_title_surface_forms_text': '!entities.title.surface_forms.text[]',
                    'entities_title_text': 'entities.title.text[]',
                    'not_entities_title_text': '!entities.title.text[]',
                    'entities_title_type': 'entities.title.type[]',
                    'not_entities_title_type': '!entities.title.type[]',
                    'entities_title_stock_ticker': 'entities.title.stock_ticker[]',
                    'not_entities_title_stock_ticker': '!entities.title.stock_ticker[]',
                    'entities_title_links_dbpedia': 'entities.title.links.dbpedia[]',
                    'not_entities_title_links_dbpedia': '!entities.title.links.dbpedia[]',
                    'entities_title_links_wikipedia': 'entities.title.links.wikipedia[]',
                    'not_entities_title_links_wikipedia': '!entities.title.links.wikipedia[]',
                    'entities_title_links_wikidata': 'entities.title.links.wikidata[]',
                    'not_entities_title_links_wikidata': '!entities.title.links.wikidata[]',
                    'entities_body_id': 'entities.body.id[]',
                    'not_entities_body_id': '!entities.body.id[]',
                    'not_entities_body_surface_forms_text': '!entities.body.surface_forms.text[]',
                    'entities_body_text': 'entities.body.text[]',
                    'not_entities_body_text': '!entities.body.text[]',
                    'entities_body_type': 'entities.body.type[]',
                    'not_entities_body_type': '!entities.body.type[]',
                    'entities_body_stock_ticker': 'entities.body.stock_ticker[]',
                    'not_entities_body_stock_ticker': '!entities.body.stock_ticker[]',
                    'entities_body_links_dbpedia': 'entities.body.links.dbpedia[]',
                    'not_entities_body_links_dbpedia': '!entities.body.links.dbpedia[]',
                    'entities_body_links_wikipedia': 'entities.body.links.wikipedia[]',
                    'not_entities_body_links_wikipedia': '!entities.body.links.wikipedia[]',
                    'entities_body_links_wikidata': 'entities.body.links.wikidata[]',
                    'not_entities_body_links_wikidata': '!entities.body.links.wikidata[]',
                    'sentiment_title_polarity': 'sentiment.title.polarity',
                    'not_sentiment_title_polarity': '!sentiment.title.polarity',
                    'sentiment_body_polarity': 'sentiment.body.polarity',
                    'not_sentiment_body_polarity': '!sentiment.body.polarity',
                    'media_images_count_min': 'media.images.count.min',
                    'media_images_count_max': 'media.images.count.max',
                    'media_images_width_min': 'media.images.width.min',
                    'media_images_width_max': 'media.images.width.max',
                    'media_images_height_min': 'media.images.height.min',
                    'media_images_height_max': 'media.images.height.max',
                    'media_images_content_length_min': 'media.images.content_length.min',
                    'media_images_content_length_max': 'media.images.content_length.max',
                    'media_images_format': 'media.images.format[]',
                    'not_media_images_format': '!media.images.format[]',
                    'media_videos_count_min': 'media.videos.count.min',
                    'media_videos_count_max': 'media.videos.count.max',
                    'author_id': 'author.id[]',
                    'not_author_id': '!author.id[]',
                    'author_name': 'author.name',
                    'not_author_name': '!author.name',
                    'source_id': 'source.id[]',
                    'not_source_id': '!source.id[]',
                    'source_name': 'source.name[]',
                    'not_source_name': '!source.name[]',
                    'source_domain': 'source.domain[]',
                    'not_source_domain': '!source.domain[]',
                    'source_locations_country': 'source.locations.country[]',
                    'not_source_locations_country': '!source.locations.country[]',
                    'source_locations_state': 'source.locations.state[]',
                    'not_source_locations_state': '!source.locations.state[]',
                    'source_locations_city': 'source.locations.city[]',
                    'not_source_locations_city': '!source.locations.city[]',
                    'source_scopes_country': 'source.scopes.country[]',
                    'not_source_scopes_country': '!source.scopes.country[]',
                    'source_scopes_state': 'source.scopes.state[]',
                    'not_source_scopes_state': '!source.scopes.state[]',
                    'source_scopes_city': 'source.scopes.city[]',
                    'not_source_scopes_city': '!source.scopes.city[]',
                    'source_scopes_level': 'source.scopes.level[]',
                    'not_source_scopes_level': '!source.scopes.level[]',
                    'source_links_in_count_min': 'source.links_in_count.min',
                    'source_links_in_count_max': 'source.links_in_count.max',
                    'source_rankings_alexa_rank_min': 'source.rankings.alexa.rank.min',
                    'source_rankings_alexa_rank_max': 'source.rankings.alexa.rank.max',
                    'source_rankings_alexa_country': 'source.rankings.alexa.country[]',
                    'social_shares_count_facebook_min': 'social_shares_count.facebook.min',
                    'social_shares_count_facebook_max': 'social_shares_count.facebook.max',
                    'social_shares_count_google_plus_min': 'social_shares_count.google_plus.min',
                    'social_shares_count_google_plus_max': 'social_shares_count.google_plus.max',
                    'social_shares_count_linkedin_min': 'social_shares_count.linkedin.min',
                    'social_shares_count_linkedin_max': 'social_shares_count.linkedin.max',
                    'social_shares_count_reddit_min': 'social_shares_count.reddit.min',
                    'social_shares_count_reddit_max': 'social_shares_count.reddit.max',
                    'clusters': 'clusters[]',
                    'aql': 'aql',
                    'aql_default_field': 'aql_default_field',
                    'query': 'query',
                },
                'location_map': {
                    'field': 'query',
                    'id': 'query',
                    'not_id': 'query',
                    'title': 'query',
                    'body': 'query',
                    'text': 'query',
                    'translations_en_title': 'query',
                    'translations_en_body': 'query',
                    'translations_en_text': 'query',
                    'links_permalink': 'query',
                    'not_links_permalink': 'query',
                    'language': 'query',
                    'not_language': 'query',
                    'published_at_start': 'query',
                    'published_at_end': 'query',
                    'categories_taxonomy': 'query',
                    'categories_confident': 'query',
                    'categories_id': 'query',
                    'not_categories_id': 'query',
                    'categories_label': 'query',
                    'not_categories_label': 'query',
                    'categories_level': 'query',
                    'not_categories_level': 'query',
                    'entities_id': 'query',
                    'not_entities_id': 'query',
                    'entities_links_wikipedia': 'query',
                    'not_entities_links_wikipedia': 'query',
                    'entities_links_wikidata': 'query',
                    'not_entities_links_wikidata': 'query',
                    'entities_types': 'query',
                    'not_entities_types': 'query',
                    'entities_stock_tickers': 'query',
                    'entities_body_stock_tickers': 'query',
                    'entities_body_surface_forms_text': 'query',
                    'entities_surface_forms_text': 'query',
                    'entities_title_id': 'query',
                    'not_entities_title_id': 'query',
                    'entities_title_surface_forms_text': 'query',
                    'not_entities_title_surface_forms_text': 'query',
                    'entities_title_text': 'query',
                    'not_entities_title_text': 'query',
                    'entities_title_type': 'query',
                    'not_entities_title_type': 'query',
                    'entities_title_stock_ticker': 'query',
                    'not_entities_title_stock_ticker': 'query',
                    'entities_title_links_dbpedia': 'query',
                    'not_entities_title_links_dbpedia': 'query',
                    'entities_title_links_wikipedia': 'query',
                    'not_entities_title_links_wikipedia': 'query',
                    'entities_title_links_wikidata': 'query',
                    'not_entities_title_links_wikidata': 'query',
                    'entities_body_id': 'query',
                    'not_entities_body_id': 'query',
                    'not_entities_body_surface_forms_text': 'query',
                    'entities_body_text': 'query',
                    'not_entities_body_text': 'query',
                    'entities_body_type': 'query',
                    'not_entities_body_type': 'query',
                    'entities_body_stock_ticker': 'query',
                    'not_entities_body_stock_ticker': 'query',
                    'entities_body_links_dbpedia': 'query',
                    'not_entities_body_links_dbpedia': 'query',
                    'entities_body_links_wikipedia': 'query',
                    'not_entities_body_links_wikipedia': 'query',
                    'entities_body_links_wikidata': 'query',
                    'not_entities_body_links_wikidata': 'query',
                    'sentiment_title_polarity': 'query',
                    'not_sentiment_title_polarity': 'query',
                    'sentiment_body_polarity': 'query',
                    'not_sentiment_body_polarity': 'query',
                    'media_images_count_min': 'query',
                    'media_images_count_max': 'query',
                    'media_images_width_min': 'query',
                    'media_images_width_max': 'query',
                    'media_images_height_min': 'query',
                    'media_images_height_max': 'query',
                    'media_images_content_length_min': 'query',
                    'media_images_content_length_max': 'query',
                    'media_images_format': 'query',
                    'not_media_images_format': 'query',
                    'media_videos_count_min': 'query',
                    'media_videos_count_max': 'query',
                    'author_id': 'query',
                    'not_author_id': 'query',
                    'author_name': 'query',
                    'not_author_name': 'query',
                    'source_id': 'query',
                    'not_source_id': 'query',
                    'source_name': 'query',
                    'not_source_name': 'query',
                    'source_domain': 'query',
                    'not_source_domain': 'query',
                    'source_locations_country': 'query',
                    'not_source_locations_country': 'query',
                    'source_locations_state': 'query',
                    'not_source_locations_state': 'query',
                    'source_locations_city': 'query',
                    'not_source_locations_city': 'query',
                    'source_scopes_country': 'query',
                    'not_source_scopes_country': 'query',
                    'source_scopes_state': 'query',
                    'not_source_scopes_state': 'query',
                    'source_scopes_city': 'query',
                    'not_source_scopes_city': 'query',
                    'source_scopes_level': 'query',
                    'not_source_scopes_level': 'query',
                    'source_links_in_count_min': 'query',
                    'source_links_in_count_max': 'query',
                    'source_rankings_alexa_rank_min': 'query',
                    'source_rankings_alexa_rank_max': 'query',
                    'source_rankings_alexa_country': 'query',
                    'social_shares_count_facebook_min': 'query',
                    'social_shares_count_facebook_max': 'query',
                    'social_shares_count_google_plus_min': 'query',
                    'social_shares_count_google_plus_max': 'query',
                    'social_shares_count_linkedin_min': 'query',
                    'social_shares_count_linkedin_max': 'query',
                    'social_shares_count_reddit_min': 'query',
                    'social_shares_count_reddit_max': 'query',
                    'clusters': 'query',
                    'aql': 'query',
                    'aql_default_field': 'query',
                    'query': 'query',
                },
                'collection_format_map': {
                    'id': 'multi',
                    'not_id': 'multi',
                    'links_permalink': 'multi',
                    'not_links_permalink': 'multi',
                    'language': 'multi',
                    'not_language': 'multi',
                    'categories_id': 'multi',
                    'not_categories_id': 'multi',
                    'categories_label': 'multi',
                    'not_categories_label': 'multi',
                    'categories_level': 'multi',
                    'not_categories_level': 'multi',
                    'entities_id': 'multi',
                    'not_entities_id': 'multi',
                    'entities_links_wikipedia': 'multi',
                    'not_entities_links_wikipedia': 'multi',
                    'entities_links_wikidata': 'multi',
                    'not_entities_links_wikidata': 'multi',
                    'entities_types': 'multi',
                    'not_entities_types': 'multi',
                    'entities_stock_tickers': 'multi',
                    'entities_body_stock_tickers': 'multi',
                    'entities_body_surface_forms_text': 'multi',
                    'entities_surface_forms_text': 'multi',
                    'entities_title_id': 'multi',
                    'not_entities_title_id': 'multi',
                    'not_entities_title_surface_forms_text': 'multi',
                    'entities_title_text': 'multi',
                    'not_entities_title_text': 'multi',
                    'entities_title_type': 'multi',
                    'not_entities_title_type': 'multi',
                    'entities_title_stock_ticker': 'multi',
                    'not_entities_title_stock_ticker': 'multi',
                    'entities_title_links_dbpedia': 'multi',
                    'not_entities_title_links_dbpedia': 'multi',
                    'entities_title_links_wikipedia': 'multi',
                    'not_entities_title_links_wikipedia': 'multi',
                    'entities_title_links_wikidata': 'multi',
                    'not_entities_title_links_wikidata': 'multi',
                    'entities_body_id': 'multi',
                    'not_entities_body_id': 'multi',
                    'not_entities_body_surface_forms_text': 'multi',
                    'entities_body_text': 'multi',
                    'not_entities_body_text': 'multi',
                    'entities_body_type': 'multi',
                    'not_entities_body_type': 'multi',
                    'entities_body_stock_ticker': 'multi',
                    'not_entities_body_stock_ticker': 'multi',
                    'entities_body_links_dbpedia': 'multi',
                    'not_entities_body_links_dbpedia': 'multi',
                    'entities_body_links_wikipedia': 'multi',
                    'not_entities_body_links_wikipedia': 'multi',
                    'entities_body_links_wikidata': 'multi',
                    'not_entities_body_links_wikidata': 'multi',
                    'media_images_format': 'multi',
                    'not_media_images_format': 'multi',
                    'author_id': 'multi',
                    'not_author_id': 'multi',
                    'source_id': 'multi',
                    'not_source_id': 'multi',
                    'source_name': 'multi',
                    'not_source_name': 'multi',
                    'source_domain': 'multi',
                    'not_source_domain': 'multi',
                    'source_locations_country': 'multi',
                    'not_source_locations_country': 'multi',
                    'source_locations_state': 'multi',
                    'not_source_locations_state': 'multi',
                    'source_locations_city': 'multi',
                    'not_source_locations_city': 'multi',
                    'source_scopes_country': 'multi',
                    'not_source_scopes_country': 'multi',
                    'source_scopes_state': 'multi',
                    'not_source_scopes_state': 'multi',
                    'source_scopes_city': 'multi',
                    'not_source_scopes_city': 'multi',
                    'source_scopes_level': 'multi',
                    'not_source_scopes_level': 'multi',
                    'source_rankings_alexa_country': 'multi',
                    'clusters': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_trends
        )
