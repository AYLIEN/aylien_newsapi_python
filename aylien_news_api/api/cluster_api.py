# coding: utf-8

"""
    AYLIEN News API

    The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client.   # noqa: E501

    The version of the OpenAPI document: 3.0
    Contact: support@aylien.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from aylien_news_api.api_client import ApiClient
from aylien_news_api.exceptions import (
    ApiTypeError,
    ApiValueError
)


class ClusterApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def list_clusters(self, **kwargs):  # noqa: E501
        """List Clusters  # noqa: E501

        The clusters endpoint is used to return clusters based on parameters you set in your query.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_clusters(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[int] id: This parameter is used for finding clusters by cluster id. 
        :param list[int] id2: This parameter is used for excluding clusters by cluster id. 
        :param int story_count_min: This parameter is used for finding clusters with more than or equal to a specific amount of stories associated with them. 
        :param int story_count_max: This parameter is used for finding clusters with less than or equal to a specific amount of stories associated with them. 
        :param str time_start: This parameter is used for finding clusters whose creation time is greater than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). 
        :param str time_end: This parameter is used for finding clusters whose creation time is less than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). 
        :param str earliest_story_start: This parameter is used for finding clusters whose publication date of its earliest story is greater than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). 
        :param str earliest_story_end: This parameter is used for finding clusters whose publication date of its earliest story is less than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). 
        :param str latest_story_start: This parameter is used for finding clusters whose publication date of its latest story is greater than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). 
        :param str latest_story_end: This parameter is used for finding clusters whose publication date of its latest story is less than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). 
        :param list[str] location_country: This parameter is used for finding clusters belonging to a specific country. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] location_country2: This parameter is used for excluding clusters belonging to a specific country. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] _return: This parameter is used for specifying return fields.
        :param str sort_by: This parameter is used for changing the order column of the results. You can read about sorting results [here](https://newsapi.aylien.com/docs/sorting-results). 
        :param str sort_direction: This parameter is used for changing the order direction of the result. You can read about sorting results [here](https://newsapi.aylien.com/docs/sorting-results). 
        :param str cursor: This parameter is used for finding a specific page. You can read more about pagination of results [here](https://newsapi.aylien.com/docs/pagination-of-results). 
        :param int per_page: This parameter is used for specifying number of items in each page You can read more about pagination of results [here](https://newsapi.aylien.com/docs/pagination-of-results) 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Clusters
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.list_clusters_with_http_info(**kwargs)  # noqa: E501

    def list_clusters_with_http_info(self, **kwargs):  # noqa: E501
        """List Clusters  # noqa: E501

        The clusters endpoint is used to return clusters based on parameters you set in your query.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_clusters_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[int] id: This parameter is used for finding clusters by cluster id. 
        :param list[int] id2: This parameter is used for excluding clusters by cluster id. 
        :param int story_count_min: This parameter is used for finding clusters with more than or equal to a specific amount of stories associated with them. 
        :param int story_count_max: This parameter is used for finding clusters with less than or equal to a specific amount of stories associated with them. 
        :param str time_start: This parameter is used for finding clusters whose creation time is greater than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). 
        :param str time_end: This parameter is used for finding clusters whose creation time is less than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). 
        :param str earliest_story_start: This parameter is used for finding clusters whose publication date of its earliest story is greater than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). 
        :param str earliest_story_end: This parameter is used for finding clusters whose publication date of its earliest story is less than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). 
        :param str latest_story_start: This parameter is used for finding clusters whose publication date of its latest story is greater than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). 
        :param str latest_story_end: This parameter is used for finding clusters whose publication date of its latest story is less than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). 
        :param list[str] location_country: This parameter is used for finding clusters belonging to a specific country. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] location_country2: This parameter is used for excluding clusters belonging to a specific country. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
        :param list[str] _return: This parameter is used for specifying return fields.
        :param str sort_by: This parameter is used for changing the order column of the results. You can read about sorting results [here](https://newsapi.aylien.com/docs/sorting-results). 
        :param str sort_direction: This parameter is used for changing the order direction of the result. You can read about sorting results [here](https://newsapi.aylien.com/docs/sorting-results). 
        :param str cursor: This parameter is used for finding a specific page. You can read more about pagination of results [here](https://newsapi.aylien.com/docs/pagination-of-results). 
        :param int per_page: This parameter is used for specifying number of items in each page You can read more about pagination of results [here](https://newsapi.aylien.com/docs/pagination-of-results) 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Clusters, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'id2', 'story_count_min', 'story_count_max', 'time_start', 'time_end', 'earliest_story_start', 'earliest_story_end', 'latest_story_start', 'latest_story_end', 'location_country', 'location_country2', '_return', 'sort_by', 'sort_direction', 'cursor', 'per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_clusters" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if 'story_count_min' in local_var_params and local_var_params['story_count_min'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `story_count_min` when calling `list_clusters`, must be a value greater than `0`")  # noqa: E501
        if 'story_count_max' in local_var_params and local_var_params['story_count_max'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `story_count_max` when calling `list_clusters`, must be a value greater than `0`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] > 100:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `per_page` when calling `list_clusters`, must be a value less than or equal to `100`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `per_page` when calling `list_clusters`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in local_var_params:
            query_params.append(('id[]', local_var_params['id']))  # noqa: E501
            collection_formats['id[]'] = 'multi'  # noqa: E501
        if 'id2' in local_var_params:
            query_params.append(('!id[]', local_var_params['id2']))  # noqa: E501
            collection_formats['!id[]'] = 'multi'  # noqa: E501
        if 'story_count_min' in local_var_params:
            query_params.append(('story_count.min', local_var_params['story_count_min']))  # noqa: E501
        if 'story_count_max' in local_var_params:
            query_params.append(('story_count.max', local_var_params['story_count_max']))  # noqa: E501
        if 'time_start' in local_var_params:
            query_params.append(('time.start', local_var_params['time_start']))  # noqa: E501
        if 'time_end' in local_var_params:
            query_params.append(('time.end', local_var_params['time_end']))  # noqa: E501
        if 'earliest_story_start' in local_var_params:
            query_params.append(('earliest_story.start', local_var_params['earliest_story_start']))  # noqa: E501
        if 'earliest_story_end' in local_var_params:
            query_params.append(('earliest_story.end', local_var_params['earliest_story_end']))  # noqa: E501
        if 'latest_story_start' in local_var_params:
            query_params.append(('latest_story.start', local_var_params['latest_story_start']))  # noqa: E501
        if 'latest_story_end' in local_var_params:
            query_params.append(('latest_story.end', local_var_params['latest_story_end']))  # noqa: E501
        if 'location_country' in local_var_params:
            query_params.append(('location.country', local_var_params['location_country']))  # noqa: E501
            collection_formats['location.country'] = 'multi'  # noqa: E501
        if 'location_country2' in local_var_params:
            query_params.append(('!location.country', local_var_params['location_country2']))  # noqa: E501
            collection_formats['!location.country'] = 'multi'  # noqa: E501
        if '_return' in local_var_params:
            query_params.append(('return[]', local_var_params['_return']))  # noqa: E501
            collection_formats['return[]'] = 'multi'  # noqa: E501
        if 'sort_by' in local_var_params:
            query_params.append(('sort_by', local_var_params['sort_by']))  # noqa: E501
        if 'sort_direction' in local_var_params:
            query_params.append(('sort_direction', local_var_params['sort_direction']))  # noqa: E501
        if 'cursor' in local_var_params:
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'per_page' in local_var_params:
            query_params.append(('per_page', local_var_params['per_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['app_id', 'app_key']  # noqa: E501

        return self.api_client.call_api(
            '/clusters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Clusters',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
