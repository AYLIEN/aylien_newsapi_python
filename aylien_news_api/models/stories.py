# coding: utf-8

"""
    AYLIEN News API

    The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client.   # noqa: E501

    The version of the OpenAPI document: 3.0
    Contact: support@aylien.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Stories(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'next_page_cursor': 'str',
        'stories': 'list[Story]'
    }

    attribute_map = {
        'next_page_cursor': 'next_page_cursor',
        'stories': 'stories'
    }

    def __init__(self, next_page_cursor=None, stories=None):  # noqa: E501
        """Stories - a model defined in OpenAPI"""  # noqa: E501

        self._next_page_cursor = None
        self._stories = None
        self.discriminator = None

        if next_page_cursor is not None:
            self.next_page_cursor = next_page_cursor
        if stories is not None:
            self.stories = stories

    @property
    def next_page_cursor(self):
        """Gets the next_page_cursor of this Stories.  # noqa: E501

        The next page cursor  # noqa: E501

        :return: The next_page_cursor of this Stories.  # noqa: E501
        :rtype: str
        """
        return self._next_page_cursor

    @next_page_cursor.setter
    def next_page_cursor(self, next_page_cursor):
        """Sets the next_page_cursor of this Stories.

        The next page cursor  # noqa: E501

        :param next_page_cursor: The next_page_cursor of this Stories.  # noqa: E501
        :type: str
        """

        self._next_page_cursor = next_page_cursor

    @property
    def stories(self):
        """Gets the stories of this Stories.  # noqa: E501

        An array of stories  # noqa: E501

        :return: The stories of this Stories.  # noqa: E501
        :rtype: list[Story]
        """
        return self._stories

    @stories.setter
    def stories(self, stories):
        """Sets the stories of this Stories.

        An array of stories  # noqa: E501

        :param stories: The stories of this Stories.  # noqa: E501
        :type: list[Story]
        """

        self._stories = stories

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Stories):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
