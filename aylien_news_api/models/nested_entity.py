# coding: utf-8

"""
    AYLIEN News API

    The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client.   # noqa: E501

    The version of the OpenAPI document: 5.1.0
    Contact: support@aylien.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from aylien_news_api.configuration import Configuration


class NestedEntity(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'Query',
        'name': 'Query',
        'surface_forms_text': 'Query',
        'sentiment': 'Query',
        'element': 'Query',
        'links_wikipedia': 'Query',
        'links_wikidata': 'Query',
        'stock_ticker': 'Query',
        'type': 'Query'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'surface_forms_text': 'surface_forms.text',
        'sentiment': 'sentiment',
        'element': 'element',
        'links_wikipedia': 'links.wikipedia',
        'links_wikidata': 'links.wikidata',
        'stock_ticker': 'stock_ticker',
        'type': 'type'
    }

    def __init__(self, id=None, name=None, surface_forms_text=None, sentiment=None, element=None, links_wikipedia=None, links_wikidata=None, stock_ticker=None, type=None, local_vars_configuration=None):  # noqa: E501
        """NestedEntity - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._surface_forms_text = None
        self._sentiment = None
        self._element = None
        self._links_wikipedia = None
        self._links_wikidata = None
        self._stock_ticker = None
        self._type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if surface_forms_text is not None:
            self.surface_forms_text = surface_forms_text
        if sentiment is not None:
            self.sentiment = sentiment
        if element is not None:
            self.element = element
        if links_wikipedia is not None:
            self.links_wikipedia = links_wikipedia
        if links_wikidata is not None:
            self.links_wikidata = links_wikidata
        if stock_ticker is not None:
            self.stock_ticker = stock_ticker
        if type is not None:
            self.type = type

    @property
    def id(self):
        """Gets the id of this NestedEntity.  # noqa: E501


        :return: The id of this NestedEntity.  # noqa: E501
        :rtype: Query
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NestedEntity.


        :param id: The id of this NestedEntity.  # noqa: E501
        :type id: Query
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this NestedEntity.  # noqa: E501


        :return: The name of this NestedEntity.  # noqa: E501
        :rtype: Query
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NestedEntity.


        :param name: The name of this NestedEntity.  # noqa: E501
        :type name: Query
        """

        self._name = name

    @property
    def surface_forms_text(self):
        """Gets the surface_forms_text of this NestedEntity.  # noqa: E501


        :return: The surface_forms_text of this NestedEntity.  # noqa: E501
        :rtype: Query
        """
        return self._surface_forms_text

    @surface_forms_text.setter
    def surface_forms_text(self, surface_forms_text):
        """Sets the surface_forms_text of this NestedEntity.


        :param surface_forms_text: The surface_forms_text of this NestedEntity.  # noqa: E501
        :type surface_forms_text: Query
        """

        self._surface_forms_text = surface_forms_text

    @property
    def sentiment(self):
        """Gets the sentiment of this NestedEntity.  # noqa: E501


        :return: The sentiment of this NestedEntity.  # noqa: E501
        :rtype: Query
        """
        return self._sentiment

    @sentiment.setter
    def sentiment(self, sentiment):
        """Sets the sentiment of this NestedEntity.


        :param sentiment: The sentiment of this NestedEntity.  # noqa: E501
        :type sentiment: Query
        """

        self._sentiment = sentiment

    @property
    def element(self):
        """Gets the element of this NestedEntity.  # noqa: E501


        :return: The element of this NestedEntity.  # noqa: E501
        :rtype: Query
        """
        return self._element

    @element.setter
    def element(self, element):
        """Sets the element of this NestedEntity.


        :param element: The element of this NestedEntity.  # noqa: E501
        :type element: Query
        """

        self._element = element

    @property
    def links_wikipedia(self):
        """Gets the links_wikipedia of this NestedEntity.  # noqa: E501


        :return: The links_wikipedia of this NestedEntity.  # noqa: E501
        :rtype: Query
        """
        return self._links_wikipedia

    @links_wikipedia.setter
    def links_wikipedia(self, links_wikipedia):
        """Sets the links_wikipedia of this NestedEntity.


        :param links_wikipedia: The links_wikipedia of this NestedEntity.  # noqa: E501
        :type links_wikipedia: Query
        """

        self._links_wikipedia = links_wikipedia

    @property
    def links_wikidata(self):
        """Gets the links_wikidata of this NestedEntity.  # noqa: E501


        :return: The links_wikidata of this NestedEntity.  # noqa: E501
        :rtype: Query
        """
        return self._links_wikidata

    @links_wikidata.setter
    def links_wikidata(self, links_wikidata):
        """Sets the links_wikidata of this NestedEntity.


        :param links_wikidata: The links_wikidata of this NestedEntity.  # noqa: E501
        :type links_wikidata: Query
        """

        self._links_wikidata = links_wikidata

    @property
    def stock_ticker(self):
        """Gets the stock_ticker of this NestedEntity.  # noqa: E501


        :return: The stock_ticker of this NestedEntity.  # noqa: E501
        :rtype: Query
        """
        return self._stock_ticker

    @stock_ticker.setter
    def stock_ticker(self, stock_ticker):
        """Sets the stock_ticker of this NestedEntity.


        :param stock_ticker: The stock_ticker of this NestedEntity.  # noqa: E501
        :type stock_ticker: Query
        """

        self._stock_ticker = stock_ticker

    @property
    def type(self):
        """Gets the type of this NestedEntity.  # noqa: E501


        :return: The type of this NestedEntity.  # noqa: E501
        :rtype: Query
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NestedEntity.


        :param type: The type of this NestedEntity.  # noqa: E501
        :type type: Query
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NestedEntity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NestedEntity):
            return True

        return self.to_dict() != other.to_dict()
