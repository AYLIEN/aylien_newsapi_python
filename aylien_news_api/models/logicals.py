# coding: utf-8

"""
    AYLIEN News API

    The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client.   # noqa: E501

    The version of the OpenAPI document: 4.7
    Contact: support@aylien.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from aylien_news_api.configuration import Configuration


class Logicals(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_and': 'list[AnyOfLogicalsParameter]',
        '_or': 'list[AnyOfLogicalsParameter]',
        '_not': 'list[AnyOfLogicalsParameter]'
    }

    attribute_map = {
        '_and': '$and',
        '_or': '$or',
        '_not': '$not'
    }

    def __init__(self, _and=None, _or=None, _not=None, local_vars_configuration=None):  # noqa: E501
        """Logicals - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self.__and = None
        self.__or = None
        self.__not = None
        self.discriminator = None

        if _and is not None:
            self._and = _and
        if _or is not None:
            self._or = _or
        if _not is not None:
            self._not = _not

    @property
    def _and(self):
        """Gets the _and of this Logicals.  # noqa: E501


        :return: The _and of this Logicals.  # noqa: E501
        :rtype: list[AnyOfLogicalsParameter]
        """
        return self.__and

    @_and.setter
    def _and(self, _and):
        """Sets the _and of this Logicals.


        :param _and: The _and of this Logicals.  # noqa: E501
        :type _and: list[AnyOfLogicalsParameter]
        """

        self.__and = _and

    @property
    def _or(self):
        """Gets the _or of this Logicals.  # noqa: E501


        :return: The _or of this Logicals.  # noqa: E501
        :rtype: list[AnyOfLogicalsParameter]
        """
        return self.__or

    @_or.setter
    def _or(self, _or):
        """Sets the _or of this Logicals.


        :param _or: The _or of this Logicals.  # noqa: E501
        :type _or: list[AnyOfLogicalsParameter]
        """

        self.__or = _or

    @property
    def _not(self):
        """Gets the _not of this Logicals.  # noqa: E501


        :return: The _not of this Logicals.  # noqa: E501
        :rtype: list[AnyOfLogicalsParameter]
        """
        return self.__not

    @_not.setter
    def _not(self, _not):
        """Sets the _not of this Logicals.


        :param _not: The _not of this Logicals.  # noqa: E501
        :type _not: list[AnyOfLogicalsParameter]
        """

        self.__not = _not

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Logicals):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Logicals):
            return True

        return self.to_dict() != other.to_dict()
