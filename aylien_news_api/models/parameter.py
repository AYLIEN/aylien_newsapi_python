# coding: utf-8

"""
    AYLIEN News API

    The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client.   # noqa: E501

    The version of the OpenAPI document: 5.1.0
    Contact: support@aylien.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from aylien_news_api.configuration import Configuration


class Parameter(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'author_id': 'Query',
        'author_name': 'Query',
        'body': 'Query',
        'categories_confident': 'Query',
        'categories_id': 'Query',
        'categories_level': 'Query',
        'categories_taxonomy': 'Query',
        'clusters': 'Query',
        'links_permalink': 'Query',
        'entities_id': 'Query',
        'entities_surface_forms_text': 'Query',
        'entities_links_wikipedia': 'Query',
        'entities_links_wikidata': 'Query',
        'entities_title_surface_forms_text': 'Query',
        'entities_body_surface_forms_text': 'Query',
        'id': 'Query',
        'language': 'Query',
        'media_images_content_length_max': 'Query',
        'media_images_content_length_min': 'Query',
        'media_images_count_max': 'Query',
        'media_images_count_min': 'Query',
        'media_images_format': 'Query',
        'media_images_height_max': 'Query',
        'media_images_height_min': 'Query',
        'media_images_width_max': 'Query',
        'media_images_width_min': 'Query',
        'media_videos_count_max': 'Query',
        'media_videos_count_min': 'Query',
        'sentiment_body_polarity': 'Query',
        'sentiment_title_polarity': 'Query',
        'social_shares_count_facebook_max': 'Query',
        'social_shares_count_facebook_min': 'Query',
        'social_shares_count_reddit_max': 'Query',
        'social_shares_count_reddit_min': 'Query',
        'source_domain': 'Query',
        'source_id': 'Query',
        'source_links_in_count_max': 'Query',
        'source_links_in_count_min': 'Query',
        'source_locations_city': 'Query',
        'source_locations_country': 'Query',
        'source_locations_state': 'Query',
        'source_rankings_alexa_country': 'Query',
        'source_rankings_alexa_rank_max': 'Query',
        'source_rankings_alexa_rank_min': 'Query',
        'source_scopes_city': 'Query',
        'source_scopes_country': 'Query',
        'source_scopes_level': 'Query',
        'source_scopes_state': 'Query',
        'story_url': 'Query',
        'story_language': 'Query',
        'text': 'Query',
        'title': 'Query',
        'translations_en_body': 'Query',
        'translations_en_text': 'Query',
        'translations_en_title': 'Query',
        'entity': 'OneOfNestedEntityLogicals'
    }

    attribute_map = {
        'author_id': 'author.id',
        'author_name': 'author.name',
        'body': 'body',
        'categories_confident': 'categories.confident',
        'categories_id': 'categories.id',
        'categories_level': 'categories.level',
        'categories_taxonomy': 'categories.taxonomy',
        'clusters': 'clusters',
        'links_permalink': 'links.permalink',
        'entities_id': 'entities.id',
        'entities_surface_forms_text': 'entities.surface_forms.text',
        'entities_links_wikipedia': 'entities.links.wikipedia',
        'entities_links_wikidata': 'entities.links.wikidata',
        'entities_title_surface_forms_text': 'entities.title.surface_forms.text',
        'entities_body_surface_forms_text': 'entities.body.surface_forms.text',
        'id': 'id',
        'language': 'language',
        'media_images_content_length_max': 'media.images.content.length.max',
        'media_images_content_length_min': 'media.images.content.length.min',
        'media_images_count_max': 'media.images.count.max',
        'media_images_count_min': 'media.images.count.min',
        'media_images_format': 'media.images.format',
        'media_images_height_max': 'media.images.height.max',
        'media_images_height_min': 'media.images.height.min',
        'media_images_width_max': 'media.images.width.max',
        'media_images_width_min': 'media.images.width.min',
        'media_videos_count_max': 'media.videos.count.max',
        'media_videos_count_min': 'media.videos.count.min',
        'sentiment_body_polarity': 'sentiment.body.polarity',
        'sentiment_title_polarity': 'sentiment.title.polarity',
        'social_shares_count_facebook_max': 'social.shares.count.facebook.max',
        'social_shares_count_facebook_min': 'social.shares.count.facebook.min',
        'social_shares_count_reddit_max': 'social.shares.count.reddit.max',
        'social_shares_count_reddit_min': 'social.shares.count.reddit.min',
        'source_domain': 'source.domain',
        'source_id': 'source.id',
        'source_links_in_count_max': 'source.links.in.count.max',
        'source_links_in_count_min': 'source.links.in.count.min',
        'source_locations_city': 'source.locations.city',
        'source_locations_country': 'source.locations.country',
        'source_locations_state': 'source.locations.state',
        'source_rankings_alexa_country': 'source.rankings.alexa.country',
        'source_rankings_alexa_rank_max': 'source.rankings.alexa.rank.max',
        'source_rankings_alexa_rank_min': 'source.rankings.alexa.rank.min',
        'source_scopes_city': 'source.scopes.city',
        'source_scopes_country': 'source.scopes.country',
        'source_scopes_level': 'source.scopes.level',
        'source_scopes_state': 'source.scopes.state',
        'story_url': 'story_url',
        'story_language': 'story_language',
        'text': 'text',
        'title': 'title',
        'translations_en_body': 'translations.en.body',
        'translations_en_text': 'translations.en.text',
        'translations_en_title': 'translations.en.title',
        'entity': 'entity'
    }

    def __init__(self, author_id=None, author_name=None, body=None, categories_confident=None, categories_id=None, categories_level=None, categories_taxonomy=None, clusters=None, links_permalink=None, entities_id=None, entities_surface_forms_text=None, entities_links_wikipedia=None, entities_links_wikidata=None, entities_title_surface_forms_text=None, entities_body_surface_forms_text=None, id=None, language=None, media_images_content_length_max=None, media_images_content_length_min=None, media_images_count_max=None, media_images_count_min=None, media_images_format=None, media_images_height_max=None, media_images_height_min=None, media_images_width_max=None, media_images_width_min=None, media_videos_count_max=None, media_videos_count_min=None, sentiment_body_polarity=None, sentiment_title_polarity=None, social_shares_count_facebook_max=None, social_shares_count_facebook_min=None, social_shares_count_reddit_max=None, social_shares_count_reddit_min=None, source_domain=None, source_id=None, source_links_in_count_max=None, source_links_in_count_min=None, source_locations_city=None, source_locations_country=None, source_locations_state=None, source_rankings_alexa_country=None, source_rankings_alexa_rank_max=None, source_rankings_alexa_rank_min=None, source_scopes_city=None, source_scopes_country=None, source_scopes_level=None, source_scopes_state=None, story_url=None, story_language=None, text=None, title=None, translations_en_body=None, translations_en_text=None, translations_en_title=None, entity=None, local_vars_configuration=None):  # noqa: E501
        """Parameter - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._author_id = None
        self._author_name = None
        self._body = None
        self._categories_confident = None
        self._categories_id = None
        self._categories_level = None
        self._categories_taxonomy = None
        self._clusters = None
        self._links_permalink = None
        self._entities_id = None
        self._entities_surface_forms_text = None
        self._entities_links_wikipedia = None
        self._entities_links_wikidata = None
        self._entities_title_surface_forms_text = None
        self._entities_body_surface_forms_text = None
        self._id = None
        self._language = None
        self._media_images_content_length_max = None
        self._media_images_content_length_min = None
        self._media_images_count_max = None
        self._media_images_count_min = None
        self._media_images_format = None
        self._media_images_height_max = None
        self._media_images_height_min = None
        self._media_images_width_max = None
        self._media_images_width_min = None
        self._media_videos_count_max = None
        self._media_videos_count_min = None
        self._sentiment_body_polarity = None
        self._sentiment_title_polarity = None
        self._social_shares_count_facebook_max = None
        self._social_shares_count_facebook_min = None
        self._social_shares_count_reddit_max = None
        self._social_shares_count_reddit_min = None
        self._source_domain = None
        self._source_id = None
        self._source_links_in_count_max = None
        self._source_links_in_count_min = None
        self._source_locations_city = None
        self._source_locations_country = None
        self._source_locations_state = None
        self._source_rankings_alexa_country = None
        self._source_rankings_alexa_rank_max = None
        self._source_rankings_alexa_rank_min = None
        self._source_scopes_city = None
        self._source_scopes_country = None
        self._source_scopes_level = None
        self._source_scopes_state = None
        self._story_url = None
        self._story_language = None
        self._text = None
        self._title = None
        self._translations_en_body = None
        self._translations_en_text = None
        self._translations_en_title = None
        self._entity = None
        self.discriminator = None

        if author_id is not None:
            self.author_id = author_id
        if author_name is not None:
            self.author_name = author_name
        if body is not None:
            self.body = body
        if categories_confident is not None:
            self.categories_confident = categories_confident
        if categories_id is not None:
            self.categories_id = categories_id
        if categories_level is not None:
            self.categories_level = categories_level
        if categories_taxonomy is not None:
            self.categories_taxonomy = categories_taxonomy
        if clusters is not None:
            self.clusters = clusters
        if links_permalink is not None:
            self.links_permalink = links_permalink
        if entities_id is not None:
            self.entities_id = entities_id
        if entities_surface_forms_text is not None:
            self.entities_surface_forms_text = entities_surface_forms_text
        if entities_links_wikipedia is not None:
            self.entities_links_wikipedia = entities_links_wikipedia
        if entities_links_wikidata is not None:
            self.entities_links_wikidata = entities_links_wikidata
        if entities_title_surface_forms_text is not None:
            self.entities_title_surface_forms_text = entities_title_surface_forms_text
        if entities_body_surface_forms_text is not None:
            self.entities_body_surface_forms_text = entities_body_surface_forms_text
        if id is not None:
            self.id = id
        if language is not None:
            self.language = language
        if media_images_content_length_max is not None:
            self.media_images_content_length_max = media_images_content_length_max
        if media_images_content_length_min is not None:
            self.media_images_content_length_min = media_images_content_length_min
        if media_images_count_max is not None:
            self.media_images_count_max = media_images_count_max
        if media_images_count_min is not None:
            self.media_images_count_min = media_images_count_min
        if media_images_format is not None:
            self.media_images_format = media_images_format
        if media_images_height_max is not None:
            self.media_images_height_max = media_images_height_max
        if media_images_height_min is not None:
            self.media_images_height_min = media_images_height_min
        if media_images_width_max is not None:
            self.media_images_width_max = media_images_width_max
        if media_images_width_min is not None:
            self.media_images_width_min = media_images_width_min
        if media_videos_count_max is not None:
            self.media_videos_count_max = media_videos_count_max
        if media_videos_count_min is not None:
            self.media_videos_count_min = media_videos_count_min
        if sentiment_body_polarity is not None:
            self.sentiment_body_polarity = sentiment_body_polarity
        if sentiment_title_polarity is not None:
            self.sentiment_title_polarity = sentiment_title_polarity
        if social_shares_count_facebook_max is not None:
            self.social_shares_count_facebook_max = social_shares_count_facebook_max
        if social_shares_count_facebook_min is not None:
            self.social_shares_count_facebook_min = social_shares_count_facebook_min
        if social_shares_count_reddit_max is not None:
            self.social_shares_count_reddit_max = social_shares_count_reddit_max
        if social_shares_count_reddit_min is not None:
            self.social_shares_count_reddit_min = social_shares_count_reddit_min
        if source_domain is not None:
            self.source_domain = source_domain
        if source_id is not None:
            self.source_id = source_id
        if source_links_in_count_max is not None:
            self.source_links_in_count_max = source_links_in_count_max
        if source_links_in_count_min is not None:
            self.source_links_in_count_min = source_links_in_count_min
        if source_locations_city is not None:
            self.source_locations_city = source_locations_city
        if source_locations_country is not None:
            self.source_locations_country = source_locations_country
        if source_locations_state is not None:
            self.source_locations_state = source_locations_state
        if source_rankings_alexa_country is not None:
            self.source_rankings_alexa_country = source_rankings_alexa_country
        if source_rankings_alexa_rank_max is not None:
            self.source_rankings_alexa_rank_max = source_rankings_alexa_rank_max
        if source_rankings_alexa_rank_min is not None:
            self.source_rankings_alexa_rank_min = source_rankings_alexa_rank_min
        if source_scopes_city is not None:
            self.source_scopes_city = source_scopes_city
        if source_scopes_country is not None:
            self.source_scopes_country = source_scopes_country
        if source_scopes_level is not None:
            self.source_scopes_level = source_scopes_level
        if source_scopes_state is not None:
            self.source_scopes_state = source_scopes_state
        if story_url is not None:
            self.story_url = story_url
        if story_language is not None:
            self.story_language = story_language
        if text is not None:
            self.text = text
        if title is not None:
            self.title = title
        if translations_en_body is not None:
            self.translations_en_body = translations_en_body
        if translations_en_text is not None:
            self.translations_en_text = translations_en_text
        if translations_en_title is not None:
            self.translations_en_title = translations_en_title
        if entity is not None:
            self.entity = entity

    @property
    def author_id(self):
        """Gets the author_id of this Parameter.  # noqa: E501


        :return: The author_id of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id):
        """Sets the author_id of this Parameter.


        :param author_id: The author_id of this Parameter.  # noqa: E501
        :type author_id: Query
        """

        self._author_id = author_id

    @property
    def author_name(self):
        """Gets the author_name of this Parameter.  # noqa: E501


        :return: The author_name of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._author_name

    @author_name.setter
    def author_name(self, author_name):
        """Sets the author_name of this Parameter.


        :param author_name: The author_name of this Parameter.  # noqa: E501
        :type author_name: Query
        """

        self._author_name = author_name

    @property
    def body(self):
        """Gets the body of this Parameter.  # noqa: E501


        :return: The body of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Parameter.


        :param body: The body of this Parameter.  # noqa: E501
        :type body: Query
        """

        self._body = body

    @property
    def categories_confident(self):
        """Gets the categories_confident of this Parameter.  # noqa: E501


        :return: The categories_confident of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._categories_confident

    @categories_confident.setter
    def categories_confident(self, categories_confident):
        """Sets the categories_confident of this Parameter.


        :param categories_confident: The categories_confident of this Parameter.  # noqa: E501
        :type categories_confident: Query
        """

        self._categories_confident = categories_confident

    @property
    def categories_id(self):
        """Gets the categories_id of this Parameter.  # noqa: E501


        :return: The categories_id of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._categories_id

    @categories_id.setter
    def categories_id(self, categories_id):
        """Sets the categories_id of this Parameter.


        :param categories_id: The categories_id of this Parameter.  # noqa: E501
        :type categories_id: Query
        """

        self._categories_id = categories_id

    @property
    def categories_level(self):
        """Gets the categories_level of this Parameter.  # noqa: E501


        :return: The categories_level of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._categories_level

    @categories_level.setter
    def categories_level(self, categories_level):
        """Sets the categories_level of this Parameter.


        :param categories_level: The categories_level of this Parameter.  # noqa: E501
        :type categories_level: Query
        """

        self._categories_level = categories_level

    @property
    def categories_taxonomy(self):
        """Gets the categories_taxonomy of this Parameter.  # noqa: E501


        :return: The categories_taxonomy of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._categories_taxonomy

    @categories_taxonomy.setter
    def categories_taxonomy(self, categories_taxonomy):
        """Sets the categories_taxonomy of this Parameter.


        :param categories_taxonomy: The categories_taxonomy of this Parameter.  # noqa: E501
        :type categories_taxonomy: Query
        """

        self._categories_taxonomy = categories_taxonomy

    @property
    def clusters(self):
        """Gets the clusters of this Parameter.  # noqa: E501


        :return: The clusters of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._clusters

    @clusters.setter
    def clusters(self, clusters):
        """Sets the clusters of this Parameter.


        :param clusters: The clusters of this Parameter.  # noqa: E501
        :type clusters: Query
        """

        self._clusters = clusters

    @property
    def links_permalink(self):
        """Gets the links_permalink of this Parameter.  # noqa: E501


        :return: The links_permalink of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._links_permalink

    @links_permalink.setter
    def links_permalink(self, links_permalink):
        """Sets the links_permalink of this Parameter.


        :param links_permalink: The links_permalink of this Parameter.  # noqa: E501
        :type links_permalink: Query
        """

        self._links_permalink = links_permalink

    @property
    def entities_id(self):
        """Gets the entities_id of this Parameter.  # noqa: E501


        :return: The entities_id of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._entities_id

    @entities_id.setter
    def entities_id(self, entities_id):
        """Sets the entities_id of this Parameter.


        :param entities_id: The entities_id of this Parameter.  # noqa: E501
        :type entities_id: Query
        """

        self._entities_id = entities_id

    @property
    def entities_surface_forms_text(self):
        """Gets the entities_surface_forms_text of this Parameter.  # noqa: E501


        :return: The entities_surface_forms_text of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._entities_surface_forms_text

    @entities_surface_forms_text.setter
    def entities_surface_forms_text(self, entities_surface_forms_text):
        """Sets the entities_surface_forms_text of this Parameter.


        :param entities_surface_forms_text: The entities_surface_forms_text of this Parameter.  # noqa: E501
        :type entities_surface_forms_text: Query
        """

        self._entities_surface_forms_text = entities_surface_forms_text

    @property
    def entities_links_wikipedia(self):
        """Gets the entities_links_wikipedia of this Parameter.  # noqa: E501


        :return: The entities_links_wikipedia of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._entities_links_wikipedia

    @entities_links_wikipedia.setter
    def entities_links_wikipedia(self, entities_links_wikipedia):
        """Sets the entities_links_wikipedia of this Parameter.


        :param entities_links_wikipedia: The entities_links_wikipedia of this Parameter.  # noqa: E501
        :type entities_links_wikipedia: Query
        """

        self._entities_links_wikipedia = entities_links_wikipedia

    @property
    def entities_links_wikidata(self):
        """Gets the entities_links_wikidata of this Parameter.  # noqa: E501


        :return: The entities_links_wikidata of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._entities_links_wikidata

    @entities_links_wikidata.setter
    def entities_links_wikidata(self, entities_links_wikidata):
        """Sets the entities_links_wikidata of this Parameter.


        :param entities_links_wikidata: The entities_links_wikidata of this Parameter.  # noqa: E501
        :type entities_links_wikidata: Query
        """

        self._entities_links_wikidata = entities_links_wikidata

    @property
    def entities_title_surface_forms_text(self):
        """Gets the entities_title_surface_forms_text of this Parameter.  # noqa: E501


        :return: The entities_title_surface_forms_text of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._entities_title_surface_forms_text

    @entities_title_surface_forms_text.setter
    def entities_title_surface_forms_text(self, entities_title_surface_forms_text):
        """Sets the entities_title_surface_forms_text of this Parameter.


        :param entities_title_surface_forms_text: The entities_title_surface_forms_text of this Parameter.  # noqa: E501
        :type entities_title_surface_forms_text: Query
        """

        self._entities_title_surface_forms_text = entities_title_surface_forms_text

    @property
    def entities_body_surface_forms_text(self):
        """Gets the entities_body_surface_forms_text of this Parameter.  # noqa: E501


        :return: The entities_body_surface_forms_text of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._entities_body_surface_forms_text

    @entities_body_surface_forms_text.setter
    def entities_body_surface_forms_text(self, entities_body_surface_forms_text):
        """Sets the entities_body_surface_forms_text of this Parameter.


        :param entities_body_surface_forms_text: The entities_body_surface_forms_text of this Parameter.  # noqa: E501
        :type entities_body_surface_forms_text: Query
        """

        self._entities_body_surface_forms_text = entities_body_surface_forms_text

    @property
    def id(self):
        """Gets the id of this Parameter.  # noqa: E501


        :return: The id of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Parameter.


        :param id: The id of this Parameter.  # noqa: E501
        :type id: Query
        """

        self._id = id

    @property
    def language(self):
        """Gets the language of this Parameter.  # noqa: E501


        :return: The language of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Parameter.


        :param language: The language of this Parameter.  # noqa: E501
        :type language: Query
        """

        self._language = language

    @property
    def media_images_content_length_max(self):
        """Gets the media_images_content_length_max of this Parameter.  # noqa: E501


        :return: The media_images_content_length_max of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._media_images_content_length_max

    @media_images_content_length_max.setter
    def media_images_content_length_max(self, media_images_content_length_max):
        """Sets the media_images_content_length_max of this Parameter.


        :param media_images_content_length_max: The media_images_content_length_max of this Parameter.  # noqa: E501
        :type media_images_content_length_max: Query
        """

        self._media_images_content_length_max = media_images_content_length_max

    @property
    def media_images_content_length_min(self):
        """Gets the media_images_content_length_min of this Parameter.  # noqa: E501


        :return: The media_images_content_length_min of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._media_images_content_length_min

    @media_images_content_length_min.setter
    def media_images_content_length_min(self, media_images_content_length_min):
        """Sets the media_images_content_length_min of this Parameter.


        :param media_images_content_length_min: The media_images_content_length_min of this Parameter.  # noqa: E501
        :type media_images_content_length_min: Query
        """

        self._media_images_content_length_min = media_images_content_length_min

    @property
    def media_images_count_max(self):
        """Gets the media_images_count_max of this Parameter.  # noqa: E501


        :return: The media_images_count_max of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._media_images_count_max

    @media_images_count_max.setter
    def media_images_count_max(self, media_images_count_max):
        """Sets the media_images_count_max of this Parameter.


        :param media_images_count_max: The media_images_count_max of this Parameter.  # noqa: E501
        :type media_images_count_max: Query
        """

        self._media_images_count_max = media_images_count_max

    @property
    def media_images_count_min(self):
        """Gets the media_images_count_min of this Parameter.  # noqa: E501


        :return: The media_images_count_min of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._media_images_count_min

    @media_images_count_min.setter
    def media_images_count_min(self, media_images_count_min):
        """Sets the media_images_count_min of this Parameter.


        :param media_images_count_min: The media_images_count_min of this Parameter.  # noqa: E501
        :type media_images_count_min: Query
        """

        self._media_images_count_min = media_images_count_min

    @property
    def media_images_format(self):
        """Gets the media_images_format of this Parameter.  # noqa: E501


        :return: The media_images_format of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._media_images_format

    @media_images_format.setter
    def media_images_format(self, media_images_format):
        """Sets the media_images_format of this Parameter.


        :param media_images_format: The media_images_format of this Parameter.  # noqa: E501
        :type media_images_format: Query
        """

        self._media_images_format = media_images_format

    @property
    def media_images_height_max(self):
        """Gets the media_images_height_max of this Parameter.  # noqa: E501


        :return: The media_images_height_max of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._media_images_height_max

    @media_images_height_max.setter
    def media_images_height_max(self, media_images_height_max):
        """Sets the media_images_height_max of this Parameter.


        :param media_images_height_max: The media_images_height_max of this Parameter.  # noqa: E501
        :type media_images_height_max: Query
        """

        self._media_images_height_max = media_images_height_max

    @property
    def media_images_height_min(self):
        """Gets the media_images_height_min of this Parameter.  # noqa: E501


        :return: The media_images_height_min of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._media_images_height_min

    @media_images_height_min.setter
    def media_images_height_min(self, media_images_height_min):
        """Sets the media_images_height_min of this Parameter.


        :param media_images_height_min: The media_images_height_min of this Parameter.  # noqa: E501
        :type media_images_height_min: Query
        """

        self._media_images_height_min = media_images_height_min

    @property
    def media_images_width_max(self):
        """Gets the media_images_width_max of this Parameter.  # noqa: E501


        :return: The media_images_width_max of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._media_images_width_max

    @media_images_width_max.setter
    def media_images_width_max(self, media_images_width_max):
        """Sets the media_images_width_max of this Parameter.


        :param media_images_width_max: The media_images_width_max of this Parameter.  # noqa: E501
        :type media_images_width_max: Query
        """

        self._media_images_width_max = media_images_width_max

    @property
    def media_images_width_min(self):
        """Gets the media_images_width_min of this Parameter.  # noqa: E501


        :return: The media_images_width_min of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._media_images_width_min

    @media_images_width_min.setter
    def media_images_width_min(self, media_images_width_min):
        """Sets the media_images_width_min of this Parameter.


        :param media_images_width_min: The media_images_width_min of this Parameter.  # noqa: E501
        :type media_images_width_min: Query
        """

        self._media_images_width_min = media_images_width_min

    @property
    def media_videos_count_max(self):
        """Gets the media_videos_count_max of this Parameter.  # noqa: E501


        :return: The media_videos_count_max of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._media_videos_count_max

    @media_videos_count_max.setter
    def media_videos_count_max(self, media_videos_count_max):
        """Sets the media_videos_count_max of this Parameter.


        :param media_videos_count_max: The media_videos_count_max of this Parameter.  # noqa: E501
        :type media_videos_count_max: Query
        """

        self._media_videos_count_max = media_videos_count_max

    @property
    def media_videos_count_min(self):
        """Gets the media_videos_count_min of this Parameter.  # noqa: E501


        :return: The media_videos_count_min of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._media_videos_count_min

    @media_videos_count_min.setter
    def media_videos_count_min(self, media_videos_count_min):
        """Sets the media_videos_count_min of this Parameter.


        :param media_videos_count_min: The media_videos_count_min of this Parameter.  # noqa: E501
        :type media_videos_count_min: Query
        """

        self._media_videos_count_min = media_videos_count_min

    @property
    def sentiment_body_polarity(self):
        """Gets the sentiment_body_polarity of this Parameter.  # noqa: E501


        :return: The sentiment_body_polarity of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._sentiment_body_polarity

    @sentiment_body_polarity.setter
    def sentiment_body_polarity(self, sentiment_body_polarity):
        """Sets the sentiment_body_polarity of this Parameter.


        :param sentiment_body_polarity: The sentiment_body_polarity of this Parameter.  # noqa: E501
        :type sentiment_body_polarity: Query
        """

        self._sentiment_body_polarity = sentiment_body_polarity

    @property
    def sentiment_title_polarity(self):
        """Gets the sentiment_title_polarity of this Parameter.  # noqa: E501


        :return: The sentiment_title_polarity of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._sentiment_title_polarity

    @sentiment_title_polarity.setter
    def sentiment_title_polarity(self, sentiment_title_polarity):
        """Sets the sentiment_title_polarity of this Parameter.


        :param sentiment_title_polarity: The sentiment_title_polarity of this Parameter.  # noqa: E501
        :type sentiment_title_polarity: Query
        """

        self._sentiment_title_polarity = sentiment_title_polarity

    @property
    def social_shares_count_facebook_max(self):
        """Gets the social_shares_count_facebook_max of this Parameter.  # noqa: E501


        :return: The social_shares_count_facebook_max of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._social_shares_count_facebook_max

    @social_shares_count_facebook_max.setter
    def social_shares_count_facebook_max(self, social_shares_count_facebook_max):
        """Sets the social_shares_count_facebook_max of this Parameter.


        :param social_shares_count_facebook_max: The social_shares_count_facebook_max of this Parameter.  # noqa: E501
        :type social_shares_count_facebook_max: Query
        """

        self._social_shares_count_facebook_max = social_shares_count_facebook_max

    @property
    def social_shares_count_facebook_min(self):
        """Gets the social_shares_count_facebook_min of this Parameter.  # noqa: E501


        :return: The social_shares_count_facebook_min of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._social_shares_count_facebook_min

    @social_shares_count_facebook_min.setter
    def social_shares_count_facebook_min(self, social_shares_count_facebook_min):
        """Sets the social_shares_count_facebook_min of this Parameter.


        :param social_shares_count_facebook_min: The social_shares_count_facebook_min of this Parameter.  # noqa: E501
        :type social_shares_count_facebook_min: Query
        """

        self._social_shares_count_facebook_min = social_shares_count_facebook_min

    @property
    def social_shares_count_reddit_max(self):
        """Gets the social_shares_count_reddit_max of this Parameter.  # noqa: E501


        :return: The social_shares_count_reddit_max of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._social_shares_count_reddit_max

    @social_shares_count_reddit_max.setter
    def social_shares_count_reddit_max(self, social_shares_count_reddit_max):
        """Sets the social_shares_count_reddit_max of this Parameter.


        :param social_shares_count_reddit_max: The social_shares_count_reddit_max of this Parameter.  # noqa: E501
        :type social_shares_count_reddit_max: Query
        """

        self._social_shares_count_reddit_max = social_shares_count_reddit_max

    @property
    def social_shares_count_reddit_min(self):
        """Gets the social_shares_count_reddit_min of this Parameter.  # noqa: E501


        :return: The social_shares_count_reddit_min of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._social_shares_count_reddit_min

    @social_shares_count_reddit_min.setter
    def social_shares_count_reddit_min(self, social_shares_count_reddit_min):
        """Sets the social_shares_count_reddit_min of this Parameter.


        :param social_shares_count_reddit_min: The social_shares_count_reddit_min of this Parameter.  # noqa: E501
        :type social_shares_count_reddit_min: Query
        """

        self._social_shares_count_reddit_min = social_shares_count_reddit_min

    @property
    def source_domain(self):
        """Gets the source_domain of this Parameter.  # noqa: E501


        :return: The source_domain of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._source_domain

    @source_domain.setter
    def source_domain(self, source_domain):
        """Sets the source_domain of this Parameter.


        :param source_domain: The source_domain of this Parameter.  # noqa: E501
        :type source_domain: Query
        """

        self._source_domain = source_domain

    @property
    def source_id(self):
        """Gets the source_id of this Parameter.  # noqa: E501


        :return: The source_id of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Parameter.


        :param source_id: The source_id of this Parameter.  # noqa: E501
        :type source_id: Query
        """

        self._source_id = source_id

    @property
    def source_links_in_count_max(self):
        """Gets the source_links_in_count_max of this Parameter.  # noqa: E501


        :return: The source_links_in_count_max of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._source_links_in_count_max

    @source_links_in_count_max.setter
    def source_links_in_count_max(self, source_links_in_count_max):
        """Sets the source_links_in_count_max of this Parameter.


        :param source_links_in_count_max: The source_links_in_count_max of this Parameter.  # noqa: E501
        :type source_links_in_count_max: Query
        """

        self._source_links_in_count_max = source_links_in_count_max

    @property
    def source_links_in_count_min(self):
        """Gets the source_links_in_count_min of this Parameter.  # noqa: E501


        :return: The source_links_in_count_min of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._source_links_in_count_min

    @source_links_in_count_min.setter
    def source_links_in_count_min(self, source_links_in_count_min):
        """Sets the source_links_in_count_min of this Parameter.


        :param source_links_in_count_min: The source_links_in_count_min of this Parameter.  # noqa: E501
        :type source_links_in_count_min: Query
        """

        self._source_links_in_count_min = source_links_in_count_min

    @property
    def source_locations_city(self):
        """Gets the source_locations_city of this Parameter.  # noqa: E501


        :return: The source_locations_city of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._source_locations_city

    @source_locations_city.setter
    def source_locations_city(self, source_locations_city):
        """Sets the source_locations_city of this Parameter.


        :param source_locations_city: The source_locations_city of this Parameter.  # noqa: E501
        :type source_locations_city: Query
        """

        self._source_locations_city = source_locations_city

    @property
    def source_locations_country(self):
        """Gets the source_locations_country of this Parameter.  # noqa: E501


        :return: The source_locations_country of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._source_locations_country

    @source_locations_country.setter
    def source_locations_country(self, source_locations_country):
        """Sets the source_locations_country of this Parameter.


        :param source_locations_country: The source_locations_country of this Parameter.  # noqa: E501
        :type source_locations_country: Query
        """

        self._source_locations_country = source_locations_country

    @property
    def source_locations_state(self):
        """Gets the source_locations_state of this Parameter.  # noqa: E501


        :return: The source_locations_state of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._source_locations_state

    @source_locations_state.setter
    def source_locations_state(self, source_locations_state):
        """Sets the source_locations_state of this Parameter.


        :param source_locations_state: The source_locations_state of this Parameter.  # noqa: E501
        :type source_locations_state: Query
        """

        self._source_locations_state = source_locations_state

    @property
    def source_rankings_alexa_country(self):
        """Gets the source_rankings_alexa_country of this Parameter.  # noqa: E501


        :return: The source_rankings_alexa_country of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._source_rankings_alexa_country

    @source_rankings_alexa_country.setter
    def source_rankings_alexa_country(self, source_rankings_alexa_country):
        """Sets the source_rankings_alexa_country of this Parameter.


        :param source_rankings_alexa_country: The source_rankings_alexa_country of this Parameter.  # noqa: E501
        :type source_rankings_alexa_country: Query
        """

        self._source_rankings_alexa_country = source_rankings_alexa_country

    @property
    def source_rankings_alexa_rank_max(self):
        """Gets the source_rankings_alexa_rank_max of this Parameter.  # noqa: E501


        :return: The source_rankings_alexa_rank_max of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._source_rankings_alexa_rank_max

    @source_rankings_alexa_rank_max.setter
    def source_rankings_alexa_rank_max(self, source_rankings_alexa_rank_max):
        """Sets the source_rankings_alexa_rank_max of this Parameter.


        :param source_rankings_alexa_rank_max: The source_rankings_alexa_rank_max of this Parameter.  # noqa: E501
        :type source_rankings_alexa_rank_max: Query
        """

        self._source_rankings_alexa_rank_max = source_rankings_alexa_rank_max

    @property
    def source_rankings_alexa_rank_min(self):
        """Gets the source_rankings_alexa_rank_min of this Parameter.  # noqa: E501


        :return: The source_rankings_alexa_rank_min of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._source_rankings_alexa_rank_min

    @source_rankings_alexa_rank_min.setter
    def source_rankings_alexa_rank_min(self, source_rankings_alexa_rank_min):
        """Sets the source_rankings_alexa_rank_min of this Parameter.


        :param source_rankings_alexa_rank_min: The source_rankings_alexa_rank_min of this Parameter.  # noqa: E501
        :type source_rankings_alexa_rank_min: Query
        """

        self._source_rankings_alexa_rank_min = source_rankings_alexa_rank_min

    @property
    def source_scopes_city(self):
        """Gets the source_scopes_city of this Parameter.  # noqa: E501


        :return: The source_scopes_city of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._source_scopes_city

    @source_scopes_city.setter
    def source_scopes_city(self, source_scopes_city):
        """Sets the source_scopes_city of this Parameter.


        :param source_scopes_city: The source_scopes_city of this Parameter.  # noqa: E501
        :type source_scopes_city: Query
        """

        self._source_scopes_city = source_scopes_city

    @property
    def source_scopes_country(self):
        """Gets the source_scopes_country of this Parameter.  # noqa: E501


        :return: The source_scopes_country of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._source_scopes_country

    @source_scopes_country.setter
    def source_scopes_country(self, source_scopes_country):
        """Sets the source_scopes_country of this Parameter.


        :param source_scopes_country: The source_scopes_country of this Parameter.  # noqa: E501
        :type source_scopes_country: Query
        """

        self._source_scopes_country = source_scopes_country

    @property
    def source_scopes_level(self):
        """Gets the source_scopes_level of this Parameter.  # noqa: E501


        :return: The source_scopes_level of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._source_scopes_level

    @source_scopes_level.setter
    def source_scopes_level(self, source_scopes_level):
        """Sets the source_scopes_level of this Parameter.


        :param source_scopes_level: The source_scopes_level of this Parameter.  # noqa: E501
        :type source_scopes_level: Query
        """

        self._source_scopes_level = source_scopes_level

    @property
    def source_scopes_state(self):
        """Gets the source_scopes_state of this Parameter.  # noqa: E501


        :return: The source_scopes_state of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._source_scopes_state

    @source_scopes_state.setter
    def source_scopes_state(self, source_scopes_state):
        """Sets the source_scopes_state of this Parameter.


        :param source_scopes_state: The source_scopes_state of this Parameter.  # noqa: E501
        :type source_scopes_state: Query
        """

        self._source_scopes_state = source_scopes_state

    @property
    def story_url(self):
        """Gets the story_url of this Parameter.  # noqa: E501


        :return: The story_url of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._story_url

    @story_url.setter
    def story_url(self, story_url):
        """Sets the story_url of this Parameter.


        :param story_url: The story_url of this Parameter.  # noqa: E501
        :type story_url: Query
        """

        self._story_url = story_url

    @property
    def story_language(self):
        """Gets the story_language of this Parameter.  # noqa: E501


        :return: The story_language of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._story_language

    @story_language.setter
    def story_language(self, story_language):
        """Sets the story_language of this Parameter.


        :param story_language: The story_language of this Parameter.  # noqa: E501
        :type story_language: Query
        """

        self._story_language = story_language

    @property
    def text(self):
        """Gets the text of this Parameter.  # noqa: E501


        :return: The text of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Parameter.


        :param text: The text of this Parameter.  # noqa: E501
        :type text: Query
        """

        self._text = text

    @property
    def title(self):
        """Gets the title of this Parameter.  # noqa: E501


        :return: The title of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Parameter.


        :param title: The title of this Parameter.  # noqa: E501
        :type title: Query
        """

        self._title = title

    @property
    def translations_en_body(self):
        """Gets the translations_en_body of this Parameter.  # noqa: E501


        :return: The translations_en_body of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._translations_en_body

    @translations_en_body.setter
    def translations_en_body(self, translations_en_body):
        """Sets the translations_en_body of this Parameter.


        :param translations_en_body: The translations_en_body of this Parameter.  # noqa: E501
        :type translations_en_body: Query
        """

        self._translations_en_body = translations_en_body

    @property
    def translations_en_text(self):
        """Gets the translations_en_text of this Parameter.  # noqa: E501


        :return: The translations_en_text of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._translations_en_text

    @translations_en_text.setter
    def translations_en_text(self, translations_en_text):
        """Sets the translations_en_text of this Parameter.


        :param translations_en_text: The translations_en_text of this Parameter.  # noqa: E501
        :type translations_en_text: Query
        """

        self._translations_en_text = translations_en_text

    @property
    def translations_en_title(self):
        """Gets the translations_en_title of this Parameter.  # noqa: E501


        :return: The translations_en_title of this Parameter.  # noqa: E501
        :rtype: Query
        """
        return self._translations_en_title

    @translations_en_title.setter
    def translations_en_title(self, translations_en_title):
        """Sets the translations_en_title of this Parameter.


        :param translations_en_title: The translations_en_title of this Parameter.  # noqa: E501
        :type translations_en_title: Query
        """

        self._translations_en_title = translations_en_title

    @property
    def entity(self):
        """Gets the entity of this Parameter.  # noqa: E501


        :return: The entity of this Parameter.  # noqa: E501
        :rtype: OneOfNestedEntityLogicals
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this Parameter.


        :param entity: The entity of this Parameter.  # noqa: E501
        :type entity: OneOfNestedEntityLogicals
        """

        self._entity = entity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Parameter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Parameter):
            return True

        return self.to_dict() != other.to_dict()
